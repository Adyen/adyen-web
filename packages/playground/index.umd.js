debugger;

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined'
        ? (module.exports = factory())
        : typeof define === 'function' && define.amd
        ? define(factory)
        : ((global = typeof globalThis !== 'undefined' ? globalThis : global || self), (global.AdyenCheckout = factory()));
})(this, function () {
    'use strict';

    var n,
        l$1,
        u$1,
        t$1,
        r$1,
        o$1,
        f$1,
        e$1,
        c$1 = {},
        s$1 = [],
        a$1 = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
    function h$1(n, l) {
        for (var u in l) n[u] = l[u];
        return n;
    }
    function v$1(n) {
        var l = n.parentNode;
        l && l.removeChild(n);
    }
    function y$1(l, u, i) {
        var t,
            r,
            o,
            f = {};
        for (o in u) 'key' == o ? (t = u[o]) : 'ref' == o ? (r = u[o]) : (f[o] = u[o]);
        if (
            (arguments.length > 2 && (f.children = arguments.length > 3 ? n.call(arguments, 2) : i), 'function' == typeof l && null != l.defaultProps)
        )
            for (o in l.defaultProps) void 0 === f[o] && (f[o] = l.defaultProps[o]);
        return p$1(l, f, t, r, null);
    }
    function p$1(n, i, t, r, o) {
        var f = {
            type: n,
            props: i,
            key: t,
            ref: r,
            __k: null,
            __: null,
            __b: 0,
            __e: null,
            __d: void 0,
            __c: null,
            __h: null,
            constructor: void 0,
            __v: null == o ? ++u$1 : o
        };
        return null == o && null != l$1.vnode && l$1.vnode(f), f;
    }
    function _$1(n) {
        return n.children;
    }
    function k$1(n, l) {
        (this.props = n), (this.context = l);
    }
    function b$1(n, l) {
        if (null == l) return n.__ ? b$1(n.__, n.__.__k.indexOf(n) + 1) : null;
        for (var u; l < n.__k.length; l++) if (null != (u = n.__k[l]) && null != u.__e) return u.__e;
        return 'function' == typeof n.type ? b$1(n) : null;
    }
    function g$2(n) {
        var l, u;
        if (null != (n = n.__) && null != n.__c) {
            for (n.__e = n.__c.base = null, l = 0; l < n.__k.length; l++)
                if (null != (u = n.__k[l]) && null != u.__e) {
                    n.__e = n.__c.base = u.__e;
                    break;
                }
            return g$2(n);
        }
    }
    function m$1(n) {
        ((!n.__d && (n.__d = !0) && t$1.push(n) && !w$1.__r++) || r$1 !== l$1.debounceRendering) && ((r$1 = l$1.debounceRendering) || o$1)(w$1);
    }
    function w$1() {
        var n, l, u, i, r, o, e, c;
        for (t$1.sort(f$1); (n = t$1.shift()); )
            n.__d &&
                ((l = t$1.length),
                (i = void 0),
                (r = void 0),
                (e = (o = (u = n).__v).__e),
                (c = u.__P) &&
                    ((i = []),
                    ((r = h$1({}, o)).__v = o.__v + 1),
                    L(c, o, r, u.__n, void 0 !== c.ownerSVGElement, null != o.__h ? [e] : null, i, null == e ? b$1(o) : e, o.__h),
                    M(i, o),
                    o.__e != e && g$2(o)),
                t$1.length > l && t$1.sort(f$1));
        w$1.__r = 0;
    }
    function x(n, l, u, i, t, r, o, f, e, a) {
        var h,
            v,
            y,
            d,
            k,
            g,
            m,
            w = (i && i.__k) || s$1,
            x = w.length;
        for (u.__k = [], h = 0; h < l.length; h++)
            if (
                null !=
                (d = u.__k[h] =
                    null == (d = l[h]) || 'boolean' == typeof d || 'function' == typeof d
                        ? null
                        : 'string' == typeof d || 'number' == typeof d || 'bigint' == typeof d
                        ? p$1(null, d, null, null, d)
                        : Array.isArray(d)
                        ? p$1(_$1, { children: d }, null, null, null)
                        : d.__b > 0
                        ? p$1(d.type, d.props, d.key, d.ref ? d.ref : null, d.__v)
                        : d)
            ) {
                if (((d.__ = u), (d.__b = u.__b + 1), null === (y = w[h]) || (y && d.key == y.key && d.type === y.type))) w[h] = void 0;
                else
                    for (v = 0; v < x; v++) {
                        if ((y = w[v]) && d.key == y.key && d.type === y.type) {
                            w[v] = void 0;
                            break;
                        }
                        y = null;
                    }
                L(n, d, (y = y || c$1), t, r, o, f, e, a),
                    (k = d.__e),
                    (v = d.ref) && y.ref != v && (m || (m = []), y.ref && m.push(y.ref, null, d), m.push(v, d.__c || k, d)),
                    null != k
                        ? (null == g && (g = k),
                          'function' == typeof d.type && d.__k === y.__k ? (d.__d = e = A(d, e, n)) : (e = C(n, d, y, w, k, e)),
                          'function' == typeof u.type && (u.__d = e))
                        : e && y.__e == e && e.parentNode != n && (e = b$1(y));
            }
        for (u.__e = g, h = x; h--; )
            null != w[h] && ('function' == typeof u.type && null != w[h].__e && w[h].__e == u.__d && (u.__d = $(i).nextSibling), S(w[h], w[h]));
        if (m) for (h = 0; h < m.length; h++) O(m[h], m[++h], m[++h]);
    }
    function A(n, l, u) {
        for (var i, t = n.__k, r = 0; t && r < t.length; r++)
            (i = t[r]) && ((i.__ = n), (l = 'function' == typeof i.type ? A(i, l, u) : C(u, i, i, t, i.__e, l)));
        return l;
    }
    function P(n, l) {
        return (
            (l = l || []),
            null == n ||
                'boolean' == typeof n ||
                (Array.isArray(n)
                    ? n.some(function (n) {
                          P(n, l);
                      })
                    : l.push(n)),
            l
        );
    }
    function C(n, l, u, i, t, r) {
        var o, f, e;
        if (void 0 !== l.__d) (o = l.__d), (l.__d = void 0);
        else if (null == u || t != r || null == t.parentNode)
            n: if (null == r || r.parentNode !== n) n.appendChild(t), (o = null);
            else {
                for (f = r, e = 0; (f = f.nextSibling) && e < i.length; e += 1) if (f == t) break n;
                n.insertBefore(t, r), (o = r);
            }
        return void 0 !== o ? o : t.nextSibling;
    }
    function $(n) {
        var l, u, i;
        if (null == n.type || 'string' == typeof n.type) return n.__e;
        if (n.__k) for (l = n.__k.length - 1; l >= 0; l--) if ((u = n.__k[l]) && (i = $(u))) return i;
        return null;
    }
    function H(n, l, u, i, t) {
        var r;
        for (r in u) 'children' === r || 'key' === r || r in l || T$1(n, r, null, u[r], i);
        for (r in l)
            (t && 'function' != typeof l[r]) ||
                'children' === r ||
                'key' === r ||
                'value' === r ||
                'checked' === r ||
                u[r] === l[r] ||
                T$1(n, r, l[r], u[r], i);
    }
    function I(n, l, u) {
        '-' === l[0] ? n.setProperty(l, null == u ? '' : u) : (n[l] = null == u ? '' : 'number' != typeof u || a$1.test(l) ? u : u + 'px');
    }
    function T$1(n, l, u, i, t) {
        var r;
        n: if ('style' === l)
            if ('string' == typeof u) n.style.cssText = u;
            else {
                if (('string' == typeof i && (n.style.cssText = i = ''), i)) for (l in i) (u && l in u) || I(n.style, l, '');
                if (u) for (l in u) (i && u[l] === i[l]) || I(n.style, l, u[l]);
            }
        else if ('o' === l[0] && 'n' === l[1])
            (r = l !== (l = l.replace(/Capture$/, ''))),
                (l = l.toLowerCase() in n ? l.toLowerCase().slice(2) : l.slice(2)),
                n.l || (n.l = {}),
                (n.l[l + r] = u),
                u ? i || n.addEventListener(l, r ? z$1 : j$1, r) : n.removeEventListener(l, r ? z$1 : j$1, r);
        else if ('dangerouslySetInnerHTML' !== l) {
            if (t) l = l.replace(/xlink(H|:h)/, 'h').replace(/sName$/, 's');
            else if (
                'width' !== l &&
                'height' !== l &&
                'href' !== l &&
                'list' !== l &&
                'form' !== l &&
                'tabIndex' !== l &&
                'download' !== l &&
                l in n
            )
                try {
                    n[l] = null == u ? '' : u;
                    break n;
                } catch (n) {}
            'function' == typeof u || (null == u || (!1 === u && '-' !== l[4]) ? n.removeAttribute(l) : n.setAttribute(l, u));
        }
    }
    function j$1(n) {
        return this.l[n.type + !1](l$1.event ? l$1.event(n) : n);
    }
    function z$1(n) {
        return this.l[n.type + !0](l$1.event ? l$1.event(n) : n);
    }
    function L(n, u, i, t, r, o, f, e, c) {
        var s,
            a,
            v,
            y,
            p,
            d,
            b,
            g,
            m,
            w,
            A,
            P,
            C,
            $,
            H,
            I = u.type;
        if (void 0 !== u.constructor) return null;
        null != i.__h && ((c = i.__h), (e = u.__e = i.__e), (u.__h = null), (o = [e])), (s = l$1.__b) && s(u);
        try {
            n: if ('function' == typeof I) {
                if (
                    ((g = u.props),
                    (m = (s = I.contextType) && t[s.__c]),
                    (w = s ? (m ? m.props.value : s.__) : t),
                    i.__c
                        ? (b = (a = u.__c = i.__c).__ = a.__E)
                        : ('prototype' in I && I.prototype.render
                              ? (u.__c = a = new I(g, w))
                              : ((u.__c = a = new k$1(g, w)), (a.constructor = I), (a.render = q$1)),
                          m && m.sub(a),
                          (a.props = g),
                          a.state || (a.state = {}),
                          (a.context = w),
                          (a.__n = t),
                          (v = a.__d = !0),
                          (a.__h = []),
                          (a._sb = [])),
                    null == a.__s && (a.__s = a.state),
                    null != I.getDerivedStateFromProps &&
                        (a.__s == a.state && (a.__s = h$1({}, a.__s)), h$1(a.__s, I.getDerivedStateFromProps(g, a.__s))),
                    (y = a.props),
                    (p = a.state),
                    (a.__v = u),
                    v)
                )
                    null == I.getDerivedStateFromProps && null != a.componentWillMount && a.componentWillMount(),
                        null != a.componentDidMount && a.__h.push(a.componentDidMount);
                else {
                    if (
                        (null == I.getDerivedStateFromProps && g !== y && null != a.componentWillReceiveProps && a.componentWillReceiveProps(g, w),
                        (!a.__e && null != a.shouldComponentUpdate && !1 === a.shouldComponentUpdate(g, a.__s, w)) || u.__v === i.__v)
                    ) {
                        for (
                            u.__v !== i.__v && ((a.props = g), (a.state = a.__s), (a.__d = !1)),
                                a.__e = !1,
                                u.__e = i.__e,
                                u.__k = i.__k,
                                u.__k.forEach(function (n) {
                                    n && (n.__ = u);
                                }),
                                A = 0;
                            A < a._sb.length;
                            A++
                        )
                            a.__h.push(a._sb[A]);
                        (a._sb = []), a.__h.length && f.push(a);
                        break n;
                    }
                    null != a.componentWillUpdate && a.componentWillUpdate(g, a.__s, w),
                        null != a.componentDidUpdate &&
                            a.__h.push(function () {
                                a.componentDidUpdate(y, p, d);
                            });
                }
                if (((a.context = w), (a.props = g), (a.__P = n), (P = l$1.__r), (C = 0), 'prototype' in I && I.prototype.render)) {
                    for (a.state = a.__s, a.__d = !1, P && P(u), s = a.render(a.props, a.state, a.context), $ = 0; $ < a._sb.length; $++)
                        a.__h.push(a._sb[$]);
                    a._sb = [];
                } else
                    do {
                        (a.__d = !1), P && P(u), (s = a.render(a.props, a.state, a.context)), (a.state = a.__s);
                    } while (a.__d && ++C < 25);
                (a.state = a.__s),
                    null != a.getChildContext && (t = h$1(h$1({}, t), a.getChildContext())),
                    v || null == a.getSnapshotBeforeUpdate || (d = a.getSnapshotBeforeUpdate(y, p)),
                    (H = null != s && s.type === _$1 && null == s.key ? s.props.children : s),
                    x(n, Array.isArray(H) ? H : [H], u, i, t, r, o, f, e, c),
                    (a.base = u.__e),
                    (u.__h = null),
                    a.__h.length && f.push(a),
                    b && (a.__E = a.__ = null),
                    (a.__e = !1);
            } else null == o && u.__v === i.__v ? ((u.__k = i.__k), (u.__e = i.__e)) : (u.__e = N(i.__e, u, i, t, r, o, f, c));
            (s = l$1.diffed) && s(u);
        } catch (n) {
            (u.__v = null), (c || null != o) && ((u.__e = e), (u.__h = !!c), (o[o.indexOf(e)] = null)), l$1.__e(n, u, i);
        }
    }
    function M(n, u) {
        l$1.__c && l$1.__c(u, n),
            n.some(function (u) {
                try {
                    (n = u.__h),
                        (u.__h = []),
                        n.some(function (n) {
                            n.call(u);
                        });
                } catch (n) {
                    l$1.__e(n, u.__v);
                }
            });
    }
    function N(l, u, i, t, r, o, f, e) {
        var s,
            a,
            h,
            y = i.props,
            p = u.props,
            d = u.type,
            _ = 0;
        if (('svg' === d && (r = !0), null != o))
            for (; _ < o.length; _++)
                if ((s = o[_]) && 'setAttribute' in s == !!d && (d ? s.localName === d : 3 === s.nodeType)) {
                    (l = s), (o[_] = null);
                    break;
                }
        if (null == l) {
            if (null === d) return document.createTextNode(p);
            (l = r ? document.createElementNS('http://www.w3.org/2000/svg', d) : document.createElement(d, p.is && p)), (o = null), (e = !1);
        }
        if (null === d) y === p || (e && l.data === p) || (l.data = p);
        else {
            if (((o = o && n.call(l.childNodes)), (a = (y = i.props || c$1).dangerouslySetInnerHTML), (h = p.dangerouslySetInnerHTML), !e)) {
                if (null != o) for (y = {}, _ = 0; _ < l.attributes.length; _++) y[l.attributes[_].name] = l.attributes[_].value;
                (h || a) && ((h && ((a && h.__html == a.__html) || h.__html === l.innerHTML)) || (l.innerHTML = (h && h.__html) || ''));
            }
            if ((H(l, p, y, r, e), h)) u.__k = [];
            else if (
                ((_ = u.props.children),
                x(l, Array.isArray(_) ? _ : [_], u, i, t, r && 'foreignObject' !== d, o, f, o ? o[0] : i.__k && b$1(i, 0), e),
                null != o)
            )
                for (_ = o.length; _--; ) null != o[_] && v$1(o[_]);
            e ||
                ('value' in p &&
                    void 0 !== (_ = p.value) &&
                    (_ !== l.value || ('progress' === d && !_) || ('option' === d && _ !== y.value)) &&
                    T$1(l, 'value', _, y.value, !1),
                'checked' in p && void 0 !== (_ = p.checked) && _ !== l.checked && T$1(l, 'checked', _, y.checked, !1));
        }
        return l;
    }
    function O(n, u, i) {
        try {
            'function' == typeof n ? n(u) : (n.current = u);
        } catch (n) {
            l$1.__e(n, i);
        }
    }
    function S(n, u, i) {
        var t, r;
        if ((l$1.unmount && l$1.unmount(n), (t = n.ref) && ((t.current && t.current !== n.__e) || O(t, null, u)), null != (t = n.__c))) {
            if (t.componentWillUnmount)
                try {
                    t.componentWillUnmount();
                } catch (n) {
                    l$1.__e(n, u);
                }
            (t.base = t.__P = null), (n.__c = void 0);
        }
        if ((t = n.__k)) for (r = 0; r < t.length; r++) t[r] && S(t[r], u, i || 'function' != typeof n.type);
        i || null == n.__e || v$1(n.__e), (n.__ = n.__e = n.__d = void 0);
    }
    function q$1(n, l, u) {
        return this.constructor(n, u);
    }
    function B$1(u, i, t) {
        var r, o, f;
        l$1.__ && l$1.__(u, i),
            (o = (r = 'function' == typeof t) ? null : (t && t.__k) || i.__k),
            (f = []),
            L(
                i,
                (u = ((!r && t) || i).__k = y$1(_$1, null, [u])),
                o || c$1,
                c$1,
                void 0 !== i.ownerSVGElement,
                !r && t ? [t] : o ? null : i.firstChild ? n.call(i.childNodes) : null,
                f,
                !r && t ? t : o ? o.__e : i.firstChild,
                r
            ),
            M(f, u);
    }
    function E(l, u, i) {
        var t,
            r,
            o,
            f = h$1({}, l.props);
        for (o in u) 'key' == o ? (t = u[o]) : 'ref' == o ? (r = u[o]) : (f[o] = u[o]);
        return arguments.length > 2 && (f.children = arguments.length > 3 ? n.call(arguments, 2) : i), p$1(l.type, f, t || l.key, r || l.ref, null);
    }
    function F$1(n, l) {
        var u = {
            __c: (l = '__cC' + e$1++),
            __: n,
            Consumer: function (n, l) {
                return n.children(l);
            },
            Provider: function (n) {
                var u, i;
                return (
                    this.getChildContext ||
                        ((u = []),
                        ((i = {})[l] = this),
                        (this.getChildContext = function () {
                            return i;
                        }),
                        (this.shouldComponentUpdate = function (n) {
                            this.props.value !== n.value &&
                                u.some(function (n) {
                                    (n.__e = !0), m$1(n);
                                });
                        }),
                        (this.sub = function (n) {
                            u.push(n);
                            var l = n.componentWillUnmount;
                            n.componentWillUnmount = function () {
                                u.splice(u.indexOf(n), 1), l && l.call(n);
                            };
                        })),
                    n.children
                );
            }
        };
        return (u.Provider.__ = u.Consumer.contextType = u);
    }
    (n = s$1.slice),
        (l$1 = {
            __e: function (n, l, u, i) {
                for (var t, r, o; (l = l.__); )
                    if ((t = l.__c) && !t.__)
                        try {
                            if (
                                ((r = t.constructor) &&
                                    null != r.getDerivedStateFromError &&
                                    (t.setState(r.getDerivedStateFromError(n)), (o = t.__d)),
                                null != t.componentDidCatch && (t.componentDidCatch(n, i || {}), (o = t.__d)),
                                o)
                            )
                                return (t.__E = t);
                        } catch (l) {
                            n = l;
                        }
                throw n;
            }
        }),
        (u$1 = 0),
        (k$1.prototype.setState = function (n, l) {
            var u;
            (u = null != this.__s && this.__s !== this.state ? this.__s : (this.__s = h$1({}, this.state))),
                'function' == typeof n && (n = n(h$1({}, u), this.props)),
                n && h$1(u, n),
                null != n && this.__v && (l && this._sb.push(l), m$1(this));
        }),
        (k$1.prototype.forceUpdate = function (n) {
            this.__v && ((this.__e = !0), n && this.__h.push(n), m$1(this));
        }),
        (k$1.prototype.render = _$1),
        (t$1 = []),
        (o$1 = 'function' == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout),
        (f$1 = function (n, l) {
            return n.__v.__b - l.__v.__b;
        }),
        (w$1.__r = 0),
        (e$1 = 0);

    /**
 * returns the indicated property of an object, if it exists.
 *
 * @param object - The object to query
 * @param path - The property name or path to the property
 * @returns The value at `obj[p]`.

 * @example
 * ```
 *   getProp({x: 100}, 'x'); //=> 100
 *   getProp({}, 'x'); //=> undefined
 * ```
 */ const getProp = (object, path) => {
        const splitPath = path.split('.');
        const reducer = (xs, x) => (xs && xs[x] ? xs[x] : undefined);
        return splitPath.reduce(reducer, object);
    };

    class EventEmitter {
        events = {};
        on = (eventName, fn) => {
            this.events[eventName] = this.events[eventName] || [];
            this.events[eventName].push(fn);
        };
        off = (eventName, fn) => {
            if (this.events[eventName]) {
                this.events[eventName] = this.events[eventName].reduce((acc, cur) => {
                    if (cur !== fn) acc.push(cur);
                    return acc;
                }, []);
            }
        };
        emit = (eventName, data) => {
            if (this.events[eventName]) {
                this.events[eventName].forEach(fn => {
                    fn(data);
                });
            }
        };
    }

    /* eslint-disable */ function uuidv4() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
            let r = (Math.random() * 16) | 0,
                v = c == 'x' ? r : (r & 0x3) | 0x8;
            return v.toString(16);
        });
    } /* eslint-enable */

    class AdyenCheckoutError extends Error {
        static errorTypes = {
            /** Network error. */ NETWORK_ERROR: 'NETWORK_ERROR',
            /** Shopper canceled the current transaction. */ CANCEL: 'CANCEL',
            /** Implementation error. The method or parameter are incorrect or are not supported. */ IMPLEMENTATION_ERROR: 'IMPLEMENTATION_ERROR',
            /** Generic error. */ ERROR: 'ERROR'
        };
        cause;
        constructor(type, message, options) {
            super(message);
            this.name = AdyenCheckoutError.errorTypes[type];
            this.cause = options?.cause;
        }
    }

    class BaseElement {
        _id = `${this.constructor['type']}-${uuidv4()}`;
        props;
        state = {};
        static defaultProps = {};
        _node = null;
        _component;
        eventEmitter = new EventEmitter();
        core;
        resources;
        constructor(props) {
            this.core = props.core;
            // Check for some expected methods on checkoutRef. Would like to use "if(!checkoutRef instanceof Core)" but that creates circular dependencies in the build process
            // if (!hasOwnProperty(checkoutRef, 'createFromAction') || !hasOwnProperty(checkoutRef, 'update')) {
            if (!this.core) {
                throw new AdyenCheckoutError(
                    'IMPLEMENTATION_ERROR',
                    `Trying to initialise the component '${this.constructor['type']}' without a reference to an instance of Checkout ('core' prop)`
                );
            }
            this.buildElementProps(props);
        }
        buildElementProps(componentProps) {
            const { core, ...rest } = componentProps;
            this.props = this.formatProps({
                ...this.constructor['defaultProps'],
                ...rest
            });
        }
        /**
         * Executed during creation of any payment element.
         * Gives a chance to any paymentMethod to format the props we're receiving.
         */ formatProps(props) {
            return props;
        }
        /**
         * Executed on the `data` getter.
         * Returns the component data necessary for the /payments request
         *
         * TODO: Replace 'any' by type PaymentMethodData<T> - this change requires updating all payment methods,
         *       properly adding the type of the formatData function
         */ formatData() {
            return {};
        }
        setState(newState) {
            this.state = {
                ...this.state,
                ...newState
            };
        }
        /**
         * Returns the component payment data ready to submit to the Checkout API
         * Note: this does not ensure validity, check isValid first
         */ get data() {
            const clientData = getProp(this.props, 'modules.risk.data');
            const checkoutAttemptId = getProp(this.props, 'modules.analytics.checkoutAttemptId');
            const order = this.state.order || this.props.order;
            const componentData = this.formatData();
            if (componentData.paymentMethod && checkoutAttemptId) {
                componentData.paymentMethod.checkoutAttemptId = checkoutAttemptId;
            }
            return {
                ...(clientData && {
                    riskData: {
                        clientData
                    }
                }),
                ...(order && {
                    order: {
                        orderData: order.orderData,
                        pspReference: order.pspReference
                    }
                }),
                ...componentData,
                clientStateDataIndicator: true
            };
        }
        render() {
            // render() not implemented in the element
            throw new Error('Payment method cannot be rendered.');
        }
        /**
         * Mounts an element into the dom
         * @param domNode - Node (or selector) where we will mount the payment element
         * @returns this - the payment element instance we mounted
         */ mount(domNode) {
            const node = typeof domNode === 'string' ? document.querySelector(domNode) : domNode;
            if (!node) {
                throw new Error('Component could not mount. Root node was not found.');
            }
            if (this._node) {
                this.unmount(); // new, if this._node exists then we are "remounting" so we first need to unmount if it's not already been done
            } else {
                // Set up analytics, once
                if (this.props.modules && this.props.modules.analytics && !this.props.isDropin) {
                    this.props.modules.analytics.send({
                        containerWidth: this._node && this._node.offsetWidth,
                        component: this.constructor['analyticsType'] ?? this.constructor['type'],
                        flavor: 'components'
                    });
                }
            }
            this._node = node;
            this._component = this.render();
            B$1(this._component, node);
            return this;
        }
        /**
         * Updates props, resets the internal state and remounts the element.
         * @param props - props to update
         * @returns this - the element instance
         */ update(props) {
            this.buildElementProps({
                ...this.props,
                ...props
            });
            this.state = {};
            return this.unmount().mount(this._node); // for new mount fny
        }
        /**
         * Unmounts an element and mounts it again on the same node i.e. allows mount w/o having to pass a node.
         * Should be "private" & undocumented (although being a public function is useful for testing).
         * Left in for legacy reasons
         */ remount(component) {
            if (!this._node) {
                throw new Error('Component is not mounted.');
            }
            const newComponent = component || this.render();
            B$1(newComponent, this._node, null);
            return this;
        }
        /**
         * Unmounts a payment element from the DOM
         */ unmount() {
            if (this._node) {
                B$1(null, this._node);
            }
            return this;
        }
        /**
         * Unmounts an element and removes it from the parent instance
         * For "destroy" type cleanup - when you don't intend to use the component again
         */ remove() {
            this.unmount();
            if (this.core) {
                this.core.remove(this);
            }
        }
    }

    function getDefaultExportFromCjs(x) {
        return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    var classnames = { exports: {} };

    /*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/

    (function (module) {
        /* global define */

        (function () {
            var hasOwn = {}.hasOwnProperty;

            function classNames() {
                var classes = [];

                for (var i = 0; i < arguments.length; i++) {
                    var arg = arguments[i];
                    if (!arg) continue;

                    var argType = typeof arg;

                    if (argType === 'string' || argType === 'number') {
                        classes.push(arg);
                    } else if (Array.isArray(arg)) {
                        if (arg.length) {
                            var inner = classNames.apply(null, arg);
                            if (inner) {
                                classes.push(inner);
                            }
                        }
                    } else if (argType === 'object') {
                        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
                            classes.push(arg.toString());
                            continue;
                        }

                        for (var key in arg) {
                            if (hasOwn.call(arg, key) && arg[key]) {
                                classes.push(key);
                            }
                        }
                    }
                }

                return classes.join(' ');
            }

            if (module.exports) {
                classNames.default = classNames;
                module.exports = classNames;
            } else {
                window.classNames = classNames;
            }
        })();
    })(classnames);

    var classnamesExports = classnames.exports;
    var classNames = /*@__PURE__*/ getDefaultExportFromCjs(classnamesExports);

    /**
     * Default Loading Spinner
     * @param props -
     */ const Spinner = ({ inline = false, size = 'large' }) =>
        /*#__PURE__*/ y$1(
            'div',
            {
                'data-testid': 'spinner',
                className: `adyen-checkout__spinner__wrapper ${inline ? 'adyen-checkout__spinner__wrapper--inline' : ''}`
            },
            /*#__PURE__*/ y$1('div', {
                className: `adyen-checkout__spinner adyen-checkout__spinner--${size}`
            })
        );

    var t,
        r,
        u,
        i,
        o = 0,
        f = [],
        c = [],
        e = l$1.__b,
        a = l$1.__r,
        v = l$1.diffed,
        l = l$1.__c,
        m = l$1.unmount;
    function d(t, u) {
        l$1.__h && l$1.__h(r, t, o || u), (o = 0);
        var i = r.__H || (r.__H = { __: [], __h: [] });
        return t >= i.__.length && i.__.push({ __V: c }), i.__[t];
    }
    function h(n) {
        return (o = 1), s(B, n);
    }
    function s(n, u, i) {
        var o = d(t++, 2);
        if (
            ((o.t = n),
            !o.__c &&
                ((o.__ = [
                    i ? i(u) : B(void 0, u),
                    function (n) {
                        var t = o.__N ? o.__N[0] : o.__[0],
                            r = o.t(t, n);
                        t !== r && ((o.__N = [r, o.__[1]]), o.__c.setState({}));
                    }
                ]),
                (o.__c = r),
                !r.u))
        ) {
            var f = function (n, t, r) {
                if (!o.__c.__H) return !0;
                var u = o.__c.__H.__.filter(function (n) {
                    return n.__c;
                });
                if (
                    u.every(function (n) {
                        return !n.__N;
                    })
                )
                    return !c || c.call(this, n, t, r);
                var i = !1;
                return (
                    u.forEach(function (n) {
                        if (n.__N) {
                            var t = n.__[0];
                            (n.__ = n.__N), (n.__N = void 0), t !== n.__[0] && (i = !0);
                        }
                    }),
                    !(!i && o.__c.props === n) && (!c || c.call(this, n, t, r))
                );
            };
            r.u = !0;
            var c = r.shouldComponentUpdate,
                e = r.componentWillUpdate;
            (r.componentWillUpdate = function (n, t, r) {
                if (this.__e) {
                    var u = c;
                    (c = void 0), f(n, t, r), (c = u);
                }
                e && e.call(this, n, t, r);
            }),
                (r.shouldComponentUpdate = f);
        }
        return o.__N || o.__;
    }
    function p(u, i) {
        var o = d(t++, 3);
        !l$1.__s && z(o.__H, i) && ((o.__ = u), (o.i = i), r.__H.__h.push(o));
    }
    function y(u, i) {
        var o = d(t++, 4);
        !l$1.__s && z(o.__H, i) && ((o.__ = u), (o.i = i), r.__h.push(o));
    }
    function _(n) {
        return (
            (o = 5),
            F(function () {
                return { current: n };
            }, [])
        );
    }
    function F(n, r) {
        var u = d(t++, 7);
        return z(u.__H, r) ? ((u.__V = n()), (u.i = r), (u.__h = n), u.__V) : u.__;
    }
    function T(n, t) {
        return (
            (o = 8),
            F(function () {
                return n;
            }, t)
        );
    }
    function q(n) {
        var u = r.context[n.__c],
            i = d(t++, 9);
        return (i.c = n), u ? (null == i.__ && ((i.__ = !0), u.sub(r)), u.props.value) : n.__;
    }
    function b() {
        for (var t; (t = f.shift()); )
            if (t.__P && t.__H)
                try {
                    t.__H.__h.forEach(k), t.__H.__h.forEach(w), (t.__H.__h = []);
                } catch (r) {
                    (t.__H.__h = []), l$1.__e(r, t.__v);
                }
    }
    (l$1.__b = function (n) {
        (r = null), e && e(n);
    }),
        (l$1.__r = function (n) {
            a && a(n), (t = 0);
            var i = (r = n.__c).__H;
            i &&
                (u === r
                    ? ((i.__h = []),
                      (r.__h = []),
                      i.__.forEach(function (n) {
                          n.__N && (n.__ = n.__N), (n.__V = c), (n.__N = n.i = void 0);
                      }))
                    : (i.__h.forEach(k), i.__h.forEach(w), (i.__h = []))),
                (u = r);
        }),
        (l$1.diffed = function (t) {
            v && v(t);
            var o = t.__c;
            o &&
                o.__H &&
                (o.__H.__h.length && ((1 !== f.push(o) && i === l$1.requestAnimationFrame) || ((i = l$1.requestAnimationFrame) || j)(b)),
                o.__H.__.forEach(function (n) {
                    n.i && (n.__H = n.i), n.__V !== c && (n.__ = n.__V), (n.i = void 0), (n.__V = c);
                })),
                (u = r = null);
        }),
        (l$1.__c = function (t, r) {
            r.some(function (t) {
                try {
                    t.__h.forEach(k),
                        (t.__h = t.__h.filter(function (n) {
                            return !n.__ || w(n);
                        }));
                } catch (u) {
                    r.some(function (n) {
                        n.__h && (n.__h = []);
                    }),
                        (r = []),
                        l$1.__e(u, t.__v);
                }
            }),
                l && l(t, r);
        }),
        (l$1.unmount = function (t) {
            m && m(t);
            var r,
                u = t.__c;
            u &&
                u.__H &&
                (u.__H.__.forEach(function (n) {
                    try {
                        k(n);
                    } catch (n) {
                        r = n;
                    }
                }),
                (u.__H = void 0),
                r && l$1.__e(r, u.__v));
        });
    var g$1 = 'function' == typeof requestAnimationFrame;
    function j(n) {
        var t,
            r = function () {
                clearTimeout(u), g$1 && cancelAnimationFrame(t), setTimeout(n);
            },
            u = setTimeout(r, 100);
        g$1 && (t = requestAnimationFrame(r));
    }
    function k(n) {
        var t = r,
            u = n.__c;
        'function' == typeof u && ((n.__c = void 0), u()), (r = t);
    }
    function w(n) {
        var t = r;
        (n.__c = n.__()), (r = t);
    }
    function z(n, t) {
        return (
            !n ||
            n.length !== t.length ||
            t.some(function (t, r) {
                return t !== n[r];
            })
        );
    }
    function B(n, t) {
        return 'function' == typeof t ? t(n) : t;
    }

    var defaultTrans = {
        payButton: 'Pay',
        'payButton.redirecting': 'Redirecting...',
        'payButton.with': 'Pay %{value} with %{maskedData}',
        close: 'Close',
        storeDetails: 'Save for my next payment',
        'creditCard.holderName': 'Name on card',
        'creditCard.holderName.placeholder': 'J. Smith',
        'creditCard.holderName.invalid': 'Enter name as shown on card',
        'creditCard.numberField.title': 'Card number',
        'creditCard.numberField.placeholder': '1234 5678 9012 3456',
        'creditCard.expiryDateField.title': 'Expiry date',
        'creditCard.expiryDateField.placeholder': 'MM/YY',
        'creditCard.expiryDateField.month': 'Month',
        'creditCard.expiryDateField.month.placeholder': 'MM',
        'creditCard.expiryDateField.year.placeholder': 'YY',
        'creditCard.expiryDateField.year': 'Year',
        'creditCard.cvcField.title': 'Security code',
        'creditCard.cvcField.placeholder': '123',
        'creditCard.storeDetailsButton': 'Remember for next time',
        'creditCard.cvcField.placeholder.4digits': '4 digits',
        'creditCard.cvcField.placeholder.3digits': '3 digits',
        'creditCard.taxNumber.placeholder': 'YYMMDD / 0123456789',
        installments: 'Number of installments',
        installmentOption: '%{times}x %{partialValue}',
        installmentOptionMonths: '%{times} months',
        'installments.oneTime': 'One time payment',
        'installments.installments': 'Installments payment',
        'installments.revolving': 'Revolving payment',
        'sepaDirectDebit.ibanField.invalid': 'Invalid account number',
        'sepaDirectDebit.nameField.placeholder': 'J. Smith',
        'sepa.ownerName': 'Holder Name',
        'sepa.ibanNumber': 'Account Number (IBAN)',
        'error.title': 'Error',
        'error.subtitle.redirect': 'Redirect failed',
        'error.subtitle.payment': 'Payment failed',
        'error.subtitle.refused': 'Payment refused',
        'error.message.unknown': 'An unknown error occurred',
        'errorPanel.title': 'Existing errors',
        'idealIssuer.selectField.title': 'Bank',
        'idealIssuer.selectField.placeholder': 'Select your bank',
        'creditCard.success': 'Payment Successful',
        loading: 'Loading…',
        continue: 'Continue',
        continueTo: 'Continue to',
        'wechatpay.timetopay': 'You have %@ to pay',
        'sr.wechatpay.timetopay': 'You have %#minutes%# %#seconds%# to pay',
        'wechatpay.scanqrcode': 'Scan QR code',
        personalDetails: 'Personal details',
        companyDetails: 'Company details',
        'companyDetails.name': 'Company name',
        'companyDetails.name.invalid': 'Enter the company name',
        'companyDetails.registrationNumber': 'Registration number',
        'companyDetails.registrationNumber.invalid': 'Enter the registration number',
        'consent.checkbox.invalid': 'You must agree with the terms & conditions',
        socialSecurityNumber: 'Social security number',
        firstName: 'First name',
        'firstName.invalid': 'Enter your first name',
        infix: 'Prefix',
        lastName: 'Last name',
        'lastName.invalid': 'Enter your last name',
        mobileNumber: 'Mobile number',
        'mobileNumber.invalid': 'Invalid mobile number',
        city: 'City',
        postalCode: 'Postal code',
        'postalCode.optional': 'Postal code (optional)',
        countryCode: 'Country Code',
        telephoneNumber: 'Telephone number',
        dateOfBirth: 'Date of birth',
        shopperEmail: 'Email address',
        gender: 'Gender',
        'gender.notselected': 'Select a gender',
        male: 'Male',
        female: 'Female',
        billingAddress: 'Billing address',
        street: 'Street',
        stateOrProvince: 'State or province',
        country: 'Country',
        houseNumberOrName: 'House number',
        separateDeliveryAddress: 'Specify a separate delivery address',
        deliveryAddress: 'Delivery Address',
        zipCode: 'Zip code',
        apartmentSuite: 'Apartment / Suite',
        provinceOrTerritory: 'Province or Territory',
        cityTown: 'City / Town',
        address: 'Address',
        'address.placeholder': 'Find your address',
        'address.errors.incomplete': 'Enter an address to continue',
        'address.enterManually': '+ Enter address manually',
        state: 'State',
        'field.title.optional': '(optional)',
        'creditCard.cvcField.title.optional': 'Security code (optional)',
        'issuerList.wallet.placeholder': 'Select your wallet',
        privacyPolicy: 'Privacy policy',
        'afterPay.agreement': 'I agree with the %@ of AfterPay',
        paymentConditions: 'payment conditions',
        openApp: 'Open the app',
        'voucher.readInstructions': 'Read instructions',
        'voucher.introduction': 'Thank you for your purchase, please use the following coupon to complete your payment.',
        'voucher.expirationDate': 'Expiration Date',
        'voucher.alternativeReference': 'Alternative Reference',
        'dragonpay.voucher.non.bank.selectField.placeholder': 'Select your provider',
        'dragonpay.voucher.bank.selectField.placeholder': 'Select your bank',
        'voucher.paymentReferenceLabel': 'Payment Reference',
        'voucher.surcharge': 'Incl. %@ surcharge',
        'voucher.introduction.doku': 'Thank you for your purchase, please use the following information to complete your payment.',
        'voucher.shopperName': 'Shopper Name',
        'voucher.merchantName': 'Merchant',
        'voucher.introduction.econtext': 'Thank you for your purchase, please use the following information to complete your payment.',
        'voucher.telephoneNumber': 'Phone Number',
        'voucher.shopperReference': 'Shopper Reference',
        'voucher.collectionInstitutionNumber': 'Collection Institution Number',
        'voucher.econtext.telephoneNumber.invalid': 'Telephone number must be 10 or 11 digits long',
        'boletobancario.btnLabel': 'Generate Boleto',
        'boleto.sendCopyToEmail': 'Send a copy to my email',
        'button.copy': 'Copy',
        'button.download': 'Download',
        'boleto.socialSecurityNumber': 'CPF/CNPJ',
        'boleto.socialSecurityNumber.invalid': 'Field is not valid',
        'creditCard.storedCard.description.ariaLabel': 'Stored card ends in %@',
        'voucher.entity': 'Entity',
        donateButton: 'Donate',
        notNowButton: 'Not now',
        thanksForYourSupport: 'Thanks for your support!',
        preauthorizeWith: 'Preauthorize with',
        confirmPreauthorization: 'Confirm preauthorization',
        confirmPurchase: 'Confirm purchase',
        applyGiftcard: 'Redeem',
        giftcardBalance: 'Gift card balance',
        deductedBalance: 'Deducted balance',
        'creditCard.pin.title': 'Pin',
        'creditCard.encryptedPassword.label': 'First 2 digits of card password',
        'creditCard.encryptedPassword.placeholder': '12',
        'creditCard.encryptedPassword.invalid': 'Invalid password',
        'creditCard.taxNumber': 'Cardholder birthdate or Corporate registration number',
        'creditCard.taxNumber.label': 'Cardholder birthdate (YYMMDD) or Corporate registration number (10 digits)',
        'creditCard.taxNumber.labelAlt': 'Corporate registration number (10 digits)',
        'creditCard.taxNumber.invalid': 'Invalid Cardholder birthdate or Corporate registration number',
        'storedPaymentMethod.disable.button': 'Remove',
        'storedPaymentMethod.disable.confirmation': 'Remove stored payment method',
        'storedPaymentMethod.disable.confirmButton': 'Yes, remove',
        'storedPaymentMethod.disable.cancelButton': 'Cancel',
        'ach.bankAccount': 'Bank account',
        'ach.accountHolderNameField.title': 'Account holder name',
        'ach.accountHolderNameField.placeholder': 'J. Smith',
        'ach.accountHolderNameField.invalid': 'Invalid account holder name',
        'ach.accountNumberField.title': 'Account number',
        'ach.accountNumberField.invalid': 'Invalid account number',
        'ach.accountLocationField.title': 'ABA routing number',
        'ach.accountLocationField.invalid': 'Invalid ABA routing number',
        'ach.savedBankAccount': 'Saved bank account',
        'select.state': 'Select state',
        'select.stateOrProvince': 'Select state or province',
        'select.provinceOrTerritory': 'Select province or territory',
        'select.country': 'Select country',
        'select.noOptionsFound': 'No options found',
        'select.filter.placeholder': 'Search...',
        'telephoneNumber.invalid': 'Invalid telephone number',
        qrCodeOrApp: 'or',
        'paypal.processingPayment': 'Processing payment...',
        generateQRCode: 'Generate QR code',
        'await.waitForConfirmation': 'Waiting for confirmation',
        'mbway.confirmPayment': 'Confirm your payment on the MB WAY app',
        'shopperEmail.invalid': 'Invalid email address',
        'dateOfBirth.format': 'DD/MM/YYYY',
        'dateOfBirth.invalid': 'You must be at least 18 years old',
        'blik.confirmPayment': 'Open your banking app to confirm the payment.',
        'blik.invalid': 'Enter 6 numbers',
        'blik.code': '6-digit code',
        'blik.help': 'Get the code from your banking app.',
        'swish.pendingMessage':
            'After you scan, the status can be pending for up to 10 minutes. Attempting to pay again within this time may result in multiple charges.',
        'field.valid': 'Field valid',
        'field.invalid': 'Field not valid',
        'error.va.gen.01': 'Incomplete field',
        'error.va.gen.02': 'Field not valid',
        'error.va.sf-cc-num.01': 'Enter a valid card number',
        'error.va.sf-cc-num.02': 'Enter the card number',
        'error.va.sf-cc-num.03': 'Enter a supported card brand',
        'error.va.sf-cc-num.04': 'Enter the complete card number',
        'error.va.sf-cc-dat.01': 'Enter a valid expiry date',
        'error.va.sf-cc-dat.02': 'Enter a valid expiry date',
        'error.va.sf-cc-dat.03': 'Credit card about to expire',
        'error.va.sf-cc-dat.04': 'Enter the expiry date',
        'error.va.sf-cc-dat.05': 'Enter the complete expiry date',
        'error.va.sf-cc-mth.01': 'Enter the expiry month',
        'error.va.sf-cc-yr.01': 'Enter the expiry year',
        'error.va.sf-cc-yr.02': 'Enter the complete expiry year',
        'error.va.sf-cc-cvc.01': 'Enter the security code',
        'error.va.sf-cc-cvc.02': 'Enter the complete security code',
        'error.va.sf-ach-num.01': 'Bank account number field is empty',
        'error.va.sf-ach-num.02': 'Bank account number is the wrong length',
        'error.va.sf-ach-loc.01': 'Bank routing number field is empty',
        'error.va.sf-ach-loc.02': 'Bank routing number is the wrong length',
        'error.va.sf-kcp-pwd.01': 'Password field is empty',
        'error.va.sf-kcp-pwd.02': 'Password is the wrong length',
        'error.giftcard.no-balance': 'This gift card has zero balance',
        'error.giftcard.card-error': 'In our records we have no gift card with this number',
        'error.giftcard.currency-error': 'Gift cards are only valid in the currency they were issued in',
        'amazonpay.signout': 'Sign out from Amazon',
        'amazonpay.changePaymentDetails': 'Change payment details',
        'partialPayment.warning': 'Select another payment method to pay the remaining',
        'partialPayment.remainingBalance': 'Remaining balance will be %{amount}',
        'bankTransfer.beneficiary': 'Beneficiary',
        'bankTransfer.iban': 'IBAN',
        'bankTransfer.bic': 'BIC',
        'bankTransfer.reference': 'Reference',
        'bankTransfer.introduction':
            'Continue to create a new bank transfer payment. You can use the details in the following screen to finalize this payment.',
        'bankTransfer.instructions': 'Thank you for your purchase, please use the following information to complete your payment.',
        'bacs.accountHolderName': 'Bank account holder name',
        'bacs.accountHolderName.invalid': 'Invalid bank account holder name',
        'bacs.accountNumber': 'Bank account number',
        'bacs.accountNumber.invalid': 'Invalid bank account number',
        'bacs.bankLocationId': 'Sort code',
        'bacs.bankLocationId.invalid': 'Invalid sort code',
        'bacs.consent.amount': 'I agree that the above amount will be deducted from my bank account.',
        'bacs.consent.account':
            'I confirm the account is in my name and I am the only signatory required to authorise the Direct Debit on this account.',
        edit: 'Edit',
        'bacs.confirm': 'Confirm and pay',
        'bacs.result.introduction': 'Download your Direct Debit Instruction (DDI / Mandate)',
        'download.pdf': 'Download PDF',
        'creditCard.encryptedCardNumber.aria.iframeTitle': 'Iframe for card number',
        'creditCard.encryptedCardNumber.aria.label': 'Card number',
        'creditCard.encryptedExpiryDate.aria.iframeTitle': 'Iframe for expiry date',
        'creditCard.encryptedExpiryDate.aria.label': 'Expiry date',
        'creditCard.encryptedExpiryMonth.aria.iframeTitle': 'Iframe for expiry month',
        'creditCard.encryptedExpiryMonth.aria.label': 'Expiry month',
        'creditCard.encryptedExpiryYear.aria.iframeTitle': 'Iframe for expiry year',
        'creditCard.encryptedExpiryYear.aria.label': 'Expiry year',
        'creditCard.encryptedSecurityCode.aria.iframeTitle': 'Iframe for security code',
        'creditCard.encryptedSecurityCode.aria.label': 'Security code',
        'creditCard.encryptedPassword.aria.iframeTitle': 'Iframe for password',
        'creditCard.encryptedPassword.aria.label': 'First 2 digits of card password',
        'giftcard.encryptedCardNumber.aria.iframeTitle': 'Iframe for card number',
        'giftcard.encryptedCardNumber.aria.label': 'Card number',
        'giftcard.encryptedSecurityCode.aria.iframeTitle': 'Iframe for pin',
        'giftcard.encryptedSecurityCode.aria.label': 'Pin',
        giftcardTransactionLimit: 'Max. %{amount} allowed per transaction on this gift card',
        'ach.encryptedBankAccountNumber.aria.iframeTitle': 'Iframe for bank account number',
        'ach.encryptedBankAccountNumber.aria.label': 'Account number',
        'ach.encryptedBankLocationId.aria.iframeTitle': 'Iframe for bank routing number',
        'ach.encryptedBankLocationId.aria.label': 'ABA routing number',
        'pix.instructions': 'Open the app with the PIX registered key, choose Pay with PIX and scan the QR Code or copy and paste the code',
        'twint.saved': 'saved',
        orPayWith: 'or pay with',
        invalidFormatExpects: 'Invalid format. Expected format: %{format}',
        'upi.qrCodeWaitingMessage': 'Scan the QR code using your preferred UPI app to complete the payment',
        'upi.vpaWaitingMessage': 'Open your UPI app to confirm the payment',
        'upi.modeSelection': 'Make a selection on how you would like to use UPI.',
        'onlineBanking.termsAndConditions': 'By continuing you agree with the %#terms and conditions%#',
        'onlineBankingPL.termsAndConditions': 'By continuing you agree with the %#regulations%# and %#information obligation%# of Przelewy24',
        'ctp.loading.poweredByCtp': 'Powered by Click to Pay',
        'ctp.loading.intro': 'We are checking to see if you have any saved cards with Click to Pay...',
        'ctp.login.title': 'Continue to Click to Pay',
        'ctp.login.subtitle': 'Enter the email address that is connected to Click to Pay to continue.',
        'ctp.login.inputLabel': 'Email',
        'ctp.logout.notYou': 'Not you?',
        'ctp.logout.notYourCards': 'Not your cards?',
        'ctp.logout.notYourCard': 'Not your card?',
        'ctp.logout.notYourProfile': 'Not your profile?',
        'ctp.otp.fieldLabel': 'One time code',
        'ctp.otp.resendCode': 'Resend code',
        'ctp.otp.codeResent': 'Code resent',
        'ctp.otp.title': 'Access your Click to Pay cards',
        'ctp.otp.subtitle': 'Enter the code %@ sent to %@ to verify it‘s you.',
        'ctp.emptyProfile.message': 'No cards registered in this Click to Pay profile',
        'ctp.separatorText': 'or use',
        'ctp.cards.title': 'Complete payment with Click to Pay',
        'ctp.cards.subtitle': 'Select a card to use.',
        'ctp.cards.expiredCard': 'Expired',
        'ctp.manualCardEntry': 'Manual card entry',
        'ctp.aria.infoModalButton': 'What is Click to Pay',
        'ctp.infoPopup.title': 'Click to Pay brings the ease of contactless, online',
        'ctp.infoPopup.subtitle': 'A fast, secure payment method supported by Mastercard, Visa and other payment cards.',
        'ctp.infoPopup.benefit1': 'Click to Pay uses encryption to keep your information safe and secure',
        'ctp.infoPopup.benefit2': 'Use it with merchants worldwide',
        'ctp.infoPopup.benefit3': 'Set up once for hassle-free payments in the future',
        'ctp.errors.AUTH_INVALID': 'Authentication Invalid',
        'ctp.errors.NOT_FOUND': 'No account found, enter a valid email or continue using manual card entry',
        'ctp.errors.ID_FORMAT_UNSUPPORTED': 'Format not supported',
        'ctp.errors.FRAUD': 'The user account was locked or disabled',
        'ctp.errors.CONSUMER_ID_MISSING': 'Consumer identity is missing in the request',
        'ctp.errors.ACCT_INACCESSIBLE': 'This account is currently not available, e.g it is locked',
        'ctp.errors.CODE_INVALID': 'Incorrect verification code',
        'ctp.errors.CODE_EXPIRED': 'This code has expired',
        'ctp.errors.RETRIES_EXCEEDED': 'The limit for the number of retries for OTP generation was exceeded',
        'ctp.errors.OTP_SEND_FAILED': 'The OTP could not be sent to the recipient',
        'ctp.errors.REQUEST_TIMEOUT': 'Something went wrong, try again or use the manual card entry',
        'ctp.errors.UNKNOWN_ERROR': 'Something went wrong, try again or use the manual card entry',
        'ctp.errors.SERVICE_ERROR': 'Something went wrong, try again or use the manual card entry',
        'ctp.errors.SERVER_ERROR': 'Something went wrong, try again or use the manual card entry',
        'ctp.errors.INVALID_PARAMETER': 'Something went wrong, try again or use the manual card entry',
        'ctp.errors.AUTH_ERROR': 'Something went wrong, try again or use the manual card entry',
        'paymentMethodsList.aria.label': 'Choose a payment method'
    };

    /**
     * FALLBACK_LOCALE - **MUST** match the locale string in the above import
     */ const FALLBACK_LOCALE = 'en-US';
    const defaultTranslation = defaultTrans;

    /**
     * Convert to ISO 639-1
     */ const toTwoLetterCode = locale => locale.toLowerCase().substring(0, 2);
    /**
 * Matches a string with one of the locales
 * @param locale -
 * @param supportedLocales -

 * @example
 * matchLocale('en-GB');
 * // 'en-US'
 */ function matchLocale(locale, supportedLocales) {
        if (!locale || typeof locale !== 'string') return null;
        return supportedLocales.find(supLoc => toTwoLetterCode(supLoc) === toTwoLetterCode(locale)) || null;
    }
    /**
     * Returns a locale with the proper format
     * @param localeParam -
     *
     * @example
     * formatLocale('En_us');
     * // 'en-US'
     */ function formatLocale(localeParam) {
        const locale = localeParam.replace('_', '-');
        const format = new RegExp('([a-z]{2})([-])([A-Z]{2})');
        // If it's already formatted, return the locale
        if (format.test(locale)) return locale;
        // Split the string in two
        const [languageCode, countryCode] = locale.split('-');
        // If the locale or the country codes are missing, return null
        if (!languageCode || !countryCode) return null;
        // Ensure correct format and join the strings back together
        const fullLocale = [languageCode.toLowerCase(), countryCode.toUpperCase()].join('-');
        return fullLocale.length === 5 ? fullLocale : null;
    }
    /**
     * Checks the locale format.
     * Also checks if it's on the locales array.
     * If it is not, tries to match it with one.
     * @param locale -
     * @param supportedLocales -
     */ function parseLocale(locale, supportedLocales = []) {
        if (!locale || locale.length < 1 || locale.length > 5) return FALLBACK_LOCALE;
        const formattedLocale = formatLocale(locale);
        const hasMatch = supportedLocales.indexOf(formattedLocale) > -1;
        if (hasMatch) return formattedLocale;
        return matchLocale(formattedLocale || locale, supportedLocales);
    }
    /**
     * Formats the locales inside the customTranslations object against the supportedLocales
     * @param customTranslations -
     * @param supportedLocales -
     */ function formatCustomTranslations(customTranslations = {}, supportedLocales) {
        return Object.keys(customTranslations).reduce((acc, cur) => {
            const formattedLocale = formatLocale(cur) || parseLocale(cur, supportedLocales);
            if (formattedLocale) {
                acc[formattedLocale] = customTranslations[cur];
            }
            return acc;
        }, {});
    }
    const replaceTranslationValues = (translation, values) => {
        return translation.replace(/%{(\w+)}/g, (_, k) => values[k] || '');
    };
    /**
     * Returns a translation string by key
     * @param translations -
     * @param key -
     * @param options -
     *
     * @internal
     */ const getTranslation = (
        translations,
        key,
        options = {
            values: {},
            count: 0
        }
    ) => {
        const keyPlural = `${key}__plural`;
        const keyForCount = count => `${key}__${count}`;
        if (Object.prototype.hasOwnProperty.call(translations, keyForCount(options.count))) {
            // Find key__count translation key
            return replaceTranslationValues(translations[keyForCount(options.count)], options.values);
        } else if (Object.prototype.hasOwnProperty.call(translations, keyPlural) && options.count > 1) {
            // Find key__plural translation key, if count greater than 1 (e.g. myTranslation__plural)
            return replaceTranslationValues(translations[keyPlural], options.values);
        } else if (Object.prototype.hasOwnProperty.call(translations, key)) {
            // Find key translation key (e.g. myTranslation)
            return replaceTranslationValues(translations[key], options.values);
        }
        return null;
    };
    /**
     * Returns an Object which contains all the key/values of the translation labels
     *
     * @param locale - The locale the user wants to use
     * @param customTranslations - Custom translations provided by the merchant
     */ const loadTranslations = async (locale, customTranslations = {}) => {
        // Match locale to one of our available locales (e.g. es-AR => es-ES)
        // const localeToLoad = parseLocale(locale, Object.keys(locales)) || FALLBACK_LOCALE;
        // const loadedLocale = await locales[localeToLoad]();
        const loadedLocale = {
            default: {}
        };
        return {
            ...defaultTranslation,
            ...loadedLocale.default,
            ...(!!customTranslations[locale] && customTranslations[locale]) // Merge with their custom locales if available
        };
    };
    /**
     * Injects JSX elements in a middle of a translation and returns a JSX array
     * The input string should use %# as the token to know where to insert the component
     * @param translation - Translation string
     * @param renderFunctions - An array function that renders JSX elements
     */ const interpolateElement = (translation, renderFunctions) => {
        // splits by regex group, it guarantees that it only splits with 2 tokens (%#)
        const matches = translation.split(/%#(.*?)%#/gm);
        if (renderFunctions.length !== Math.floor(matches.length / 2)) {
            throw Error('The number of functions provided does not match the number of elements in the translation string.');
        }
        // the map will create an array of JSX / string elements, this syntax in accepted in JSX/react to render elements
        return matches.map((term, index) => {
            // math to get the index of the renderFunction that should be used
            // since we split on tokens, that means the index of the render function is half of the index of the string
            const indexInFunctionArray = Math.floor(index / 2);
            return index % 2 === 0 ? term : renderFunctions[indexInFunctionArray](term);
        });
    };

    const CURRENCY_DECIMALS = {
        // ZERO_DECIMAL_CURRENCIES
        IDR: 1,
        JPY: 1,
        KRW: 1,
        VND: 1,
        BYR: 1,
        CVE: 1,
        DJF: 1,
        GHC: 1,
        GNF: 1,
        KMF: 1,
        PYG: 1,
        RWF: 1,
        UGX: 1,
        VUV: 1,
        XAF: 1,
        XOF: 1,
        XPF: 1,
        // ONE_DECIMAL_CURRENCIES
        MRO: 10,
        // THREE_DECIMAL_CURRENCIES
        BHD: 1000,
        IQD: 1000,
        JOD: 1000,
        KWD: 1000,
        OMR: 1000,
        LYD: 1000,
        TND: 1000
    };

    /** Work around solution until chromium bug is fixed https://bugs.chromium.org/p/chromium/issues/detail?id=1381996
     * We need to hardcode minimumFractionDigits for the following currencies
     */ const currencyMinorUnitsConfig = {
        RSD: {
            minimumFractionDigits: 2
        },
        AFN: {
            minimumFractionDigits: 2
        },
        ALL: {
            minimumFractionDigits: 2
        },
        IRR: {
            minimumFractionDigits: 2
        },
        LAK: {
            minimumFractionDigits: 2
        },
        LBP: {
            minimumFractionDigits: 2
        },
        MMK: {
            minimumFractionDigits: 2
        },
        SOS: {
            minimumFractionDigits: 2
        },
        SYP: {
            minimumFractionDigits: 2
        },
        YER: {
            minimumFractionDigits: 2
        },
        IQD: {
            minimumFractionDigits: 3
        }
    };

    /**
     * @internal
     * @param currencyCode -
     * Get divider amount
     */ const getDivider = currencyCode => CURRENCY_DECIMALS[currencyCode] || 100;
    /**
     * @internal
     */ const getDecimalAmount = (amount, currencyCode) => {
        const divider = getDivider(currencyCode);
        return parseInt(String(amount), 10) / divider;
    };
    /**
     * @internal
     */ const getLocalisedAmount = (amount, locale, currencyCode, options = {}) => {
        const stringAmount = amount.toString(); // Changing amount to string to avoid 0-value from returning false
        const decimalAmount = getDecimalAmount(stringAmount, currencyCode);
        const formattedLocale = locale.replace('_', '-');
        const modifiedOptions = currencyMinorUnitsConfig[currencyCode]
            ? {
                  ...options,
                  ...currencyMinorUnitsConfig[currencyCode]
              }
            : options;
        const localeOptions = {
            style: 'currency',
            currency: currencyCode,
            currencyDisplay: 'symbol',
            ...modifiedOptions
        };
        try {
            return decimalAmount.toLocaleString(formattedLocale, localeOptions);
        } catch (e) {
            return stringAmount;
        }
    };

    class Language {
        supportedLocales;
        locale;
        languageCode;
        translations = defaultTranslation;
        customTranslations;
        loaded;
        constructor(locale = FALLBACK_LOCALE, customTranslations = {}) {
            // TODO: Fix this when we check for the languages
            // const defaultLocales = Object.keys(locales);
            const defaultLocales = ['en-US'];
            this.customTranslations = formatCustomTranslations(customTranslations, defaultLocales);
            const localesFromCustomTranslations = Object.keys(this.customTranslations);
            this.supportedLocales = [...defaultLocales, ...localesFromCustomTranslations].filter((v, i, a) => a.indexOf(v) === i); // our locales + validated custom locales
            this.locale = formatLocale(locale) || parseLocale(locale, this.supportedLocales) || FALLBACK_LOCALE;
            const [languageCode] = this.locale.split('-');
            this.languageCode = languageCode;
            this.loaded = loadTranslations(this.locale, this.customTranslations).then(translations => {
                this.translations = translations;
            });
        }
        /**
         * Returns a translated string from a key in the current {@link Language.locale}
         * @param key - Translation key
         * @param options - Translation options
         * @returns Translated string
         */ get(key, options) {
            const translation = getTranslation(this.translations, key, options);
            if (translation !== null) {
                return translation;
            }
            return key;
        }
        /**
         * Returns a localized string for an amount
         * @param amount - Amount to be converted
         * @param currencyCode - Currency code of the amount
         * @param options - Options for String.prototype.toLocaleString
         */ amount(amount, currencyCode, options) {
            return getLocalisedAmount(amount, this.locale, currencyCode, options);
        }
        /**
         * Returns a localized string for a date
         * @param date - Date to be localized
         * @param options - Options for {@link Date.toLocaleDateString}
         */ date(date, options = {}) {
            const dateOptions = {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                ...options
            };
            return new Date(date).toLocaleDateString(this.locale, dateOptions);
        }
    }

    /**
     * FALLBACK_CONTEXT
     */ const FALLBACK_CONTEXT$1 = 'https://checkoutshopper-live.adyen.com/checkoutshopper/';
    const GENERIC_OPTIONS = [
        'amount',
        'secondaryAmount',
        'countryCode',
        'environment',
        'loadingContext',
        'i18n',
        'modules',
        'order',
        'session',
        'clientKey',
        'showPayButton',
        'installmentOptions',
        // Events
        'onPaymentCompleted',
        'beforeRedirect',
        'beforeSubmit',
        'onSubmit',
        'onActionHandled',
        'onAdditionalDetails',
        'onCancel',
        'onChange',
        'onError',
        'onBalanceCheck',
        'onOrderRequest',
        'onOrderCreated',
        'setStatusAutomatically'
    ];

    const returnImage = ({ name, loadingContext, imageFolder = '', parentFolder = '', extension, size = '', subFolder = '' }) =>
        `${loadingContext}images/${imageFolder}${subFolder}${parentFolder}${name}${size}.${extension}`;
    const getImageUrl =
        ({ loadingContext = FALLBACK_CONTEXT$1, extension = 'svg', ...options }) =>
        name => {
            const imageOptions = {
                extension,
                loadingContext,
                imageFolder: 'logos/',
                parentFolder: '',
                name,
                ...options
            };
            return returnImage(imageOptions);
        };

    const FALLBACK_CONTEXT = 'https://checkoutshopper-live.adyen.com/checkoutshopper/';
    const resolveEnvironment$1 = (env = FALLBACK_CONTEXT) => {
        const environments = {
            test: 'https://checkoutshopper-test.adyen.com/checkoutshopper/',
            live: 'https://checkoutshopper-live.adyen.com/checkoutshopper/',
            'live-us': 'https://checkoutshopper-live-us.adyen.com/checkoutshopper/',
            'live-au': 'https://checkoutshopper-live-au.adyen.com/checkoutshopper/',
            'live-apse': 'https://checkoutshopper-live-apse.adyen.com/checkoutshopper/',
            'live-in': 'https://checkoutshopper-live-in.adyen.com/checkoutshopper/'
        };
        return environments[env] || environments[env.toLowerCase()] || env;
    };
    const FALLBACK_CDN_CONTEXT = 'https://checkoutshopper-live.adyen.com/checkoutshopper/';
    const resolveCDNEnvironment = (env = FALLBACK_CDN_CONTEXT) => {
        const environments = {
            beta: 'https://cdf6519016.cdn.adyen.com/checkoutshopper/',
            test: 'https://checkoutshopper-test.adyen.com/checkoutshopper/',
            live: 'https://checkoutshopper-live.adyen.com/checkoutshopper/',
            'live-us': 'https://checkoutshopper-live-us.adyen.com/checkoutshopper/',
            'live-au': 'https://checkoutshopper-live-au.adyen.com/checkoutshopper/',
            'live-apse': 'https://checkoutshopper-live-apse.adyen.com/checkoutshopper/',
            'live-in': 'https://checkoutshopper-live-in.adyen.com/checkoutshopper/'
        };
        return environments[env] || environments[env.toLowerCase()] || env;
    };

    class Resources {
        resourceContext;
        constructor(cdnContext = FALLBACK_CDN_CONTEXT) {
            this.resourceContext = cdnContext;
        }
        getImage(props) {
            return getImageUrl({
                ...props,
                loadingContext: this.resourceContext
            });
        }
    }

    const CoreContext = F$1({
        i18n: new Language(),
        loadingContext: '',
        commonProps: {},
        resources: new Resources()
    });

    function useCoreContext() {
        return q(CoreContext);
    }

    class Button extends k$1 {
        static defaultProps = {
            status: 'default',
            variant: 'primary',
            disabled: false,
            label: '',
            inline: false,
            target: '_self',
            onClick: () => {}
        };
        onClick = e => {
            e.preventDefault();
            if (!this.props.disabled) {
                this.props.onClick(e, {
                    complete: this.complete
                });
            }
        };
        complete = (delay = 1000) => {
            this.setState({
                completed: true
            });
            setTimeout(() => {
                this.setState({
                    completed: false
                });
            }, delay);
        };
        render({ classNameModifiers = [], disabled, href, icon, inline, label, status, variant }, { completed }) {
            const { i18n } = useCoreContext();
            const buttonIcon = icon
                ? /*#__PURE__*/ y$1('img', {
                      className: 'adyen-checkout__button__icon',
                      src: icon,
                      alt: '',
                      'aria-hidden': 'true'
                  })
                : '';
            const modifiers = [
                ...classNameModifiers,
                ...(variant !== 'primary' ? [variant] : []),
                ...(inline ? ['inline'] : []),
                ...(completed ? ['completed'] : []),
                ...(status === 'loading' || status === 'redirect' ? ['loading'] : [])
            ];
            const buttonClasses = classNames(['adyen-checkout__button', ...modifiers.map(m => `adyen-checkout__button--${m}`)]);
            const buttonStates = {
                loading: /*#__PURE__*/ y$1(Spinner, {
                    size: 'medium'
                }),
                redirect: /*#__PURE__*/ y$1(
                    'span',
                    {
                        className: 'adyen-checkout__button__content'
                    },
                    /*#__PURE__*/ y$1(Spinner, {
                        size: 'medium',
                        inline: true
                    }),
                    i18n.get('payButton.redirecting')
                ),
                default: /*#__PURE__*/ y$1(
                    'span',
                    {
                        className: 'adyen-checkout__button__content'
                    },
                    buttonIcon,
                    /*#__PURE__*/ y$1(
                        'span',
                        {
                            className: 'adyen-checkout__button__text'
                        },
                        label
                    )
                )
            };
            const buttonText = buttonStates[status] || buttonStates.default;
            if (href) {
                return /*#__PURE__*/ y$1(
                    'a',
                    {
                        className: buttonClasses,
                        href: href,
                        disabled: disabled,
                        target: this.props.target,
                        rel: this.props.rel
                    },
                    buttonText
                );
            }
            return /*#__PURE__*/ y$1(
                'button',
                {
                    className: buttonClasses,
                    type: 'button',
                    disabled: disabled,
                    onClick: this.onClick
                },
                buttonText,
                status !== 'loading' && status !== 'redirect' && this.props.children
            );
        }
    }

    const PAY_BTN_DIVIDER = '/ ';
    const amountLabel = (i18n, amount) =>
        !!amount?.value && !!amount?.currency
            ? i18n.amount(amount.value, amount.currency, {
                  currencyDisplay: amount.currencyDisplay || 'symbol'
              })
            : '';
    const payAmountLabel = (i18n, amount) => `${i18n.get('payButton')} ${amountLabel(i18n, amount)}`;
    const secondaryAmountLabel = (i18n, secondaryAmount) => {
        const convertedSecondaryAmount =
            secondaryAmount && !!secondaryAmount?.value && !!secondaryAmount?.currency
                ? i18n.amount(secondaryAmount.value, secondaryAmount.currency, {
                      currencyDisplay: secondaryAmount.currencyDisplay || 'symbol'
                  })
                : '';
        const divider = convertedSecondaryAmount.length ? PAY_BTN_DIVIDER : '';
        return `${divider}${convertedSecondaryAmount}`;
    };

    const SecondaryButtonLabel = ({ label }) => {
        return /*#__PURE__*/ y$1(
            'span',
            {
                className: 'checkout-secondary-button__text'
            },
            label
        );
    };

    const PayButton = ({ amount, secondaryAmount, classNameModifiers = [], label, ...props }) => {
        const { i18n } = useCoreContext();
        const isZeroAuth = amount && {}.hasOwnProperty.call(amount, 'value') && amount.value === 0;
        const defaultLabel = isZeroAuth ? i18n.get('confirmPreauthorization') : payAmountLabel(i18n, amount);
        /**
         * Show the secondaryLabel if:
         *  - it's not zero auth, and
         *  - we don't have a predefined label (i.e. redirect, qrcode, await based comps...), and
         *  - we do have an amount object (merchant might not be passing this in order to not show the amount on the button), and
         *  - we have a secondaryAmount object with some properties
         */ const secondaryLabel =
            !isZeroAuth && !label && amount && secondaryAmount && Object.keys(secondaryAmount).length
                ? secondaryAmountLabel(i18n, secondaryAmount)
                : null;
        return /*#__PURE__*/ y$1(
            Button,
            {
                ...props,
                disabled: props.disabled || props.status === 'loading',
                classNameModifiers: [...classNameModifiers, 'pay'],
                label: label || defaultLabel
            },
            secondaryLabel &&
                /*#__PURE__*/ y$1(SecondaryButtonLabel, {
                    label: secondaryLabel
                })
        );
    };

    const ALLOWED_PROPERTIES = ['action', 'resultCode', 'sessionData', 'order', 'sessionResult'];
    function getSanitizedResponse(response) {
        const removedProperties = [];
        const sanitizedObject = Object.keys(response).reduce((acc, cur) => {
            if (!ALLOWED_PROPERTIES.includes(cur)) {
                removedProperties.push(cur);
            } else {
                acc[cur] = response[cur];
            }
            return acc;
        }, {});
        if (removedProperties.length) console.warn(`The following properties should not be passed to the client: ${removedProperties.join(', ')}`);
        return sanitizedObject;
    }
    function resolveFinalResult(result) {
        switch (result.resultCode) {
            case 'Authorised':
            case 'Received':
                return ['success'];
            case 'Pending':
                return ['success'];
            case 'Cancelled':
            case 'Error':
            case 'Refused':
                return ['error'];
        }
    }

    function hasOwnProperty(obj = {}, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    class UIElement extends BaseElement {
        componentRef;
        resources;
        elementRef;
        static type = undefined;
        /**
         * Defines all txVariants that the Component supports (in case it support multiple ones besides the 'type' one)
         */ static txVariants = [];
        /**
         * Defines the extra dependencies (Components) that it is needed for the specific UIElement
         * Ex: Card depends on ThreeDS components
         */ static dependencies = [];
        constructor(props) {
            super(props);
            if (!this.core.getComponent(this.type)) {
                console.warn(`UIElement: ${this.type} not registered`);
            }
            this.submit = this.submit.bind(this);
            this.setState = this.setState.bind(this);
            this.onValid = this.onValid.bind(this);
            this.onComplete = this.onComplete.bind(this);
            this.onSubmit = this.onSubmit.bind(this);
            this.handleAction = this.handleAction.bind(this);
            this.handleOrder = this.handleOrder.bind(this);
            this.handleResponse = this.handleResponse.bind(this);
            this.setElementStatus = this.setElementStatus.bind(this);
            this.elementRef = (props && props.elementRef) || this;
            this.resources = this.props.modules ? this.props.modules.resources : undefined;
            this.storeElementRefOnCore(props);
            this.updatePaymentMethodsConfiguration(props);
        }
        storeElementRefOnCore(props) {
            if (!props?.isDropin) {
                this.core.storeElementReference(this);
            }
        }
        updatePaymentMethodsConfiguration(props) {
            const { core, ...componentProps } = props;
            const hasConfiguration = Object.keys(componentProps).length !== 0;
            if (!props.isDropin && hasConfiguration) {
                this.core.updatePaymentMethodsConfiguration({
                    [this.type]: componentProps
                });
            }
        }
        buildElementProps(componentProps) {
            const globalCoreProps = this.core.getCorePropsForComponent();
            const paymentMethodsResponseProps = this.core.paymentMethodsResponse.find(this.constructor['type']);
            const finalProps = {
                showPayButton: true,
                setStatusAutomatically: true,
                ...globalCoreProps,
                ...paymentMethodsResponseProps,
                ...componentProps
            };
            this.props = this.formatProps({
                ...this.constructor['defaultProps'],
                ...finalProps
            });
        }
        setState(newState) {
            this.state = {
                ...this.state,
                ...newState
            };
            this.onChange();
        }
        onChange() {
            const isValid = this.isValid;
            const state = {
                data: this.data,
                errors: this.state.errors,
                valid: this.state.valid,
                isValid
            };
            if (this.props.onChange) this.props.onChange(state, this.elementRef);
            if (isValid) this.onValid();
            return state;
        }
        onSubmit() {
            //TODO: refactor this, instant payment methods are part of Dropin logic not UIElement
            if (this.props.isInstantPayment) {
                const dropinElementRef = this.elementRef;
                dropinElementRef.closeActivePaymentMethod();
            }
            if (this.props.setStatusAutomatically) {
                this.setElementStatus('loading');
            }
            if (this.props.onSubmit) {
                console.log('### UIElement::onSubmit::  this.elementRef', this.elementRef);
                // Classic flow
                this.props.onSubmit(
                    {
                        data: this.data,
                        isValid: this.isValid
                    },
                    this.elementRef
                );
            } else if (this.core.session) {
                // Session flow
                // wrap beforeSubmit callback in a promise
                const beforeSubmitEvent = this.props.beforeSubmit
                    ? new Promise((resolve, reject) =>
                          this.props.beforeSubmit(this.data, this.elementRef, {
                              resolve,
                              reject
                          })
                      )
                    : Promise.resolve(this.data);
                beforeSubmitEvent
                    .then(data => this.submitPayment(data))
                    .catch(() => {
                        // set state as ready to submit if the merchant cancels the action
                        this.elementRef.setStatus('ready');
                    });
            } else {
                this.handleError(new AdyenCheckoutError('IMPLEMENTATION_ERROR', 'Could not submit the payment'));
            }
        }
        onValid() {
            const state = {
                data: this.data
            };
            if (this.props.onValid) this.props.onValid(state, this.elementRef);
            return state;
        }
        onComplete(state) {
            if (this.props.onComplete) this.props.onComplete(state, this.elementRef);
        }
        /**
         * Submit payment method data. If the form is not valid, it will trigger validation.
         */ submit() {
            if (!this.isValid) {
                this.showValidation();
                return;
            }
            this.onSubmit();
        }
        showValidation() {
            if (this.componentRef && this.componentRef.showValidation) this.componentRef.showValidation();
            return this;
        }
        setElementStatus(status, props) {
            this.elementRef?.setStatus(status, props);
            return this;
        }
        setStatus(status, props) {
            if (this.componentRef?.setStatus) {
                this.componentRef.setStatus(status, props);
            }
            return this;
        }
        submitPayment(data) {
            return this.core.session
                .submitPayment(data)
                .then(this.handleResponse)
                .catch(error => this.handleError(error));
        }
        submitAdditionalDetails(data) {
            return this.core.session.submitDetails(data).then(this.handleResponse).catch(this.handleError);
        }
        handleError = error => {
            /**
             * Set status using elementRef, which:
             * - If Drop-in, will set status for Dropin component, and then it will propagate the new status for the active payment method component
             * - If Component, it will set its own status
             */ this.setElementStatus('ready');
            if (this.props.onError) {
                this.props.onError(error, this.elementRef);
            }
        };
        handleAdditionalDetails = state => {
            if (this.props.onAdditionalDetails) {
                this.props.onAdditionalDetails(state, this.elementRef);
            } else if (this.props.session) {
                this.submitAdditionalDetails(state.data);
            }
            return state;
        };
        handleAction(action, props = {}) {
            if (!action || !action.type) {
                if (hasOwnProperty(action, 'action') && hasOwnProperty(action, 'resultCode')) {
                    throw new Error(
                        'handleAction::Invalid Action - the passed action object itself has an "action" property and ' +
                            'a "resultCode": have you passed in the whole response object by mistake?'
                    );
                }
                throw new Error('handleAction::Invalid Action - the passed action object does not have a "type" property');
            }
            const paymentAction = this.core.createFromAction(action, {
                ...this.elementRef.props,
                ...props,
                onAdditionalDetails: this.handleAdditionalDetails
            });
            if (paymentAction) {
                this.unmount();
                return paymentAction.mount(this._node);
            }
            return null;
        }
        handleOrder = response => {
            this.updateParent({
                order: response.order
            });
            // in case we receive an order in any other component then a GiftCard trigger handleFinalResult
            if (this.props.onPaymentCompleted) this.props.onPaymentCompleted(response, this.elementRef);
        };
        handleFinalResult = result => {
            if (this.props.setStatusAutomatically) {
                const [status, statusProps] = resolveFinalResult(result);
                if (status) this.setElementStatus(status, statusProps);
            }
            if (this.props.onPaymentCompleted) this.props.onPaymentCompleted(result, this.elementRef);
            return result;
        };
        /**
         * Handles a session /payments or /payments/details response.
         * The component will handle automatically actions, orders, and final results.
         * @param rawResponse -
         */ handleResponse(rawResponse) {
            const response = getSanitizedResponse(rawResponse);
            if (response.action) {
                this.elementRef.handleAction(response.action);
            } else if (response.order?.remainingAmount?.value > 0) {
                // we don't want to call elementRef here, use the component handler
                // we do this way so the logic on handlingOrder is associated with payment method
                this.handleOrder(response);
            } else {
                this.elementRef.handleFinalResult(response);
            }
        }
        /**
         * Call update on parent instance
         * This function exist to make safe access to the protect _parentInstance
         * @param options - CoreOptions
         */ updateParent(options = {}) {
            return this.elementRef.core.update(options);
        }
        setComponentRef = ref => {
            this.componentRef = ref;
        };
        /**
         * Get the current validation status of the element
         */ get isValid() {
            return false;
        }
        /**
         * Get the element icon URL for the current environment
         */ get icon() {
            return (
                this.props.icon ??
                this.resources.getImage({
                    loadingContext: this.props.loadingContext
                })(this.constructor['type'])
            );
        }
        /**
         * Get the element's displayable name
         */ get displayName() {
            return this.props.name || this.constructor['type'];
        }
        /**
         * Get the element accessible name, used in the aria-label of the button that controls selected payment method
         */ get accessibleName() {
            return this.displayName;
        }
        /**
         * Return the type of an element
         */ get type() {
            return this.props.type || this.constructor['type'];
        }
        /**
         * Get the payButton component for the current element
         */ payButton = props => {
            return /*#__PURE__*/ y$1(PayButton, {
                ...props,
                amount: this.props.amount,
                secondaryAmount: this.props.secondaryAmount,
                onClick: this.submit
            });
        };
    }

    const ENCRYPTED_CARD_NUMBER = 'encryptedCardNumber';
    const ENCRYPTED_EXPIRY_DATE = 'encryptedExpiryDate';
    const ENCRYPTED_EXPIRY_MONTH = 'encryptedExpiryMonth';
    const ENCRYPTED_EXPIRY_YEAR = 'encryptedExpiryYear';
    const ENCRYPTED_SECURITY_CODE = 'encryptedSecurityCode';
    const ENCRYPTED_PWD_FIELD = 'encryptedPassword';
    const ENCRYPTED_PIN_FIELD = 'encryptedPin';
    const ENCRYPTED_BANK_ACCNT_NUMBER_FIELD = 'encryptedBankAccountNumber';
    const ENCRYPTED_BANK_LOCATION_FIELD = 'encryptedBankLocationId';
    const ENCRYPTED_SECURITY_CODE_3_DIGITS = 'encryptedSecurityCode3digits';
    const ENCRYPTED_SECURITY_CODE_4_DIGITS = 'encryptedSecurityCode4digits';
    const GIFT_CARD = 'giftcard';
    const SF_VERSION = '4.5.0';
    const DEFAULT_CARD_GROUP_TYPES = ['amex', 'mc', 'visa'];
    // export const NON_CREDIT_CARD_TYPE_SECURED_FIELDS = ['ach', GIFT_CARD, 'sepa', 'sepadirectdebit']; //Maybe, sometime in the future
    const NON_CREDIT_CARD_TYPE_SECURED_FIELDS = ['ach', GIFT_CARD];
    // Credit card (CardInput) related securedFields
    const CREDIT_CARD_SF_FIELDS = [
        ENCRYPTED_CARD_NUMBER,
        ENCRYPTED_EXPIRY_DATE,
        ENCRYPTED_EXPIRY_MONTH,
        ENCRYPTED_EXPIRY_YEAR,
        ENCRYPTED_SECURITY_CODE,
        ENCRYPTED_PWD_FIELD
    ];
    // export const ALL_RELATED_SECURED_FIELDS = ALL_SECURED_FIELDS.concat(NON_CREDIT_CARD_TYPE_SECURED_FIELDS);
    // Card components created as: checkout.create({BRAND}) e.g. checkout.create('bcmc')
    // - which are dedicated to a single, core, brand e.g. 'bcmc' BUT which can in effect handle multiple brands e.g. "bcmc", "maestro", "visa"
    const DEDICATED_CARD_COMPONENTS = ['bcmc'];
    const REQUIRED = 'required';
    const OPTIONAL = 'optional';
    const HIDDEN = 'hidden';
    const CVC_POLICY_REQUIRED = REQUIRED;
    const CVC_POLICY_OPTIONAL = OPTIONAL;
    const CVC_POLICY_HIDDEN = HIDDEN;
    const DATE_POLICY_REQUIRED = REQUIRED;
    const DATE_POLICY_OPTIONAL = OPTIONAL;
    const DATE_POLICY_HIDDEN = HIDDEN;
    const DATA_ENCRYPTED_FIELD_ATTR = 'data-cse';
    const DATA_INFO = 'data-info';
    const DATA_UID = 'data-uid';
    const BRAND_ICON_UI_EXCLUSION_LIST = ['accel', 'pulse', 'star', 'nyce'];
    const BRAND_READABLE_NAME_MAP = {
        visa: 'VISA',
        mc: 'MasterCard',
        amex: 'American Express',
        discover: 'Discover',
        cup: 'China Union Pay',
        jcb: 'JCB',
        diners: 'Diners Club',
        maestro: 'Maestro',
        bcmc: 'Bancontact card'
    };

    const ARIA_ERROR_SUFFIX = '-ariaError';
    const ERROR_MSG_CARD_TOO_OLD = 'Card too old';
    const ERROR_MSG_CARD_TOO_FAR_IN_FUTURE = 'Date too far in future';
    const ERROR_MSG_CARD_EXPIRES_TOO_SOON = 'Your card expires before check out date';
    const ERROR_MSG_INCOMPLETE_FIELD = 'incomplete field';
    const ERROR_MSG_LUHN_CHECK_FAILED = 'luhn check failed';
    const ERROR_MSG_UNSUPPORTED_CARD_ENTERED = 'Unsupported card entered';
    const ERROR_MSG_INVALID_FIELD = 'field not valid';
    // export const ERROR_MSG_KCP_INVALID_PWD = 'invalid password';
    // NEW
    const ERROR_MSG_EMPTY_PAN = 'Card number field empty';
    const ERROR_MSG_EMPTY_DATE = 'Expiry date field empty';
    const ERROR_MSG_EMPTY_YEAR = 'Expiry year field empty';
    const ERROR_MSG_EMPTY_MONTH = 'Expiry month field empty';
    const ERROR_MSG_EMPTY_CVC = 'Security code field empty';
    const ERROR_MSG_EMPTY_KCP_PWD = 'KCP password field empty';
    const ERROR_MSG_EMPTY_ACH_ACCOUNT_NUMBER = 'ACH bank account field empty';
    const ERROR_MSG_EMPTY_ACH_BANK_LOCATION_ID = 'ACH bank location field empty';
    const ERROR_MSG_INCORRECTLY_FILLED_PAN = 'Card number not filled correctly';
    const ERROR_MSG_INCORRECTLY_FILLED__DATE = 'Expiry date not filled correctly';
    // export const ERROR_MSG_INCORRECTLY_FILLED_MONTH = 'Expiry month not filled correctly';
    const ERROR_MSG_INCORRECTLY_FILLED_YEAR = 'Expiry year not filled correctly';
    const ERROR_MSG_INCORRECTLY_FILLED_CVC = 'Security code not filled correctly';
    const ERROR_MSG_INCORRECTLY_FILLED_KCP_PWD = 'KCP password not filled correctly';
    const ERROR_MSG_INCORRECTLY_FILLED_ACH_ACCOUNT_NUMBER = 'ACH bank account not filled correctly';
    const ERROR_MSG_INCORRECTLY_FILLED_ACH_BANK_LOCATION_ID = 'ACH bank location id not filled correctly';
    // end NEW
    /**
     * Error Codes
     * @example error.va.sf-cc-num.01
     * =
     * error
     * .validation error
     * .field description
     * .error type (luhn check failed)]
     */ const ERROR_CODES = {
        [ERROR_MSG_INCOMPLETE_FIELD]: 'error.va.gen.01',
        [ERROR_MSG_INVALID_FIELD]: 'error.va.gen.02',
        [ERROR_MSG_LUHN_CHECK_FAILED]: 'error.va.sf-cc-num.01',
        [ERROR_MSG_EMPTY_PAN]: 'error.va.sf-cc-num.02',
        [ERROR_MSG_UNSUPPORTED_CARD_ENTERED]: 'error.va.sf-cc-num.03',
        [ERROR_MSG_INCORRECTLY_FILLED_PAN]: 'error.va.sf-cc-num.04',
        [ERROR_MSG_CARD_TOO_OLD]: 'error.va.sf-cc-dat.01',
        [ERROR_MSG_CARD_TOO_FAR_IN_FUTURE]: 'error.va.sf-cc-dat.02',
        [ERROR_MSG_CARD_EXPIRES_TOO_SOON]: 'error.va.sf-cc-dat.03',
        [ERROR_MSG_EMPTY_DATE]: 'error.va.sf-cc-dat.04',
        [ERROR_MSG_INCORRECTLY_FILLED__DATE]: 'error.va.sf-cc-dat.05',
        [ERROR_MSG_EMPTY_YEAR]: 'error.va.sf-cc-yr.01',
        [ERROR_MSG_INCORRECTLY_FILLED_YEAR]: 'error.va.sf-cc-yr.02',
        // [ERROR_MSG_INCORRECTLY_FILLED_MONTH]: 'error.va.sf-cc-mth.02',
        [ERROR_MSG_EMPTY_MONTH]: 'error.va.sf-cc-mth.01',
        [ERROR_MSG_EMPTY_CVC]: 'error.va.sf-cc-cvc.01',
        [ERROR_MSG_INCORRECTLY_FILLED_CVC]: 'error.va.sf-cc-cvc.02',
        [ERROR_MSG_EMPTY_KCP_PWD]: 'error.va.sf-kcp-pwd.01',
        [ERROR_MSG_INCORRECTLY_FILLED_KCP_PWD]: 'error.va.sf-kcp-pwd.02',
        [ERROR_MSG_EMPTY_ACH_ACCOUNT_NUMBER]: 'error.va.sf-ach-num.01',
        [ERROR_MSG_INCORRECTLY_FILLED_ACH_ACCOUNT_NUMBER]: 'error.va.sf-ach-num.02',
        [ERROR_MSG_EMPTY_ACH_BANK_LOCATION_ID]: 'error.va.sf-ach-loc.01',
        [ERROR_MSG_INCORRECTLY_FILLED_ACH_BANK_LOCATION_ID]: 'error.va.sf-ach-loc.02'
    };
    const DEFAULT_ERROR = ERROR_CODES[ERROR_MSG_INCOMPLETE_FIELD];
    // All "empty field" errors are triggered in Components
    const EMPTY_FIELD_ERROR_MESSAGES = {
        [ENCRYPTED_CARD_NUMBER]: ERROR_CODES[ERROR_MSG_EMPTY_PAN],
        [ENCRYPTED_EXPIRY_DATE]: ERROR_CODES[ERROR_MSG_EMPTY_DATE],
        [ENCRYPTED_EXPIRY_MONTH]: ERROR_CODES[ERROR_MSG_EMPTY_MONTH],
        [ENCRYPTED_EXPIRY_YEAR]: ERROR_CODES[ERROR_MSG_EMPTY_YEAR],
        [ENCRYPTED_SECURITY_CODE]: ERROR_CODES[ERROR_MSG_EMPTY_CVC],
        [ENCRYPTED_PWD_FIELD]: ERROR_CODES[ERROR_MSG_EMPTY_KCP_PWD],
        [ENCRYPTED_BANK_ACCNT_NUMBER_FIELD]: ERROR_CODES[ERROR_MSG_EMPTY_ACH_ACCOUNT_NUMBER],
        [ENCRYPTED_BANK_LOCATION_FIELD]: ERROR_CODES[ERROR_MSG_EMPTY_ACH_BANK_LOCATION_ID]
    };
    const ERROR_ACTION_FOCUS_FIELD = 'focusField';
    const ERROR_ACTION_BLUR_SCENARIO = 'notValidating:blurScenario';

    // ROUTINES USED IN SecuredFieldsProvider.componentDidMount TO DETECT & MAP FIELD NAMES ///////////
    /**
     * Make an array of encrypted field names based on the value of the 'data-cse' attribute of elements in the rootNode
     */ const getFields = rootNode => {
        if (rootNode) {
            return Array.prototype.slice.call(rootNode.querySelectorAll('[data-cse*="encrypted"]')).map(f => f.getAttribute('data-cse'));
        }
        return [];
    };
    /**
     * If, visually, we're dealing with a single date field (expiryDate) we still need separate entries
     * for expiryMonth & expiryYear - since that is how the values will be delivered from securedFields
     */ const validFieldsReducer = (acc, cur) => {
        if (cur === ENCRYPTED_EXPIRY_DATE) {
            acc[ENCRYPTED_EXPIRY_MONTH] = false;
            acc[ENCRYPTED_EXPIRY_YEAR] = false;
        } else {
            acc[cur] = false;
        }
        return acc;
    };
    // -- end ROUTINES USED IN SecuredFieldsProvider.componentDidMount --------------------------------
    // ROUTINES USED IN SecuredFieldsProvider.showValidation TO GENERATE ERRORS ///////////
    /**
     *  If, visually, we're dealing with a single date field (expiryDate) remap the separate entries we have
     *  for the valid states of expiryMonth & expiryYear back to the single key we use to an store an error
     *  i.e `"encryptedExpiryMonth" & "encryptedExpiryYear" => "encryptedExpiryDate"`
     */ const mapDateFields = (field, numDateFields) => {
        const isDateField = field === ENCRYPTED_EXPIRY_MONTH || field === ENCRYPTED_EXPIRY_YEAR;
        return numDateFields === 1 && isDateField ? ENCRYPTED_EXPIRY_DATE : field;
    };
    /**
     * Skip generating an error for an optional field, unless it is already in error
     */ const skipOptionalFields = (field, state, fieldNames) => {
        // console.log('\n### utils::skipOptionalField3:: examining field=', field);
        const { isFieldOfType, fieldIsValid } = fieldNames.reduce(
            (acc, fieldName) => {
                if (!acc.isFieldOfType) {
                    // console.log('### utils:: fieldName:: ', fieldName, 'match=', field === fieldName);
                    acc.isFieldOfType = field === fieldName;
                    acc.fieldIsValid = !state.errors[fieldName];
                }
                return acc;
            },
            {
                isFieldOfType: false,
                fieldIsValid: false
            }
        );
        const policyType = field === ENCRYPTED_SECURITY_CODE ? 'cvcPolicy' : 'expiryDatePolicy';
        const policyOptional = policyType === 'cvcPolicy' ? CVC_POLICY_OPTIONAL : DATE_POLICY_OPTIONAL;
        const policyHidden = policyType === 'cvcPolicy' ? CVC_POLICY_HIDDEN : DATE_POLICY_HIDDEN;
        // if policy != required
        return (state[policyType] === policyOptional || state[policyType] === policyHidden) && fieldIsValid && isFieldOfType ? null : field;
    };
    const getErrorReducer = (numDateFields, state) => (acc, field) => {
        // We're only interested in the non-valid fields from the state.valid object...
        let val =
            state.valid[field] !== true
                ? mapDateFields(field, numDateFields) // Map the keys we use for the valid state to the key(s) we use for the error state
                : null;
        // Skip error generation for optional/hidden CVC & Date unless the fields are already in error
        val = skipOptionalFields(val, state, [ENCRYPTED_SECURITY_CODE, ENCRYPTED_EXPIRY_DATE, ENCRYPTED_EXPIRY_MONTH, ENCRYPTED_EXPIRY_YEAR]);
        // console.log('### utils:::: ############# val=', val);
        if (val && !acc.includes(val)) acc.push(val);
        return acc;
    };
    /**
     * Create an object suitable for sending to our handleOnError function
     */ const getErrorObject = (fieldType, rootNode, state) => {
        // Get existing error OR field is empty in which case get field specific msg OR use default
        const error = getProp(state, `errors.${fieldType}`) || EMPTY_FIELD_ERROR_MESSAGES[fieldType] || DEFAULT_ERROR;
        return {
            rootNode,
            fieldType,
            error,
            type: 'card'
        };
    }; // -- end ROUTINES USED IN SecuredFieldsProvider.showValidation -----------------------

    class AbstractCSF {
        // Set in CSF
        callbacks;
        config;
        props;
        state;
        validateForm;
        handleBrandFromBinLookup;
        callbacksHandler;
        configHandler;
        createCardSecuredFields;
        createNonCardSecuredFields;
        createSecuredFields;
        destroySecuredFields;
        handleIOSTouchEvents;
        destroyTouchendListener;
        destroyTouchstartListener;
        handleBinValue;
        handleEncryption;
        handleFocus;
        handleIframeConfigFeedback;
        handleValidation;
        handleSFShiftTab;
        handleShiftTab;
        isConfigured;
        postMessageToAllIframes;
        processAutoComplete;
        processBrand;
        sendBrandToCardSF;
        sendExpiryDatePolicyToSF;
        setFocusOnFrame;
        setupSecuredField;
        touchendListener;
        touchstartListener;
        // Set in createSecuredFields
        encryptedAttrName;
        hasRedundantCVCField;
        isSingleBrandedCard;
        securityCode;
        // --
        constructor(setupObj) {
            this.props = setupObj;
            this.state = {};
            // Initialise storage objects
            this.config = {}; // {} as ConfigObject fails in linting
            this.callbacks = {};
        }
    }

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     * @internal
     */ const objToString = Object.prototype.toString;
    /**
     * Checks if `prop` is classified as an `Array` primitive or object.
     * @internal
     * @param prop - The value to check.
     * @returns Returns `true` if `prop` is correctly classified, else `false`.
     * @example
     * ```
     * isArray([1, 2, 3]);
     * // => true
     *
     * isArray(1);
     * // => false
     * ```
     */ function isArray$1(prop) {
        return typeof prop === 'object' && prop !== null && Object.prototype.toString.call(prop) === '[object Array]';
    }
    /**
     * Generate random number using window.crypto if available - otherwise fall back toMath.random
     *
     * @returns Number
     */ function generateRandomNumber() {
        if (!window.crypto) {
            // eslint-disable-next-line
            return (Math.random() * 0x100000000) | 0;
        }
        const ranNum = new Uint32Array(1);
        window.crypto.getRandomValues(ranNum);
        return ranNum[0];
    }
    /**
     * wait
     *
     * Generic, Promise based, setTimeout call
     *
     * ms : Number - timeout value in milliseconds
     *
     * @example
     * ```
     * wait(5000).then(() => { runMyFunction() } ).catch(() => console.log('error with the timeout'));
     * ```
     */ // const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));
    /**
     * The function existy is meant to define the existence of something.
     * Using the loose inequality operator (!=), it is possible to distinguish between null, undefined, and everything else.
     * @internal
     * @param x -
     * @returns
     */ function existy(x) {
        return x != null;
    }
    /**
     * Used to determine if something should be considered a synonym for true
     * NOTE: The number zero is considered “truthy” by design as is '' & `{}`.
     * If you wish to retain the behavior where 0 is a synonym for false, then do not use truthy where you might expect 0
     * So - returns true if something is not false, undefined or null
     * @internal
     * @param x -
     * @returns
     */ function truthy(x) {
        return x !== false && existy(x);
    }
    /**
     * Checks if `value` is object-like.
     * (FROM lodash.3.10.1)
     * @internal
     * @param value - The value to check.
     * @returns Returns `true` if `value` is object-like, else `false`.
     */ function isObjectLike(value) {
        return !!value && typeof value === 'object';
    }
    /**
     * Recursively compare 2 objects
     */ function objectsDeepEqual(x, y) {
        const xType = typeof x;
        const yType = typeof y;
        if (x && y && xType === 'object' && xType === yType) {
            if (Object.keys(x).length !== Object.keys(y).length) {
                return false;
            }
            return Object.keys(x).every(key => objectsDeepEqual(x[key], y[key]));
        }
        return x === y;
    }
    /**
     * @internal
     * Checks if `value` is classified as a `Number` primitive or object.
     * NOTE: `Infinity`, `-Infinity`, and `NaN` are classified as numbers
     * (FROM lodash.3.10.1)
     * @param value - The value to check.
     * @returns Returns `true` if `value` is correctly classified, else `false`.
     * @example
     * ```
     * isNumber(8.4);
     * // => true
     *
     * isNumber(NaN);
     * // => true
     *
     * isNumber('8.4');
     * // => false
     * ```
     */ function isNumber(value) {
        const numberTag = '[object Number]';
        return typeof value === 'number' || (isObjectLike(value) && objToString.call(value) === numberTag);
    }
    /**
     * Checks if `value` is classified as a `String` primitive or object.
     * (FROM lodash.3.10.1)
     * @internal
     * @param value - The value to check.
     * @returns Returns `true` if `value` is correctly classified, else `false`.
     * @example
     * ```
     * isString('abc');
     * // => true
     *
     * isString(1);
     * // => false
     * ```
     */ function isString(value) {
        const stringTag = '[object String]';
        return typeof value === 'string' || (isObjectLike(value) && objToString.call(value) === stringTag);
    }
    /**
     * Returns true if x is:
     * null, undefined, false, 0, NaN, empty object or array, empty string
     * @param x -
     * @example
     * ```
     * falsy(0) // => true
     * falsy('') // => true
     * falsy({}) // => true
     * falsy([]) // => true
     * falsy(false) // => true
     * falsy(NaN) // => true
     * falsy(null) // => true
     * falsy(undefined) // => true
     *
     * falsy(1) // => false
     * falsy('d') // => false
     * falsy({type:"kin"}) // => false
     * falsy([6]) // => false
     * falsy(true) // => false
     * ```
     */ function falsy(x) {
        // Is null, undefined or false
        if (!truthy(x)) {
            return true;
        }
        // = 0 || NaN
        if (isNumber(x)) {
            if (x === 0 || Number.isNaN(x)) {
                return true;
            }
        }
        // empty array or string
        if ((isArray$1(x) || isString(x)) && x.length === 0) {
            return true;
        }
        // empty object
        if (isObjectLike(x) && Object.keys(x).length === 0) {
            return true;
        }
        return false;
    }
    /**
     * This function allows us to partially apply any number of variables to functions that take any number of parameters.
     * @returns \{function(): *\}
     */ function partial(...args) {
        // Store the args array
        const myArgs = args;
        // Grab the function (the first argument). myArgs now contains the remaining arguments
        const fn = myArgs.shift();
        // Return a function that calls fn with myArgs + whatever else is passed when this returned function is called
        function partialFn(...args2) {
            return fn.apply(this, myArgs.concat(args2));
        }
        return partialFn;
    }

    const getCardGroupTypes = cardGroupTypes => (isArray$1(cardGroupTypes) && cardGroupTypes.length ? cardGroupTypes : DEFAULT_CARD_GROUP_TYPES);

    /**
     * @internal
     * Utility class for logging messages/errors
     * Usage:
     * logger.log('Log message, always visible');
     *
     * For debug only messages:
     * window._b$dl && logger.log('Log message only visible on dev env');
     *
     * Or just use a conditional:
     * ```
     * if (window._b$dl) {
     *     logger.log('Log message only visible on dev env');
     * }
     * ```
     */ /**
     * @internal
     * Logs errors
     * NOTE: changed to 'let' from 'const' for the purpose of running unit tests
     */ // eslint-disable-next-line prefer-const
    let error = typeof window !== 'undefined' && window.console && window.console.error && window.console.error.bind(window.console);
    /**
     * @internal
     * Logs info
     */ typeof window !== 'undefined' && window.console && window.console.info && window.console.info.bind(window.console);
    /**
     * @internal
     * Logs
     * NOTE: changed to 'let' from 'const' for the purpose of running unit tests
     */ // eslint-disable-next-line prefer-const
    let log = typeof window !== 'undefined' && window.console && window.console.log && window.console.log.bind(window.console); // eslint-disable-line
    /**
     * @internal
     * Logs warnings
     * NOTE: changed to 'let' from 'const' for the purpose of running unit tests
     */ // eslint-disable-next-line prefer-const
    let warn = typeof window !== 'undefined' && window.console && window.console.warn && window.console.warn.bind(window.console); // eslint-disable-line

    /**
     * Parses this.props to set 'config' type vars on this (CSFComp)
     * - properties that just need to be set once, at startup, and then don't change
     *
     * See interface ConfigObject in types.ts
     */ function handleConfig(props) {
        // --
        this.config.cardGroupTypes = getCardGroupTypes(props.cardGroupTypes);
        const loadingContext = props.loadingContext;
        if (!loadingContext) {
            warn('WARNING Config :: no loadingContext has been specified!');
            return;
        }
        // Ensure passed loadingContext has trailing slash
        const lastChar = str => str.charAt(str.length - 1);
        this.config.loadingContext = lastChar(loadingContext) === '/' ? loadingContext : `${loadingContext}/`;
        // Is this for the regular creditCard or for another use-case for securedFields e.g. 'ach' or 'giftcard'
        this.config.isCreditCardType = NON_CREDIT_CARD_TYPE_SECURED_FIELDS.includes(props.type) === false;
        // Configuration object for individual txVariants - contains styling object values for securedFields inputs
        this.config.iframeUIConfig = props.iframeUIConfig;
        // By default CSF is allowed to add the encrypted element to the DOM - user of CSF must explicitly 'opt-out' to prevent this happening
        // (If either condition is true - then set allowedDOMAccess to false)
        this.config.allowedDOMAccess = !(props.allowedDOMAccess === false || props.allowedDOMAccess === 'false');
        // By default CSF is allowed to automatically shift focus from the date to CVC fields - user of CSF must explicitly 'opt-out' to prevent this happening
        this.config.autoFocus = !(props.autoFocus === false || props.autoFocus === 'false');
        // By default CSF will NOT perform a console.warn when receiving postMessages with origin or numKey mismatches - user of CSF must explicitly 'opt-in' to get this
        this.config.showWarnings = props.showWarnings === true || props.showWarnings === 'true';
        // By default CSF will strip the trailing separator character from valid credit card numbers - user of CSF must explicitly 'opt-out' to prevent this happening
        this.config.trimTrailingSeparator = !(props.trimTrailingSeparator === false || props.trimTrailingSeparator === 'false');
        // By default CSF is allowed to add a fix for iOS to force the keypad to retract - user of CSF must explicitly 'opt-out' to prevent this happening
        this.config.keypadFix = !(props.keypadFix === false || props.keypadFix === 'false');
        // To set the type on the iframe input fields to 'tel' c.f. the default 'text' (with inputmode='numeric')
        this.config.legacyInputMode = props.legacyInputMode || null;
        // To configure the minimum expiry date to a merchant defined value - this means the card has to be valid until at least this date
        this.config.minimumExpiryDate = props.minimumExpiryDate || null;
        // To distinguish between regular 'components' initiated securedField or 'custom' card component
        this.config.implementationType = props.implementationType;
        this.config.sfLogAtStart = window._b$dl === true;
        let sfBundleType = this.config.isCreditCardType ? 'card' : props.type;
        if (sfBundleType.indexOf('sepa') > -1) sfBundleType = 'iban';
        // Add a hash of the origin to ensure urls are different across domains
        const d = btoa(window.location.origin);
        /**
         * Unless we are forcing the use of the compat version via card config
         * - detect Edge vn \<= 18 & IE11 - who don't support TextEncoder; and use this as an indicator to load a different, compatible, version of SF
         */ const needsJWECompatVersion = props.forceCompat ? true : !(typeof window.TextEncoder === 'function');
        const bundleType = `${sfBundleType}${needsJWECompatVersion ? 'Compat' : ''}`; // e.g. 'card' or 'cardCompat'
        this.config.iframeSrc = `${this.config.loadingContext}securedfields/${props.clientKey}/${SF_VERSION}/securedFields.html?type=${bundleType}&d=${d}`;
        // TODO######
        this.config.maskSecurityCode = props.maskSecurityCode;
        this.config.disableIOSArrowKeys = props.disableIOSArrowKeys;
    }

    const noop = () => {};
    function configureCallbacks(callbacksObj = {}) {
        // --
        this.callbacks.onLoad = callbacksObj.onLoad ? callbacksObj.onLoad : noop;
        this.callbacks.onConfigSuccess = callbacksObj.onConfigSuccess ? callbacksObj.onConfigSuccess : noop;
        this.callbacks.onFieldValid = callbacksObj.onFieldValid ? callbacksObj.onFieldValid : noop;
        this.callbacks.onAllValid = callbacksObj.onAllValid ? callbacksObj.onAllValid : noop;
        this.callbacks.onBrand = callbacksObj.onBrand ? callbacksObj.onBrand : noop;
        this.callbacks.onError = callbacksObj.onError ? callbacksObj.onError : noop;
        this.callbacks.onFocus = callbacksObj.onFocus ? callbacksObj.onFocus : noop;
        this.callbacks.onBinValue = callbacksObj.onBinValue ? callbacksObj.onBinValue : noop;
        this.callbacks.onAutoComplete = callbacksObj.onAutoComplete ? callbacksObj.onAutoComplete : noop;
        this.callbacks.onAdditionalSFConfig = callbacksObj.onAdditionalSFConfig ? callbacksObj.onAdditionalSFConfig : noop;
        this.callbacks.onAdditionalSFRemoved = callbacksObj.onAdditionalSFRemoved ? callbacksObj.onAdditionalSFRemoved : noop;
        this.callbacks.onTouchstartIOS = callbacksObj.onTouchstartIOS ? callbacksObj.onTouchstartIOS : noop;
    }

    const makeCallbackObj = ({ fieldType, encryptedFieldName, uuid, isValid, txVariant, rootNode }) => ({
        fieldType,
        encryptedFieldName,
        uid: uuid,
        valid: isValid,
        type: txVariant,
        rootNode
    });
    const makeCallbackObjectsValidation = ({ fieldType, txVariant, rootNode }) => {
        // - create callback objects to report the changed valid state of the field
        const isExpiryDateField = fieldType === ENCRYPTED_EXPIRY_DATE;
        const callbackObjectsArr = [];
        const sepExpiryDateNames = ['encryptedExpiryMonth', 'encryptedExpiryYear'];
        let i;
        let uuid;
        let encryptedType;
        let encryptedFieldName;
        // For expiryDate field we need to remove 2 DOM elements & create 2 objects (relating to month & year)
        // - for everything else we just need to remove 1 element & create 1 callback object
        const totalFields = isExpiryDateField ? 2 : 1;
        for (i = 0; i < totalFields; i += 1) {
            encryptedType = isExpiryDateField ? sepExpiryDateNames[i] : fieldType; // encryptedCardNumber, encryptedSecurityCode, encryptedExpiryMonth, encryptedExpiryYear
            uuid = `${txVariant}-encrypted-${encryptedType}`; // card-encrypted-encryptedCardNumber, card-encrypted-encryptedSecurityCode, card-encrypted-encryptedExpiryMonth, card-encrypted-encryptedExpiryYear
            encryptedFieldName = isExpiryDateField ? encryptedType : fieldType; // encryptedCardNumber, encryptedSecurityCode, encryptedExpiryMonth, encryptedExpiryYear
            // Create objects to broadcast valid state
            // const callbackObj: CbObjOnFieldValid = makeCallbackObj(pFieldType, encryptedFieldName, uuid, false, pTxVariant, pRootNode, null);
            const callbackObj = makeCallbackObj({
                fieldType,
                encryptedFieldName,
                uuid,
                isValid: false,
                txVariant,
                rootNode
            });
            callbackObjectsArr.push(callbackObj);
        }
        return callbackObjectsArr;
    };
    const makeCallbackObjectsEncryption = ({ fieldType, txVariant, rootNode, encryptedObjArr }) => {
        let i;
        let uuid;
        let encryptedObj;
        let encryptedFieldName;
        let encryptedBlob;
        const callbackObjectsArr = [];
        for (i = 0; i < encryptedObjArr.length; i += 1) {
            encryptedObj = encryptedObjArr[i];
            encryptedFieldName = encryptedObj.encryptedFieldName;
            uuid = `${txVariant}-encrypted-${encryptedFieldName}`;
            encryptedBlob = encryptedObj.blob;
            // Create objects to broadcast valid state
            // const callbackObj: CbObjOnFieldValid = makeCallbackObj(fieldType, encryptedFieldName, uuid, true, txVariant, rootNode, code);
            const callbackObj = makeCallbackObj({
                fieldType,
                encryptedFieldName,
                uuid,
                isValid: true,
                txVariant,
                rootNode
            });
            callbackObj.blob = encryptedBlob;
            callbackObjectsArr.push(callbackObj);
        }
        return callbackObjectsArr;
    };

    const select = (root, selector) => {
        let array = [];
        if (root) {
            // Convert NodeList to array
            if (typeof root.querySelectorAll === 'function') {
                array = [].slice.call(root.querySelectorAll(selector));
            }
        }
        return array;
    };
    const selectOne = (root, selector) => {
        if (!root) {
            return undefined;
        }
        return root.querySelector(selector);
    };
    const getAttribute = (node, attribute) => {
        if (!node) {
            return undefined;
        }
        return node.getAttribute(attribute);
    };
    const on = (node, event, callback, useCapture) => {
        if (typeof node.addEventListener === 'function') {
            node.addEventListener(event, callback, useCapture);
            return;
        }
        if (node.attachEvent) {
            node.attachEvent(`on${event}`, callback);
            return;
        }
        throw new Error(`: Unable to bind ${event}-event`);
    };
    const off = (node, event, callback, useCapture) => {
        if (typeof node.addEventListener === 'function') {
            node.removeEventListener(event, callback, useCapture);
        } else if (node.attachEvent) {
            node.detachEvent(`on${event}`, callback);
        } else {
            throw new Error(`: Unable to unbind ${event}-event`);
        }
    };
    /**
     * @internal
     * Removes all children elements of the given node.
     *
     * @param node -
     */ const removeAllChildren = node => {
        while (node.firstChild) {
            node.removeChild(node.firstChild);
        }
    };

    // Adds hidden input to parent form element.
    // This input has a attribute 'name' whose value equals a field-type e.g. encryptedCardNumber
    // and an attribute 'value' whose value is the encrypted data blob for that field
    const addEncryptedElement = (pForm, pName, pData, pId) => {
        let element = selectOne(pForm, `#${pId}`);
        if (!element) {
            element = document.createElement('input');
            element.type = 'hidden';
            element.name = pName;
            element.id = pId;
            pForm.appendChild(element);
        }
        element.setAttribute('value', pData);
    };
    const removeEncryptedElement = (pParentForm, uuid) => {
        const encryptedElem = selectOne(pParentForm, `#${uuid}`);
        if (encryptedElem) {
            pParentForm.removeChild(encryptedElem);
        }
    };
    const addEncryptedElements = (pEncryptedObjArr, pTxVariant, pParentForm) => {
        let i;
        let uuid;
        let encryptedFieldName;
        let encryptedBlob;
        // Loop through array of objects with encrypted blobs - normally only contains one object
        // but in case of combined encryptedExpiryDate field will contain 2 objects: one each for month & year
        for (i = 0; i < pEncryptedObjArr.length; i += 1) {
            const encryptedObj = pEncryptedObjArr[i];
            encryptedFieldName = encryptedObj.encryptedFieldName;
            uuid = `${pTxVariant}-encrypted-${encryptedFieldName}`;
            encryptedBlob = encryptedObj.blob;
            addEncryptedElement(pParentForm, encryptedFieldName, encryptedBlob, uuid);
        }
    };

    const processErrors = (pFeedbackObj, securedField, type, rootNode, callbackFn) => {
        if (!hasOwnProperty(pFeedbackObj, 'error')) return null;
        const fieldType = pFeedbackObj.fieldType;
        const field = securedField;
        // Initialise error callback object
        const dataObj = {
            rootNode,
            fieldType,
            error: null,
            type: null
        };
        const isError = pFeedbackObj.error !== '';
        // Error is empty string && field is not already in error: do nothing - don't need to propagate this non-error if the field wasn't already in error
        // This situation arises when we encrypt a field and trigger an "error clearing" event
        // It also arises when an unsupportedCard (re. binLookup) is entered and the shopper continues to interact with the field (adding or deleting digits)
        if (!isError && !field.hasError) {
            return null;
        }
        // TODO - probably not needed after sf 3.5.3 is available
        // Ignore other errors whilst the field is in an "unsupportedCard" error state
        if (field.errorType === ERROR_CODES[ERROR_MSG_UNSUPPORTED_CARD_ENTERED]) {
            // Temporary - for testing in development after sf 3.5.3 is ready
            // if (undefined === 'development') {
            //     throw new Error('processErrors:: RETURNING BECAUSE errorType = "unsupported card"');
            // }
            return null;
        }
        // TODO - end
        // Add props to error callback object
        dataObj.error = isError ? pFeedbackObj.error : '';
        dataObj.type = type;
        // Set error state & type on securedField instance
        field.hasError = isError;
        field.errorType = dataObj.error;
        callbackFn(dataObj);
        return dataObj;
    };

    function handleValidation(pFeedbackObj) {
        // --
        let callbackObjectsArr;
        const fieldType = pFeedbackObj.fieldType;
        const isGenericCard = this.state.type === 'card';
        /**
         * CHECK IF CVC IS OPTIONAL
         */ // Brand information (from setting the CC number) now contains information about
        // whether cvc is optional for that brand e.g. maestro
        // If it is optional, and we're dealing with the generic card type,
        // (re)set the property that indicates this (in the CVC SecuredField instance)
        if (
            isGenericCard &&
            hasOwnProperty(pFeedbackObj, 'cvcPolicy') &&
            existy(pFeedbackObj.cvcPolicy) &&
            hasOwnProperty(this.state.securedFields, ENCRYPTED_SECURITY_CODE)
        ) {
            this.state.securedFields[ENCRYPTED_SECURITY_CODE].cvcPolicy = pFeedbackObj.cvcPolicy;
        }
        /**
         * PROCESS & BROADCAST ERRORS (OR LACK OF)
         */ processErrors(pFeedbackObj, this.state.securedFields[fieldType], this.state.type, this.props.rootNode, this.callbacks.onError);
        /**
         * REMOVE ANY EXISTING ENCRYPTED ELEMENT & CHECK VALIDITY OF THE FORM AS A WHOLE
         */ // If the field was previously encrypted...
        if (this.state.securedFields[fieldType].isEncrypted) {
            // callbackObjectsArr will be an array containing 1 or 2 objects that need to be broadcast
            callbackObjectsArr = makeCallbackObjectsValidation({
                fieldType,
                txVariant: this.state.type,
                rootNode: this.props.rootNode
            });
            // Add the endDigits to the object we send to the onFieldValid callback
            // NOTE: in this case (validation) this will be an empty string
            if (fieldType === ENCRYPTED_CARD_NUMBER) {
                callbackObjectsArr[0].endDigits = '';
            }
            for (let i = 0, len = callbackObjectsArr.length; i < len; i += 1) {
                // Remove DOM elements
                if (this.config.allowedDOMAccess) {
                    removeEncryptedElement(this.props.rootNode, callbackObjectsArr[i].uid);
                }
                // ...BROADCAST VALID STATE OF INDIVIDUAL INPUTS
                this.callbacks.onFieldValid(callbackObjectsArr[i]);
            }
            // Remove the field's encrypted state
            this.state.securedFields[fieldType].isEncrypted = false;
        }
        /**
         * STORE & BROADCAST VALID STATE OF THE FORM AS A WHOLE
         */ this.validateForm();
        /**
         * PROCESS & BROADCAST CARD BRANDS
         */ if (hasOwnProperty(pFeedbackObj, 'brand')) {
            this.processBrand(pFeedbackObj);
        }
    }

    const postMessageToIframe = (pDataObj, pIframeObj, pLoadingContext) => {
        // Check that an iframe object exists for this fieldType... in some cases the iframe might not exist
        // e.g. bcmc which has no cvc field so e.g. a call to setFocus on the cvc field is not possible
        if (pIframeObj) {
            const dataObjStr = JSON.stringify(pDataObj);
            pIframeObj.postMessage(dataObjStr, pLoadingContext);
        }
    };

    /**
     * Retrieves the iframe, stored by field type, & returns it's contentWindow
     */ function getIframeContentWin(csfState, fieldType) {
        return csfState.securedFields[fieldType]?.iframeContentWindow || null;
    }

    function handleEncryption(pFeedbackObj) {
        // EXTRACT VARS
        const fieldType = pFeedbackObj.fieldType;
        // SET FOCUS ON OTHER INPUT - If user has just typed a correct expiryDate - set focus on the cvc field OR typed a correct expiryMonth - focus on year field
        if (this.config.autoFocus) {
            if (pFeedbackObj.type === 'year' || fieldType === ENCRYPTED_EXPIRY_YEAR) {
                this.setFocusOnFrame(ENCRYPTED_SECURITY_CODE);
            }
            if (fieldType === ENCRYPTED_EXPIRY_MONTH) {
                this.setFocusOnFrame(ENCRYPTED_EXPIRY_YEAR);
            }
        }
        //--
        let i;
        let len;
        const encryptedObjArr = pFeedbackObj[fieldType];
        // Set boolean saying this securedField is in an encryptedState
        this.state.securedFields[fieldType].isEncrypted = true;
        // ADD HIDDEN INPUT TO PARENT FORM ELEMENT, if allowed
        if (this.config.allowedDOMAccess) {
            addEncryptedElements(encryptedObjArr, this.state.type, this.props.rootNode);
        }
        // REMOVE ANY ERRORS ON FIELD e.g. was a full number that failed the luhnCheck, then we corrected the number and now it passes
        processErrors(
            {
                error: '',
                fieldType
            },
            this.state.securedFields[fieldType],
            this.state.type,
            this.props.rootNode,
            this.callbacks.onError
        );
        // MAKE ENCRYPTION OBJECTS FOR EACH OF THE INDIVIDUAL INPUTS
        // N.B. when considering "individual inputs" we are concerned with the 4 fields that the checkoutAPI expects to receive for a credit card payment:
        // encryptedCardNumber, encryptedSecurityCode, encryptedExpiryMonth, encryptedExpiryYear
        const callbackObjectsArr = makeCallbackObjectsEncryption({
            fieldType,
            txVariant: this.state.type,
            rootNode: this.props.rootNode,
            encryptedObjArr
        });
        // For standalone month field
        if (fieldType === ENCRYPTED_EXPIRY_MONTH) {
            if (hasOwnProperty(this.state.securedFields, ENCRYPTED_EXPIRY_YEAR)) {
                const dataObj = {
                    txVariant: this.state.type,
                    code: pFeedbackObj.code,
                    blob: encryptedObjArr[0].blob,
                    fieldType: ENCRYPTED_EXPIRY_YEAR,
                    numKey: this.state.securedFields[ENCRYPTED_EXPIRY_YEAR].numKey
                };
                postMessageToIframe(dataObj, getIframeContentWin(this.state, ENCRYPTED_EXPIRY_YEAR), this.config.loadingContext);
            }
        }
        // For number field - add the endDigits to the encryption object
        if (fieldType === ENCRYPTED_CARD_NUMBER && truthy(pFeedbackObj.endDigits)) {
            callbackObjectsArr[0].endDigits = pFeedbackObj.endDigits;
        }
        // For number field - add the 8 digit issuerBin to the encryption object
        if (fieldType === ENCRYPTED_CARD_NUMBER && truthy(pFeedbackObj.issuerBin)) {
            callbackObjectsArr[0].issuerBin = +pFeedbackObj.issuerBin;
        }
        // BROADCAST VALID STATE OF INDIVIDUAL INPUTS - passing the encryption objects
        for (i = 0, len = callbackObjectsArr.length; i < len; i += 1) {
            this.callbacks.onFieldValid(callbackObjectsArr[i]);
        }
        //--------------------------------------------
        // STORE & BROADCAST VALID STATE OF THE FORM AS A WHOLE ///////
        this.validateForm();
    }

    let shortestPermittedCardLength;
    const CardType = {};
    CardType.__NO_BRAND = 'noBrand';
    CardType.cards = [];
    CardType.cards.push({
        cardType: 'mc',
        startingRules: [51, 52, 53, 54, 55, 22, 23, 24, 25, 26, 27],
        permittedLengths: [16],
        pattern: /^(5[1-5][0-9]{0,14}|2[2-7][0-9]{0,14})$/,
        securityCode: 'CVC'
    });
    CardType.cards.push({
        cardType: 'visadankort',
        startingRules: [4571],
        permittedLengths: [16],
        pattern: /^(4571)[0-9]{0,12}$/
    });
    CardType.cards.push({
        cardType: 'visa',
        startingRules: [4],
        permittedLengths: [13, 16, 19],
        pattern: /^4[0-9]{0,18}$/,
        securityCode: 'CVV'
    });
    CardType.cards.push({
        cardType: 'amex',
        startingRules: [34, 37],
        permittedLengths: [15],
        pattern: /^3[47][0-9]{0,13}$/,
        securityCode: 'CID'
    });
    CardType.cards.push({
        cardType: 'diners',
        startingRules: [36],
        permittedLengths: [14],
        pattern: /^(36)[0-9]{0,12}$/
    });
    CardType.cards.push({
        cardType: 'maestrouk',
        startingRules: [6759],
        permittedLengths: [16, 18, 19],
        pattern: /^(6759)[0-9]{0,15}$/
    });
    CardType.cards.push({
        cardType: 'solo',
        startingRules: [6767],
        permittedLengths: [16, 18, 19],
        pattern: /^(6767)[0-9]{0,15}$/
    });
    CardType.cards.push({
        cardType: 'laser',
        startingRules: [6304, 6706, 677117, 677120],
        permittedLengths: [16, 17, 18, 19],
        pattern: /^(6304|6706|6709|6771)[0-9]{0,15}$/,
        cvcPolicy: 'optional'
    });
    CardType.cards.push({
        cardType: 'discover',
        startingRules: [6011, 644, 645, 646, 647, 648, 649, 65],
        permittedLengths: [16],
        pattern: /^(6011[0-9]{0,12}|(644|645|646|647|648|649)[0-9]{0,13}|65[0-9]{0,14})$/
    });
    CardType.cards.push({
        cardType: 'jcb',
        startingRules: [3528, 3529, 353, 354, 355, 356, 357, 358],
        permittedLengths: [16, 19],
        pattern: /^(352[8,9]{1}[0-9]{0,15}|35[4-8]{1}[0-9]{0,16})$/,
        securityCode: 'CAV'
    });
    CardType.cards.push({
        cardType: 'bcmc',
        startingRules: [6703, 479658, 606005],
        permittedLengths: [16, 17, 18, 19],
        pattern: /^((6703)[0-9]{0,15}|(479658|606005)[0-9]{0,13})$/,
        cvcPolicy: 'hidden'
    });
    CardType.cards.push({
        cardType: 'bijcard',
        startingRules: [5100081],
        permittedLengths: [16],
        pattern: /^(5100081)[0-9]{0,9}$/
    });
    CardType.cards.push({
        cardType: 'dankort',
        startingRules: [5019],
        permittedLengths: [16],
        pattern: /^(5019)[0-9]{0,12}$/
    });
    CardType.cards.push({
        cardType: 'hipercard',
        startingRules: [606282],
        permittedLengths: [16],
        pattern: /^(606282)[0-9]{0,10}$/
    });
    // Moved above maestro (from position below uatp) to stop maestro being recognised over cup
    CardType.cards.push({
        cardType: 'cup',
        startingRules: [62, 81],
        permittedLengths: [14, 15, 16, 17, 18, 19],
        pattern: /^(62|81)[0-9]{0,17}$/
    }); // orig & android v1 + modified to include our test cards (81...)
    CardType.cards.push({
        cardType: 'maestro',
        startingRules: [50, 56, 57, 58, 6],
        permittedLengths: [16, 17, 18, 19],
        pattern: /^(5[0|6-8][0-9]{0,17}|6[0-9]{0,18})$/,
        cvcPolicy: 'optional'
    });
    CardType.cards.push({
        cardType: 'elo',
        // prettier-ignore
        startingRules: [
        506699,
        50670,
        50671,
        50672,
        50673,
        50674,
        50675,
        50676,
        506770,
        506771,
        506772,
        506773,
        506774,
        506775,
        506776,
        506777,
        506778,
        401178,
        438935,
        451416,
        457631,
        457632,
        504175,
        627780,
        636297,
        636368
    ],
        permittedLengths: [16],
        // prettier-ignore
        pattern: /^((((506699)|(506770)|(506771)|(506772)|(506773)|(506774)|(506775)|(506776)|(506777)|(506778)|(401178)|(438935)|(451416)|(457631)|(457632)|(504175)|(627780)|(636368)|(636297))[0-9]{0,10})|((50676)|(50675)|(50674)|(50673)|(50672)|(50671)|(50670))[0-9]{0,11})$/ // eslint-disable-line max-len
    });
    CardType.cards.push({
        cardType: 'uatp',
        startingRules: [1],
        permittedLengths: [15],
        pattern: /^1[0-9]{0,14}$/,
        cvcPolicy: 'optional'
    });
    CardType.cards.push({
        cardType: 'cartebancaire',
        startingRules: [4, 5, 6],
        permittedLengths: [16],
        pattern: /^[4-6][0-9]{0,15}$/
    });
    CardType.cards.push({
        cardType: 'visaalphabankbonus',
        startingRules: [450903],
        permittedLengths: [16],
        pattern: /^(450903)[0-9]{0,10}$/
    });
    CardType.cards.push({
        cardType: 'mcalphabankbonus',
        startingRules: [510099],
        permittedLengths: [16],
        pattern: /^(510099)[0-9]{0,10}$/
    });
    CardType.cards.push({
        cardType: 'hiper',
        startingRules: [637095, 637568, 637599, 637609, 637612],
        permittedLengths: [16],
        pattern: /^(637095|637568|637599|637609|637612)[0-9]{0,10}$/
    });
    CardType.cards.push({
        cardType: 'oasis',
        startingRules: [982616],
        permittedLengths: [16],
        pattern: /^(982616)[0-9]{0,10}$/,
        cvcPolicy: 'optional'
    });
    CardType.cards.push({
        cardType: 'karenmillen',
        startingRules: [98261465],
        permittedLengths: [16],
        pattern: /^(98261465)[0-9]{0,8}$/,
        cvcPolicy: 'optional'
    });
    CardType.cards.push({
        cardType: 'warehouse',
        startingRules: [982633],
        permittedLengths: [16],
        pattern: /^(982633)[0-9]{0,10}$/,
        cvcPolicy: 'optional'
    });
    CardType.cards.push({
        cardType: 'mir',
        startingRules: [220],
        permittedLengths: [16, 17, 18, 19],
        pattern: /^(220)[0-9]{0,16}$/
    });
    CardType.cards.push({
        cardType: 'codensa',
        startingRules: [590712],
        permittedLengths: [16],
        pattern: /^(590712)[0-9]{0,10}$/
    });
    CardType.cards.push({
        cardType: 'naranja',
        startingRules: [377798, 377799, 402917, 402918, 527571, 527572, 589562],
        permittedLengths: [16, 17, 18, 19],
        pattern: /^(37|40|5[28])([279])\d*$/
    });
    // TODO: 589657 clashes with naranja, rest ok
    CardType.cards.push({
        cardType: 'cabal',
        startingRules: [589657, 600691, 603522, 6042, 6043, 636908],
        permittedLengths: [16, 17, 18, 19],
        pattern: /^(58|6[03])([03469])\d*$/
    });
    CardType.cards.push({
        cardType: 'shopping',
        startingRules: [2799, 589407, 603488],
        permittedLengths: [16, 17, 18, 19],
        pattern: /^(27|58|60)([39])\d*$/
    });
    CardType.cards.push({
        cardType: 'argencard',
        startingRules: [501],
        permittedLengths: [16, 17, 18, 19],
        pattern: /^(50)(1)\d*$/
    }); // NOTE: starting rule changed, from 501105, to not clash with dankort. Plus it now matches its regEx!
    CardType.cards.push({
        cardType: 'troy',
        startingRules: [9792],
        permittedLengths: [16],
        pattern: /^(97)(9)\d*$/
    });
    // TODO: clashes with cabal
    CardType.cards.push({
        cardType: 'forbrugsforeningen',
        startingRules: [600722],
        permittedLengths: [16],
        pattern: /^(60)(0)\d*$/
    });
    CardType.cards.push({
        cardType: 'vpay',
        startingRules: [401, 408, 413, 434, 435, 437, 439, 441, 442, 443, 444, 446, 447, 455, 458, 460, 461, 463, 466, 471, 479, 482, 483, 487],
        permittedLengths: [13, 14, 15, 16, 17, 18, 19],
        pattern: /^(40[1,8]|413|43[4,5]|44[1,2,3,4,6,7]|45[5,8]|46[0,1,3,6]|47[1,9]|48[2,3,7])[0-9]{0,16}$/ // ^(4[0-1|3-8][0-9]{1,17})$
    });
    CardType.cards.push({
        cardType: 'rupay',
        startingRules: [508528],
        permittedLengths: [16],
        // prettier-ignore
        pattern: /^(100003|508(2|[5-9])|60(69|[7-8])|652(1[5-9]|[2-5][0-9]|8[5-9])|65300[3-4]|8172([0-1]|[3-5]|7|9)|817(3[3-8]|40[6-9]|410)|35380([0-2]|[5-6]|9))[0-9]{0,12}$/ // eslint-disable-line max-len
    });
    CardType.cards.push({
        cardType: 'ticket',
        expiryDatePolicy: 'hidden'
    });
    const detectCard = (pCardNumber, pAvailableCards) => {
        let matchedCards;
        let i;
        let len;
        if (pAvailableCards) {
            // Filter CardType.cards down to those that are found in pAvailableCards
            matchedCards = CardType.cards
                .filter(card => pAvailableCards.includes(card.cardType)) // Further filter them to those with a regEx pattern that matches pCardNumber
                .filter(card => hasOwnProperty(card, 'pattern') && pCardNumber.match(card.pattern));
            // If we have matched cards: if there's only one - return it; else return the one with the longest startingRule
            if (matchedCards.length) {
                if (matchedCards.length === 1) {
                    return matchedCards[0];
                }
                // Find longest rule for each matched card & store it as a property on the card
                for (i = 0, len = matchedCards.length; i < len; i += 1) {
                    if (!matchedCards[i].longestRule) {
                        const longestRule = matchedCards[i].startingRules.reduce((a, b) => (a > b ? a : b));
                        // What we actually store is how many chars are in the rule
                        matchedCards[i].longestRule = String(longestRule).length;
                    }
                }
                // Based on each matched cards longest rule - find the card with the longest one!
                return matchedCards.reduce((a, b) => (a.longestRule >= b.longestRule ? a : b));
            }
            return {
                cardType: CardType.__NO_BRAND
            };
        }
        return {
            cardType: CardType.__NO_BRAND
        };
    };
    const detectCardLength = (pCard, pUnformattedVal) => {
        let maxLength;
        let shortenedNewValue;
        let lengthDiff = 0;
        let reachedValidLength = false;
        let unformattedVal = pUnformattedVal;
        // Find the longest of the permitted card number lengths for this card brand
        const maxPermittedLength = pCard.cardType !== CardType.__NO_BRAND ? pCard.permittedLengths[pCard.permittedLengths.length - 1] : 0;
        // If the input value is longer than it's max permitted length then shorten it to that length
        if (maxPermittedLength && unformattedVal > maxPermittedLength) {
            lengthDiff = unformattedVal.length - maxPermittedLength;
            if (lengthDiff > 0) {
                unformattedVal = unformattedVal.substring(0, unformattedVal.length - lengthDiff);
                shortenedNewValue = unformattedVal;
            }
        }
        // If cardNumber has reached one of the cardBrand's 'permitted lengths' - mark it as 'valid'
        pCard.permittedLengths.forEach(pItem => {
            if (unformattedVal.length === pItem) {
                reachedValidLength = true;
            }
        });
        // If cardNumber is as long as the cardBrand's maximum permitted length then set the maxLength var
        if (unformattedVal.length === maxPermittedLength) {
            // Set maxlength to max + the right amount of spaces (one for every 4 digits, but not on the last block)
            const div = Math.floor(unformattedVal.length / 4);
            const mod = unformattedVal.length % 4;
            const numSpaces = mod > 0 ? div : div - 1;
            maxLength = maxPermittedLength + numSpaces;
            if (pCard.cardType.toLowerCase() === 'amex') {
                maxLength = maxPermittedLength + 2; // = 17 = 15 digits with space after 4th & 10th
            }
        }
        return {
            shortenedNewValue,
            maxLength,
            reachedValidLength
        };
    };
    const getShortestPermittedCardLength = () => {
        if (!shortestPermittedCardLength) {
            let permittedLengthsArray = [];
            CardType.cards.forEach(pItem => {
                permittedLengthsArray = permittedLengthsArray.concat(pItem.permittedLengths ?? []);
            });
            shortestPermittedCardLength = Math.min.apply(null, permittedLengthsArray);
        }
        return shortestPermittedCardLength;
    };
    const getCardByBrand = pBrand => {
        const cardType = CardType.cards.filter(card => card.cardType === pBrand);
        return cardType[0];
    };
    const isGenericCardType = type => {
        if (!type) throw new Error('Error: isGenericCardType: type param has not been specified');
        return type === 'card' || type === 'scheme';
    };
    var cardType = {
        detectCard,
        detectCardLength,
        getShortestPermittedCardLength,
        getCardByBrand,
        isGenericCardType,
        __NO_BRAND: CardType.__NO_BRAND,
        allCards: CardType.cards
    };

    function createIframe({
        src,
        title = 'iframe element',
        policy = 'origin',
        styleStr = 'border: none; height:100%; width:100%; overflow:hidden;'
    }) {
        const iframeEl = document.createElement('iframe');
        iframeEl.setAttribute('src', src);
        iframeEl.setAttribute('class', 'js-iframe');
        // For a11y some merchants want to be able to remove the title element on the iframe - seeing the info it carries as extraneous for the screenreader
        if (title === '' || title.trim().length === 0 || title === 'none') {
            iframeEl.setAttribute('role', 'presentation');
        } else {
            iframeEl.setAttribute('title', title);
        }
        iframeEl.setAttribute('allowtransparency', 'true');
        iframeEl.setAttribute('style', styleStr);
        iframeEl.setAttribute('referrerpolicy', policy); // Necessary for ClientKey to work
        const noIframeElContent = document.createTextNode('<p>Your browser does not support iframes.</p>');
        iframeEl.appendChild(noIframeElContent);
        return iframeEl;
    }

    const originCheckPassed = (event, pLoadingContext, pShowWarnings) => {
        const origin = event.origin; // || event.originalEvent.origin;
        const isCheckoutUrl = pLoadingContext.indexOf('/checkoutshopper/');
        let adyenDomain = isCheckoutUrl > -1 ? pLoadingContext.substring(0, isCheckoutUrl) : pLoadingContext;
        // Strip trailing /
        const lastCharIndex = adyenDomain.length - 1;
        if (adyenDomain.charAt(lastCharIndex) === '/') {
            adyenDomain = adyenDomain.substring(0, lastCharIndex);
        }
        if (origin !== adyenDomain) {
            if (pShowWarnings) {
                warn(
                    'WARNING postMessageValidation: postMessage listener for iframe::origin mismatch!\n Received message with origin:',
                    origin,
                    'but the only allowed origin for messages to CSF is',
                    adyenDomain
                );
                warn('### event.data=', event.data);
            }
            return false;
        }
        return true;
    };
    // Catch webpack postMessages responses
    const isWebpackPostMsg = event => event.data && event.data.type && typeof event.data.type === 'string' && event.data.type.indexOf('webpack') > -1;
    // Catch webpack postMessages responses
    const isChromeVoxPostMsg = event => event.data && typeof event.data === 'string' && event.data.indexOf('cvox') > -1;

    class AbstractSecuredField {
        sfConfig;
        fieldType;
        iframeSrc;
        loadingContext;
        holderEl;
        iframeRef;
        loadToConfigTimeout;
        // From getters/setters with the same name
        _errorType;
        _hasError;
        _isValid;
        _cvcPolicy;
        _expiryDatePolicy;
        _iframeContentWindow;
        _isEncrypted;
        _numKey;
        _iframeOnLoadListener;
        _postMessageListener;
        // Callback fns assigned via public functions
        onIframeLoadedCallback;
        onConfigCallback;
        onEncryptionCallback;
        onValidationCallback;
        onFocusCallback;
        onBinValueCallback;
        onTouchstartCallback;
        onShiftTabCallback;
        onAutoCompleteCallback;
        constructor() {
            this.sfConfig = {};
        }
    }

    /**
     * Lookup translated values for the placeholders for the SecuredFields
     * and return an object with these mapped to the data-cse value of the SecuredField
     */ const resolvePlaceholders = i18n => {
        const phObj = {
            [ENCRYPTED_CARD_NUMBER]: i18n.get && i18n.get('creditCard.numberField.placeholder'),
            [ENCRYPTED_EXPIRY_DATE]: i18n.get && i18n.get('creditCard.expiryDateField.placeholder'),
            [ENCRYPTED_EXPIRY_MONTH]: i18n.get && i18n.get('creditCard.expiryDateField.month.placeholder'),
            [ENCRYPTED_EXPIRY_YEAR]: i18n.get && i18n.get('creditCard.expiryDateField.year.placeholder'),
            [ENCRYPTED_SECURITY_CODE]: i18n.get && i18n.get('creditCard.cvcField.placeholder'),
            [ENCRYPTED_SECURITY_CODE_3_DIGITS]: i18n.get && i18n.get('creditCard.cvcField.placeholder.3digits'),
            [ENCRYPTED_SECURITY_CODE_4_DIGITS]: i18n.get && i18n.get('creditCard.cvcField.placeholder.4digits'),
            [ENCRYPTED_PWD_FIELD]: i18n.get && i18n.get('creditCard.encryptedPassword.placeholder'),
            [ENCRYPTED_BANK_ACCNT_NUMBER_FIELD]: i18n.get && i18n.get('ach.accountNumberField.placeholder'),
            [ENCRYPTED_BANK_LOCATION_FIELD]: i18n.get && i18n.get('ach.accountLocationId.placeholder')
        };
        // For ach - if the merchant has specified a placeholder (which can only be done through a translations object, it doesn't exist in the translations files)
        // then use it... else default to nothing
        if (phObj[ENCRYPTED_BANK_ACCNT_NUMBER_FIELD] === 'ach.accountNumberField.placeholder') {
            phObj[ENCRYPTED_BANK_ACCNT_NUMBER_FIELD] = '';
        }
        if (phObj[ENCRYPTED_BANK_LOCATION_FIELD] === 'ach.accountLocationId.placeholder') {
            phObj[ENCRYPTED_BANK_LOCATION_FIELD] = '';
        }
        return phObj;
    };
    /**
     * Used by SecuredFieldsProviderHandlers
     */ const getCardImageUrl$1 = (brand, resources) => {
        const type = brand === 'card' ? 'nocard' : brand || 'nocard';
        const imageOptions = {
            type,
            extension: 'svg'
        };
        return resources.getImage(imageOptions)(type);
    };
    // REGULAR "UTIL" UTILS
    /**
     * Checks if `prop` is classified as an `Array` primitive or object.
     * @internal
     * @param prop - The value to check.
     * @returns Returns `true` if `prop` is correctly classified, else `false`.
     * @example
     * ```
     * isArray([1, 2, 3]);
     * // => true
     *
     * isArray(1);
     * // => false
     * ```
     */ function isArray(prop) {
        return typeof prop === 'object' && prop !== null && Object.prototype.toString.call(prop) === '[object Array]';
    }
    /**
     * 'Destructures' properties from object - returns a new object only containing those properties that were asked for (including if those properties
     * have values that are falsy: null, undefined, false, '').
     *
     * @param args - property names to select: can be either 'regular' arguments (comma separated list) or an array
     * @returns - an object with a function 'from' that accepts a single argument - the object from which to choose properties.
     * This function returns a new object - a copy of the original but only including the desired properties
     *
     * @example const strippedObj = pick('cardType', 'securityCode').from(cardObject);
     * @example const strippedObj = pick(['cardType', 'securityCode']).from(cardObject);
     */ function pick(...args) {
        const myArgs = isArray(args[0]) ? args[0] : args;
        return {
            from: obj => {
                // eslint-disable-line
                return myArgs
                    .map(k =>
                        k in obj
                            ? {
                                  [k]: obj[k]
                              }
                            : {}
                    ) // eslint-disable-line
                    .reduce(
                        (res, o) => ({
                            ...res,
                            ...o
                        }),
                        {}
                    );
            }
        };
    }
    /**
     *'Destructures' properties from object, returning a new object containing all the original objects properties except those that were specifically rejected
     *
     * @param args - property names to reject: can be either 'regular' arguments (comma separated list) or an array
     * @returns - an object with a function 'from' that accepts a single argument - the object from which to reject properties.
     * This function returns a new object - a copy of the original but excluding the selected properties
     *
     * @example const strippedObj = reject('permittedLengths', 'pattern', 'startingRules').from(cardObject);
     * @example const strippedObj = reject(['permittedLengths', 'pattern', 'startingRules']).from(cardObject);
     */ function reject(...args) {
        const myArgs = isArray(args[0]) ? args[0] : args;
        return {
            from: obj => {
                const vkeys = Object.keys(obj).filter(k => !myArgs.includes(k));
                return pick(...vkeys).from(obj);
            }
        };
    }

    /**
     * Holds the result of a validation
     */ class ValidationRuleResult {
        shouldValidate;
        isValid;
        errorMessage;
        constructor(rule, value, mode, context) {
            this.shouldValidate = rule.modes.includes(mode);
            this.isValid = rule.validate(value, context);
            this.errorMessage = rule.errorMessage;
        }
        /**
         * Whether the validation is considered an error.
         * A field is only considered to be an error if the validation rule applies to the current mode i.e. 'blur' or 'input'.
         * Also, if a validation function returns a null value e.g. when the field is empty, then the field will not be considered to be in error
         * unless the whole form is being validated
         */ hasError(isValidatingForm = false) {
            return isValidatingForm ? !this.isValid && this.shouldValidate : this.isValid != null && !this.isValid && this.shouldValidate;
        }
    }

    /**
     * Access items stored in the ERROR_CODES object by either sending in the key - in which case you get the value
     * or by sending in the value - in which case you get the key
     * @param keyOrValue - key (or value) by which to retrieve the corresponding value (or key)
     */ const getError = keyOrValue => {
        // Retrieve value
        let rtnVal = ERROR_CODES[keyOrValue];
        if (rtnVal) return rtnVal;
        // Retrieve key
        rtnVal = Object.keys(ERROR_CODES).find(key => ERROR_CODES[key] === keyOrValue);
        if (rtnVal) return rtnVal;
        // Neither exist
        return keyOrValue;
    };
    const addAriaErrorTranslationsObject = i18n => {
        const errorKeys = Object.keys(ERROR_CODES);
        const transObj = errorKeys.reduce((acc, item) => {
            const value = ERROR_CODES[item];
            // Limit to sf related errors
            if (value.indexOf('sf-') > -1 || value.indexOf('gen.01') > -1) {
                acc[value] = i18n.get(value);
            }
            return acc;
        }, {});
        return transObj;
    };
    /**
     * Adds a new error property to an object, unless it already exists.
     * This error property is an object containing the translated errors, stored by code, that relate to the securedFields
     * @param originalObject - object we want to duplicate and enhance
     * @param i18n - an i18n object to use to get translations
     * @returns a duplicate of the original object with a new property: "error" whose value is a object containing the translated errors
     */ const addErrorTranslationsToObject = (originalObj, i18n) => {
        const nuObj = {
            ...originalObj
        };
        nuObj.error = !nuObj.error ? addAriaErrorTranslationsObject(i18n) : nuObj.error;
        return nuObj;
    };
    /**
     * sortErrorsByLayout - takes a list of errors and a layout, and returns a sorted array of error objects with translated error messages
     *
     * @param errors - an object containing errors, referenced by field type
     * @param layout - a string[] controlling how the output error objects will be ordered. Required when it is known that the way the error object is populated can vary e.g. Card comp, &/or anything with a country selector
     * @param i18n - our internal Language mechanism
     * @param countrySpecificLabels - some errors are region specific, e.g. in the US "postal code" = "zip code", so map the fieldType value accordingly (if it is being added to the errorMessage string)
     * @param fieldTypeMappingFn - a component specific lookup function that will tell us both if we need to prepend the field type to the SR panel message, and, if so, will retrieve the correct translation for the field type
     */ const sortErrorsByLayout = ({ errors, i18n, layout, countrySpecificLabels, fieldTypeMappingFn }) => {
        const SR_INDICATOR_PREFIX = '-sr'; // Useful for testing whether SR is reading out aria-live errors (sr) or aria-describedby ones
        // Create array of error objects, sorted by layout
        const sortedErrors = Object.entries(errors).reduce((acc, [key, value]) => {
            if (value) {
                const errObj = errors[key];
                // console.log('### utils::sortErrorsByLayout:: key', key, 'errObj', errObj);
                /**
                 * Get error codes - these are used if we need to distinguish between showValidation & onBlur errors
                 * - For a ValidationRuleResult or GenericError the error "code" is contained in the errorMessage prop.
                 * - For an SFError the error "code" is contained in the error prop.
                 */ let errorCode;
                if (!(errObj instanceof ValidationRuleResult)) {
                    errorCode = errObj.error; // is SFError
                } else {
                    /** Special handling for Address~postalCode which can have be passed an object in the 'errorMessage' prop containing a country specific error */ if (
                        typeof errObj.errorMessage === 'object'
                    ) {
                        errorCode = errObj.errorMessage.translationKey; // is ValidationRuleResult w. country specific error
                    } else {
                        errorCode = errObj.errorMessage; // is ValidationRuleResult || GenericError || an as yet incorrectly formed error
                    }
                }
                /**
                 * Get corresponding error msg - a translated string we can place into the SRPanel
                 * NOTE: the error object for a secured field already contains the error in a translated form (errorI18n).
                 * For other fields we still need to translate it, so we use the errorMessage prop as a translation key
                 */ let errorMsg;
                if (!(errObj instanceof ValidationRuleResult) && 'errorI18n' in errObj) {
                    errorMsg = errObj.errorI18n + SR_INDICATOR_PREFIX; // is SFError
                } else {
                    /** Special handling for Address~postalCode (see above) */ if (typeof errObj.errorMessage === 'object') {
                        /* prettier-ignore */ errorMsg = `${i18n.get(errObj.errorMessage.translationKey)} ${errObj.errorMessage.translationObject.values.format}${SR_INDICATOR_PREFIX}`; // is ValidationRuleResult  w. country specific error
                    } else {
                        errorMsg = i18n.get(errObj.errorMessage) + SR_INDICATOR_PREFIX; // is ValidationRuleResult || GenericError || an as yet incorrectly formed error
                    }
                }
                let errorMessage = errorMsg;
                /**
                 * For some fields we might need to append the field type to the start of the error message (varies on a component by component basis)
                 * - necessary for a11y, when we know the translated error msg doesn't contain a reference to the field it refers to
                 * TODO - in the future this should be something we can get rid of once we align all our error texts and translations
                 */ if (fieldTypeMappingFn) {
                    const fieldType = fieldTypeMappingFn(key, i18n, countrySpecificLabels); // Get translation for field type
                    if (fieldType) errorMessage = `${fieldType}: ${errorMsg}`;
                }
                acc.push({
                    field: key,
                    errorMessage,
                    errorCode
                });
                if (layout) acc.sort((a, b) => layout.indexOf(a.field) - layout.indexOf(b.field));
            }
            return acc;
        }, []);
        return sortedErrors;
    };
    /**
     * Implemented as a partial, with an object containing the first 6 arguments; then the final argument, errors, is passed to the partial
     *
     * NOTE: using this generic error setting fny is only suitable when errors for the SRPanel are *only* generated by showValidation().
     * When errors are also generated onBlur, as the user leaves the input, the SR message generation becomes more complex - see CardInput as an example
     */ const setSRMessagesFromErrors = ({ i18n, fieldTypeMappingFn, SRPanelRef }, { errors, isValidating, layout, countrySpecificLabels }) => {
        const currentErrorsSortedByLayout = sortErrorsByLayout({
            errors,
            i18n,
            fieldTypeMappingFn,
            countrySpecificLabels,
            layout
        });
        if (currentErrorsSortedByLayout.length) {
            /** If validating i.e. "on submit" type event - then display all errors in the SR panel */ if (isValidating) {
                const errorMsgArr = currentErrorsSortedByLayout.map(errObj => errObj.errorMessage);
                SRPanelRef.setMessages(errorMsgArr);
                const fieldListArr = currentErrorsSortedByLayout.map(errObj => errObj.field);
                return {
                    currentErrorsSortedByLayout,
                    action: ERROR_ACTION_FOCUS_FIELD,
                    fieldToFocus: fieldListArr[0]
                };
            } else {
                SRPanelRef?.setMessages(null);
                return {
                    currentErrorsSortedByLayout,
                    action: ERROR_ACTION_BLUR_SCENARIO
                }; // on blur scenario: not validating but there might be an error, either to set or to clear
            }
        } else {
            SRPanelRef?.setMessages(null); // no errors - so clear SR panel
            return {
                currentErrorsSortedByLayout,
                action: 'none'
            };
        }
    };
    const enhanceErrorObjectKeys = (errorObj, keyPrefix) => {
        if (!errorObj) return null;
        const enhancedObj = Object.entries(errorObj).reduce((acc, [key, value]) => {
            if (value) {
                const newKey = `${keyPrefix}${key}`;
                acc[newKey] = value;
            }
            return acc;
        }, {});
        return enhancedObj;
    };

    /**
     * Checks if the merchant has defined an ariaConfig object and if so enhances it with a iframeTitle and label property, if they don't already exist.
     * If the ariaConfig object doesn't exist at all we create one with these 2 properties.
     * The iframeTitle and label properties, where they don't previously exist are populated with values read from the translation file.
     * In both cases we then add an error object containing the possible errors for any securedField read from the translation file and stored under error-codes
     */ function processAriaConfig(configObj, fieldType, i18n) {
        // txVariant can be the scheme name (VISA, Mastercard...) so we put all of them under creditCard
        const type = ['ach', 'giftcard'].includes(configObj.txVariant) ? configObj.txVariant : 'creditCard';
        // Get translation for iframeTitle
        const iframeTitle = i18n.get(`${type}.${fieldType}.aria.iframeTitle`);
        // Get translation for aria label
        const label = i18n.get(`${type}.${fieldType}.aria.label`);
        // Get lang property
        const lang = i18n.locale;
        // Ceate a new object with the iframeTitle & label values from translation file
        const ariaFieldConfigObj = {
            iframeTitle,
            label
        };
        // Add error translations object
        const ariaFieldConfigWithTranslatedErrors = addErrorTranslationsToObject(ariaFieldConfigObj, i18n);
        // Create a new aria config object keeping the old entries and adding a new one for this field
        // N.B. need to do this deconstruction of the original aria config object to break existing refs & avoid getting an "accumulated" object
        return {
            ...(lang && {
                lang
            }),
            [fieldType]: ariaFieldConfigWithTranslatedErrors
        };
    }

    /**
     * Create placeholders with a value from the relevant translation file
     */ function processPlaceholders(configObj, fieldType, i18n) {
        const type = configObj.txVariant;
        const resolvedPlaceholders = resolvePlaceholders(i18n);
        return {
            // Non-SecurityCode fields
            ...(fieldType !== ENCRYPTED_SECURITY_CODE && {
                [fieldType]: resolvedPlaceholders[fieldType]
            }),
            // Gift cards
            ...(fieldType === ENCRYPTED_SECURITY_CODE &&
                type === GIFT_CARD && {
                    [fieldType]: resolvedPlaceholders[fieldType]
                }),
            // Credit card CVC field
            ...(fieldType === ENCRYPTED_SECURITY_CODE &&
                type !== GIFT_CARD && {
                    [ENCRYPTED_SECURITY_CODE_3_DIGITS]: resolvedPlaceholders[ENCRYPTED_SECURITY_CODE_3_DIGITS],
                    [ENCRYPTED_SECURITY_CODE_4_DIGITS]: resolvedPlaceholders[ENCRYPTED_SECURITY_CODE_4_DIGITS]
                })
        };
    }

    class SecuredField extends AbstractSecuredField {
        // --
        constructor(pSetupObj, i18n) {
            super();
            // List of props from setup object not required, or not directly required (e.g. cvcPolicy), in the iframe config object
            const deltaPropsArr = ['fieldType', 'iframeSrc', 'cvcPolicy', 'expiryDatePolicy', 'loadingContext', 'holderEl'];
            // Copy passed setup object values to this.sfConfig...
            const configVarsFromSetUpObj = reject(deltaPropsArr).from(pSetupObj);
            // ...breaking references on iframeUIConfig object so we can overwrite its properties in each securedField instance
            this.sfConfig = {
                ...this.sfConfig,
                ...configVarsFromSetUpObj,
                iframeUIConfig: {
                    ...configVarsFromSetUpObj.iframeUIConfig
                }
            };
            // Copy passed setup object values to this
            const thisVarsFromSetupObj = pick(deltaPropsArr).from(pSetupObj);
            this.fieldType = thisVarsFromSetupObj.fieldType;
            this.cvcPolicy = thisVarsFromSetupObj.cvcPolicy;
            this.expiryDatePolicy = thisVarsFromSetupObj.expiryDatePolicy;
            this.iframeSrc = thisVarsFromSetupObj.iframeSrc;
            this.loadingContext = thisVarsFromSetupObj.loadingContext;
            this.holderEl = thisVarsFromSetupObj.holderEl;
            // Initiate values through setters
            this.isValid = false;
            this.iframeContentWindow = null;
            this.numKey = generateRandomNumber();
            this.isEncrypted = false;
            this.hasError = false;
            this.errorType = '';
            return this.init(i18n);
        }
        init(i18n) {
            /**
             * Ensure all fields have a related ariaConfig object containing, at minimum, an iframeTitle property and a (translated) errors object
             */ const processedAriaConfig = processAriaConfig(this.sfConfig, this.fieldType, i18n);
            // Set result back onto config object
            this.sfConfig.iframeUIConfig.ariaConfig = processedAriaConfig;
            /**
             * Ensure that if a placeholder hasn't been set for a field then it gets a default, translated, one
             */ const processedPlaceholders = processPlaceholders(this.sfConfig, this.fieldType, i18n);
            // Set result back onto config object
            this.sfConfig.iframeUIConfig.placeholders = processedPlaceholders;
            /**
             * Configure, create & reference iframe and add load listener
             */ const iframeConfig = {
                src: this.iframeSrc,
                title: processedAriaConfig[this.fieldType].iframeTitle,
                policy: 'origin'
            };
            const iframeEl = createIframe(iframeConfig);
            // Place the iframe into the holder
            this.holderEl.appendChild(iframeEl);
            // Now examine the holder to get an actual DOM node
            const iframe = selectOne(this.holderEl, '.js-iframe');
            if (iframe) {
                this.iframeContentWindow = iframe.contentWindow;
                // Create reference to bound fn (see getters/setters for binding)
                this.iframeOnLoadListener = this.iframeOnLoadListenerFn;
                on(iframe, 'load', this.iframeOnLoadListener, false);
            }
            this.iframeRef = iframe;
            return this;
        }
        iframeOnLoadListenerFn() {
            // Create reference to bound fn (see getters/setters for binding)
            this.postMessageListener = this.postMessageListenerFn;
            // Add general listener for 'message' EVENT - the event that 'powers' postMessage
            on(window, 'message', this.postMessageListener, false);
            // Create and send config object to iframe
            const configObj = {
                fieldType: this.fieldType,
                extraFieldData: this.sfConfig.extraFieldData,
                uid: this.sfConfig.uid,
                cvcPolicy: this.cvcPolicy,
                expiryDatePolicy: this.expiryDatePolicy,
                numKey: this.numKey,
                txVariant: this.sfConfig.txVariant,
                cardGroupTypes: this.sfConfig.cardGroupTypes,
                iframeUIConfig: this.sfConfig.iframeUIConfig,
                sfLogAtStart: this.sfConfig.sfLogAtStart,
                trimTrailingSeparator: this.sfConfig.trimTrailingSeparator,
                isCreditCardType: this.sfConfig.isCreditCardType,
                showWarnings: this.sfConfig.showWarnings,
                legacyInputMode: this.sfConfig.legacyInputMode,
                minimumExpiryDate: this.sfConfig.minimumExpiryDate,
                implementationType: this.sfConfig.implementationType,
                maskSecurityCode: this.sfConfig.maskSecurityCode,
                disableIOSArrowKeys: this.sfConfig.disableIOSArrowKeys
            };
            if (window._b$dl) console.log('### SecuredField:::: onIframeLoaded:: created configObj=', configObj);
            postMessageToIframe(configObj, this.iframeContentWindow, this.loadingContext);
            //--
            // Callback to say iframe loaded
            this.onIframeLoadedCallback();
        }
        postMessageListenerFn(event) {
            // Check message is from expected domain
            if (!originCheckPassed(event, this.loadingContext, this.sfConfig.showWarnings)) {
                return;
            }
            // PARSE DATA OBJECT (thus testing if it is a JSON string) - OR TRY & WORK OUT WHY THE PARSING FAILED
            let feedbackObj;
            try {
                feedbackObj = JSON.parse(event.data);
            } catch (e) {
                // Was the message generated by webpack?
                if (isWebpackPostMsg(event)) {
                    if (this.sfConfig.showWarnings) log('### SecuredField::postMessageListenerFn:: PARSE FAIL - WEBPACK');
                    return;
                }
                // Was the message generated by ChromeVox?
                if (isChromeVoxPostMsg(event)) {
                    if (this.sfConfig.showWarnings) log('### SecuredField::postMessageListenerFn:: PARSE FAIL - CHROMEVOX');
                    return;
                }
                if (this.sfConfig.showWarnings) log('### SecuredField::postMessageListenerFn:: PARSE FAIL - UNKNOWN REASON: event.data=', event.data);
                return;
            }
            // CHECK FOR EXPECTED PROPS
            const hasMainProps = hasOwnProperty(feedbackObj, 'action') && hasOwnProperty(feedbackObj, 'numKey');
            if (!hasMainProps) {
                if (this.sfConfig.showWarnings) warn('WARNING SecuredField :: postMessage listener for iframe :: data mismatch!');
                return;
            }
            if (this.numKey !== feedbackObj.numKey) {
                if (this.sfConfig.showWarnings) {
                    warn(
                        'WARNING SecuredField :: postMessage listener for iframe :: data mismatch! ' +
                            '(Probably a message from an unrelated securedField)'
                    );
                }
                return;
            }
            switch (feedbackObj.action) {
                case 'encryption':
                    this.isValid = true;
                    this.onEncryptionCallback(feedbackObj);
                    break;
                case 'config':
                    if (window._b$dl)
                        console.log('### SecuredField::postMessageListenerFn:: configured - calling onConfigCallback', feedbackObj.fieldType);
                    this.onConfigCallback(feedbackObj);
                    break;
                case 'focus':
                    this.onFocusCallback(feedbackObj);
                    break;
                case 'binValue':
                    this.onBinValueCallback(feedbackObj);
                    break;
                // iOS ONLY - RE. iOS BUGS AROUND BLUR AND FOCUS EVENTS
                case 'touch':
                    this.onTouchstartCallback(feedbackObj);
                    break;
                // Only happens for Firefox & IE <= 11
                case 'shifttab':
                    this.onShiftTabCallback(feedbackObj);
                    break;
                case 'autoComplete':
                    this.onAutoCompleteCallback(feedbackObj);
                    break;
                /**
                 * Validate, because action =
                 *
                 *  'brand'
                 *  'delete'
                 *  'luhnCheck'
                 *              //'incomplete field' (an error that follows from a focus (blur) event)
                 *  'incorrectly filled field' (an error that follows from a focus (blur) event) // NEW
                 *  'numberKeyPressed' (or date-, month-, year-, cvc-, pin-, or iban- KeyPressed)
                 *    - since we have no "error" action "...KeyPressed" is the action type on most error events (other than "incomplete field" or "luhnCheck")
                 *    and often these error events representing the clearing of an existing error
                 */ default:
                    // If we're validation handling (& not encryption handling) field must be invalid
                    this.isValid = false;
                    this.onValidationCallback(feedbackObj);
            }
        }
        destroy() {
            off(window, 'message', this.postMessageListener, false);
            off(this.iframeRef, 'load', this.iframeOnLoadListener, false);
            this.iframeContentWindow = null;
            removeAllChildren(this.holderEl);
        }
        /**
         * Returns whether the securedField is hidden OR whether it is optional and not in error
         */ isOptionalOrHidden() {
            if (this.fieldType === ENCRYPTED_EXPIRY_DATE || this.fieldType === ENCRYPTED_EXPIRY_MONTH || this.fieldType === ENCRYPTED_EXPIRY_YEAR) {
                switch (this.expiryDatePolicy) {
                    case DATE_POLICY_HIDDEN:
                        return true;
                    case DATE_POLICY_OPTIONAL:
                        return !this.hasError;
                    default:
                        return false;
                }
            }
            if (this.fieldType === ENCRYPTED_SECURITY_CODE) {
                switch (this.cvcPolicy) {
                    case CVC_POLICY_HIDDEN:
                        return true;
                    case CVC_POLICY_OPTIONAL:
                        return !this.hasError;
                    default:
                        return false;
                }
            }
            // Any other type of securedField is not optional & can't be hidden
            return false;
        }
        // /////// ALLOCATE CALLBACKS /////////
        onIframeLoaded(callbackFn) {
            this.onIframeLoadedCallback = callbackFn;
            return this;
        }
        onEncryption(callbackFn) {
            this.onEncryptionCallback = callbackFn;
            return this;
        }
        onValidation(callbackFn) {
            this.onValidationCallback = callbackFn;
            return this;
        }
        onConfig(callbackFn) {
            this.onConfigCallback = callbackFn;
            return this;
        }
        onFocus(callbackFn) {
            this.onFocusCallback = callbackFn;
            return this;
        }
        onBinValue(callbackFn) {
            this.onBinValueCallback = callbackFn;
            return this;
        }
        onTouchstart(callbackFn) {
            this.onTouchstartCallback = callbackFn;
            return this;
        }
        onShiftTab(callbackFn) {
            this.onShiftTabCallback = callbackFn;
            return this;
        }
        onAutoComplete(callbackFn) {
            this.onAutoCompleteCallback = callbackFn;
            return this;
        }
        //------------------------------------
        // ///////////// GETTERS/SETTERS //////////////
        get errorType() {
            return this._errorType;
        }
        set errorType(value) {
            this._errorType = value;
        }
        get hasError() {
            return this._hasError;
        }
        set hasError(value) {
            this._hasError = value;
        }
        get isValid() {
            if (this.fieldType === ENCRYPTED_SECURITY_CODE) {
                switch (this.cvcPolicy) {
                    case CVC_POLICY_HIDDEN:
                        // If cvc is hidden then the field is always valid
                        return true;
                    case CVC_POLICY_OPTIONAL:
                        // If cvc is optional then the field is always valid UNLESS it has an error
                        return !this.hasError;
                    default:
                        return this._isValid;
                }
            }
            if (this.fieldType === ENCRYPTED_EXPIRY_DATE || this.fieldType === ENCRYPTED_EXPIRY_MONTH || this.fieldType === ENCRYPTED_EXPIRY_YEAR) {
                switch (this.expiryDatePolicy) {
                    case DATE_POLICY_HIDDEN:
                        // If date is hidden then the field is always valid
                        return true;
                    case DATE_POLICY_OPTIONAL:
                        // If date is optional then the field is always valid UNLESS it has an error
                        return !this.hasError;
                    default:
                        return this._isValid;
                }
            }
            return this._isValid;
        }
        set isValid(value) {
            this._isValid = value;
        }
        get cvcPolicy() {
            return this._cvcPolicy;
        }
        set cvcPolicy(value) {
            // Only set if this is a CVC field
            if (this.fieldType !== ENCRYPTED_SECURITY_CODE) return;
            // Only set if value has changed
            if (value === this.cvcPolicy) return;
            this._cvcPolicy = value;
            // If the field has changed status (required <--> not required) AND it's error state was due to an isValidated call
            // NOTE: fixes issue in Components where you first validate and then start typing a maestro number
            // - w/o this and the fix in CSF the maestro PM will never register as valid
            if (this.hasError && this.errorType === 'isValidated') {
                this.hasError = false;
            }
        }
        get expiryDatePolicy() {
            return this._expiryDatePolicy;
        }
        set expiryDatePolicy(value) {
            // Only set if this is a date field type of securedField
            if (this.fieldType !== ENCRYPTED_EXPIRY_DATE && this.fieldType !== ENCRYPTED_EXPIRY_MONTH && this.fieldType !== ENCRYPTED_EXPIRY_YEAR)
                return;
            // Only set if value has changed
            if (value === this.expiryDatePolicy) return;
            this._expiryDatePolicy = value;
            // If the field has changed status (required <--> not required) AND it's error state was due to an isValidated call
            if (this.hasError && this.errorType === 'isValidated') {
                this.hasError = false;
            }
        }
        get iframeContentWindow() {
            return this._iframeContentWindow;
        }
        set iframeContentWindow(value) {
            this._iframeContentWindow = value;
        }
        get isEncrypted() {
            return this._isEncrypted;
        }
        set isEncrypted(value) {
            this._isEncrypted = value;
        }
        get numKey() {
            return this._numKey;
        }
        set numKey(value) {
            this._numKey = value;
        }
        // Internal use - way to create listener refs that we can add/remove
        get iframeOnLoadListener() {
            return this._iframeOnLoadListener;
        }
        set iframeOnLoadListener(value) {
            this._iframeOnLoadListener = value.bind(this);
        }
        get postMessageListener() {
            return this._postMessageListener;
        }
        set postMessageListener(value) {
            this._postMessageListener = value.bind(this);
        }
    }

    /**
     * cvcPolicy - 'required' | 'optional' | 'hidden'
     * - Always 'required' for GiftCards
     * - Usually 'required' for single branded Credit Cards but with exceptions e.g. maestro ('optional'), bcmc ('hidden').
     * - Always 'required' for generic Credit Cards at start up - in this case, subsequent, supporting information about whether cvc stops being required
     * comes from the SF in the brand information (as the shopper inputs the cc number)
     */ let cvcPolicy;
    // Usually 'required' for single branded Credit Cards but with exceptions e.g. ticket ('hidden', *technically* a meal voucher)
    let expiryDatePolicy;
    /**
     * Bound to the instance of CSF
     * Handles specific functionality related to configuring & creating SecuredFields
     */ function createSecuredFields() {
        this.encryptedAttrName = DATA_ENCRYPTED_FIELD_ATTR;
        // Detect DOM elements that qualify as securedField holders
        const securedFields = select(this.props.rootNode, `[${this.encryptedAttrName}]`);
        cvcPolicy = CVC_POLICY_REQUIRED;
        expiryDatePolicy = DATE_POLICY_REQUIRED;
        // CHECK IF THIS SECURED FIELD IS NOT OF A CREDIT CARD TYPE
        if (!this.config.isCreditCardType) {
            this.createNonCardSecuredFields(securedFields);
            return securedFields.length;
        }
        // CONTINUE AS CREDIT-CARD TYPE...
        this.isSingleBrandedCard = false;
        this.securityCode = '';
        this.createCardSecuredFields(securedFields);
        // Return the number of iframes we're going to create
        return securedFields.length;
    }
    /**
     * i.e. giftcard and ach fields
     *
     * Create a new SecuredField for each detected holding element
     */ async function createNonCardSecuredFields(securedFields) {
        for (let i = 0; i < securedFields.length; i++) {
            const securedField = securedFields[i];
            await this.setupSecuredField(securedField).catch(e => {
                if (window._b$dl) console.log('Secured fields setup failure. e=', e);
            });
        }
    }
    async function createCardSecuredFields(securedFields) {
        // Declared card type from the initialisation of CSF
        let type = this.state.type;
        // Maybe it's a single branded card defined by setting type: 'card' & a single item in cardGroupTypes
        // In which case update the type var both locally AND in State
        if (type === 'card' && this.config.cardGroupTypes.length === 1) {
            type = this.config.cardGroupTypes[0];
            this.state.type = type;
        }
        // So, is it a single branded card?
        this.isSingleBrandedCard = type !== 'card';
        // If single branded card field...
        if (this.isSingleBrandedCard) {
            // Check that type exists
            const card = cardType.getCardByBrand(type);
            // It's possible we don't recognise the card type -
            // scenario: frontend initially recognises card as e.g. Visa - but then backend tokenises it as a sub-brand which we currently don't recognise
            if (!existy(card)) {
                this.state.type = 'unrecognised-single-brand'; // Will let CVC field accept 4 digits in the input
            } else {
                // Assess whether cvc field is required based on the card type & whether the cvc field should even be visible
                cvcPolicy = card.cvcPolicy || CVC_POLICY_REQUIRED;
                expiryDatePolicy = card.expiryDatePolicy || DATE_POLICY_REQUIRED;
                this.securityCode = card.securityCode;
            }
        }
        /**
         * Create a new SecuredField for each detected holding element
         *
         * - we do this in sequence, waiting until one has configured before creating the next.
         * We do it this way to avoid the 'bug' whereby if something interrupts the loading of an iframe the listener we have for its load event
         * never fires; which means the iframe never configures.
         * (NB - you can recreate this 'bug' by creating the securedFields in a synchronous loop:
         *      securedFields.forEach(this.setupSecuredField.bind(this));
         *  and putting a breakpoint on the line where we declare the setupSecuredField function)
         *
         *  Also note we tried the Array.map/Promise.all way of asynchronously looping through an array - but it didn't fix the issue,
         *  - so we fall back to a good old for-loop
         */ for (let i = 0; i < securedFields.length; i++) {
            const securedField = securedFields[i];
            if (window._b$dl) console.log('\nAbout to set up securedField:', securedField);
            await this.setupSecuredField(securedField).catch(e => {
                if (window._b$dl) console.log('Secured fields setup failure. e=', e);
            });
            if (window._b$dl) console.log('Finished setting up securedField:', securedField);
        }
        if (window._b$dl) console.log('Finished setting up all securedFields');
        /**
         * Now the securedFields have all been created and configured...
         *
         * For a single branded card we call to onBrand callback once.
         * This allows the UI to set the correct logo if they haven't already,
         * and we also pass the cvcPolicy & expiryDatePolicy so the UI can hide the iframe holders if necessary
         */ if (this.isSingleBrandedCard) {
            const callbackObj = {
                type: this.state.type,
                rootNode: this.props.rootNode,
                brand: type,
                cvcPolicy,
                expiryDatePolicy,
                cvcText: this.securityCode
            };
            // Allow a tick for the securedField to finish rendering
            setTimeout(() => {
                this.callbacks.onBrand(callbackObj);
            }, 0);
        }
    }
    // Run for each detected holder of a securedField...
    function setupSecuredField(pItem) {
        return new Promise((resolve, reject) => {
            /**
             *  possible values:
             *  encryptedCardNumber
             *  encryptedExpiryDate
             *  encryptedExpiryMonth
             *  encryptedExpiryYear
             *  encryptedSecurityCode
             *  encryptedPassword
             *  encryptedPin???
             *  encryptedBankAccountNumber
             *  encryptedBankLocationId
             *  encryptedIBAN
             */ const fieldType = getAttribute(pItem, this.encryptedAttrName);
            if (fieldType === ENCRYPTED_EXPIRY_YEAR) {
                this.state.hasSeparateDateFields = true;
            }
            const extraFieldData = getAttribute(pItem, DATA_INFO);
            const uid = getAttribute(pItem, DATA_UID);
            // ////// CREATE SecuredField passing in configObject of props that will be set on the SecuredField instance
            const sfInitObj = {
                fieldType,
                extraFieldData,
                uid,
                cvcPolicy,
                holderEl: pItem,
                expiryDatePolicy,
                txVariant: this.state.type,
                cardGroupTypes: this.config.cardGroupTypes,
                iframeUIConfig: this.config.iframeUIConfig ? this.config.iframeUIConfig : {},
                sfLogAtStart: this.config.sfLogAtStart,
                trimTrailingSeparator: this.config.trimTrailingSeparator,
                isCreditCardType: this.config.isCreditCardType,
                iframeSrc: this.config.iframeSrc,
                loadingContext: this.config.loadingContext,
                showWarnings: this.config.showWarnings,
                legacyInputMode: this.config.legacyInputMode,
                minimumExpiryDate: this.config.minimumExpiryDate,
                implementationType: this.config.implementationType,
                maskSecurityCode: this.config.maskSecurityCode,
                disableIOSArrowKeys: this.config.disableIOSArrowKeys
            };
            const sf = new SecuredField(sfInitObj, this.props.i18n)
                .onIframeLoaded(() => {
                    // Count
                    this.state.iframeCount += 1;
                    if (window._b$dl) console.log('### createSecuredFields::onIframeLoaded:: this.state.iframeCount=', this.state.iframeCount);
                    // One of our existing securedFields has just loaded new content!
                    if (this.state.iframeCount > this.state.numIframes) {
                        this.destroySecuredFields();
                        throw new AdyenCheckoutError(
                            'ERROR',
                            `One or more securedFields has just loaded new content. This should never happen. securedFields have been removed.
                        iframe load count=${this.state.iframeCount}. Expected count:${this.state.numIframes}`
                        );
                    }
                    /** Create timeout within which time we expect the securedField to configure */ // @ts-ignore - timeout 'type' *is* a number
                    sf.loadToConfigTimeout = setTimeout(() => {
                        reject({
                            type: sf.fieldType,
                            failReason: 'sf took too long to config'
                        });
                    }, 6000);
                    // If all iframes are loaded - call onLoad callback
                    if (this.state.iframeCount === this.state.originalNumIframes) {
                        const callbackObj = {
                            iframesLoaded: true
                        };
                        this.callbacks.onLoad(callbackObj);
                    }
                })
                .onConfig(pFeedbackObj => {
                    this.handleIframeConfigFeedback(pFeedbackObj);
                    // Clear timeout since the securedField has configured
                    clearTimeout(sf.loadToConfigTimeout);
                    sf.loadToConfigTimeout = null;
                    resolve(pFeedbackObj);
                })
                .onFocus(pFeedbackObj => {
                    this.handleFocus(pFeedbackObj);
                })
                .onBinValue(pFeedbackObj => {
                    this.handleBinValue(pFeedbackObj);
                })
                .onTouchstart(pFeedbackObj => {
                    // re. Disabling arrow keys in iOS - need to disable all other fields in the form
                    if (this.config.disableIOSArrowKeys) {
                        this.callbacks.onTouchstartIOS({
                            fieldType: pFeedbackObj.fieldType
                        });
                    }
                    // iOS ONLY - RE. iOS BUGS AROUND BLUR AND FOCUS EVENTS
                    // - pass information about which field has just been clicked (gained focus) to the other iframes
                    this.postMessageToAllIframes({
                        fieldType: pFeedbackObj.fieldType,
                        fieldClick: true
                    });
                })
                .onShiftTab(pFeedbackObj => {
                    // Only happens for Firefox & IE <= 11
                    this.handleSFShiftTab(pFeedbackObj.fieldType);
                })
                .onEncryption(pFeedbackObj => {
                    this.handleEncryption(pFeedbackObj);
                })
                .onValidation(pFeedbackObj => {
                    this.handleValidation(pFeedbackObj);
                })
                .onAutoComplete(pFeedbackObj => {
                    this.processAutoComplete(pFeedbackObj);
                });
            // Store reference to securedField in this.state (under fieldType)
            this.state.securedFields[fieldType] = sf;
        });
    }

    function isIE() {
        const ua = navigator.userAgent;
        const msie = ua.indexOf('MSIE ');
        if (msie > 0) {
            // IE 10 or older => return version number
            return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
        }
        const trident = ua.indexOf('Trident/');
        if (trident > 0) {
            // IE 11 => return version number
            const rv = ua.indexOf('rv:');
            return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
        }
        const edge = ua.indexOf('Edge/');
        if (edge > 0) {
            // Edge (IE 12+) => return version number
            return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
        }
        // other browser
        return false;
    }
    const __IS_ANDROID = typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent);
    const __IS_IE = typeof navigator !== 'undefined' && isIE();
    const __IS_IOS = typeof navigator !== 'undefined' && /iphone|ipod|ipad/i.test(navigator.userAgent);
    const __IS_FIREFOX = typeof navigator !== 'undefined' && /(firefox)/i.test(navigator.userAgent);
    const __IS_SAFARI = typeof navigator !== 'undefined' && /(safari)/i.test(navigator.userAgent) && !/(chrome)/i.test(navigator.userAgent);
    var ua = {
        __IS_ANDROID,
        __IS_IE,
        __IS_IOS,
        __IS_FIREFOX,
        __IS_SAFARI
    };

    const getCaretPos = pNode => {
        if ('selectionStart' in pNode) {
            return pNode.selectionStart;
        }
        return 0;
    };
    /**
     * Detect if touched element is an input or textArea.
     * - If it is do some quirky shit to set focus and caret position on this element
     * - Else do some quirky shit to make the iOS keyboard retract
     *
     * Always then remove this listener and set var saying we have done so (read in CSF...handleFocus)
     * Tell all securedFields some other element now has focus so they can blur themselves
     *
     * @param e -
     */ function touchendListener(e) {
        const targetEl = e.target;
        // If other element is Input or TextArea
        if (targetEl instanceof HTMLInputElement || (HTMLTextAreaElement && targetEl instanceof HTMLTextAreaElement)) {
            // Force caret to show - 'requires' resetting field's value
            const val = targetEl.value;
            let caretPos = getCaretPos(targetEl);
            let adjFlag = false;
            // For some annoying, iOS Safari, reason if caretPos is at the end of the string then it won't show up
            // - so first decrease it; then set it again, asynchronously
            if (caretPos === val.length) {
                caretPos -= 1;
                adjFlag = true;
            }
            targetEl.value = val;
            /**
             * If the input element is of an unexpected type (perhaps the merchant is using a custom button that is an input element, type="button", or,
             * it is something presented in the 3DS2 flow - both, TBC) then this next line will not work.
             * However, the input element still has a setSelectionRange property of type "function", but trying to call it will throw an error...
             * so, try, to see if setSelectionRange can be called
             */ try {
                if (targetEl.setSelectionRange) {
                    targetEl.focus();
                    targetEl.setSelectionRange(caretPos, caretPos);
                    // Quirky! (see comment about iOS Safari, above)
                    if (adjFlag) {
                        caretPos += 1;
                        setTimeout(() => {
                            targetEl.setSelectionRange(caretPos, caretPos);
                        }, 0);
                    }
                }
                /* eslint-disable-next-line */
            } catch (e) {}
        } else {
            /**
             * Workaround for iOS/Safari bug where keypad doesn't retract when SF paymentMethod is no longer active
             */ const hasKeypadFix = this.config.keypadFix; // to avoid linting no-lonely-if
            if (hasKeypadFix) {
                // Create an input we can add focus to.
                // Otherwise 2nd & sub times the caret gets left in the SF even though it has lost focus and cannot be typed into
                const rootNode = this.props.rootNode;
                const nuInput = document.createElement('input');
                nuInput.style.width = '1px';
                nuInput.style.height = '1px';
                nuInput.style.opacity = '0';
                nuInput.style.fontSize = '18px'; // prevents zoom
                rootNode.appendChild(nuInput);
                nuInput.focus(); // Takes caret from SF
                rootNode.removeChild(nuInput); // Without this numpad will be replaced with text pad
            }
        }
        // Remove listener - it gets reset by next call to handleAdditionalFields from handleFocus
        this.destroyTouchendListener(); // eslint-disable-line no-use-before-define
        // Store the fact we have unset the listener
        this.state.registerFieldForIos = false;
        // Clear focus on secured field inputs now this checkout element has gained focus
        this.postMessageToAllIframes({
            fieldType: 'webInternalElement',
            fieldClick: true
        });
    }
    /**
     * re. Disabling arrow keys in iOS - need to enable all fields in the form and tell SFs to disable
     *
     * NOTE: Only called when iOS detected & this.config.disableIOSArrowKeys = true
     */ function touchstartListener(e) {
        const targetEl = e.target;
        // If other element is Input or Span (i.e. label text) TODO apply to other types of el?
        if (targetEl instanceof HTMLInputElement || targetEl instanceof HTMLSpanElement) {
            this.postMessageToAllIframes({
                fieldType: 'webInternalElement',
                checkoutTouchEvent: true
            });
            const name = targetEl.getAttribute('name') ?? targetEl.getAttribute('data-id'); // if targetEl is a label's span it will only have a data-id
            this.callbacks.onTouchstartIOS?.({
                fieldType: 'webInternalElement',
                name
            });
        }
    }
    /**
     * This works with the touchend handler to allow us to catch (click) events on non-securedFields elements
     * (re. http://gravitydept.com/blog/js-click-event-bubbling-on-ios - events don't bubble unless the click takes place on a link or input)
     *
     * We can use this event to:
     * 1. Set focus on these other elements, and
     * 2. Tell SecuredFields that this has happened so they can blur themselves
     * (see note in adyen-secured-fields...inputBase.js - "Blur event never fires on input field")
     *
     * NOTE: Only called when iOS detected
     */ function handleTouchend() {
        const bodyEl = selectOne(document, 'body');
        bodyEl.style.cursor = 'pointer';
        on(bodyEl, 'touchend', this.touchendListener);
        // Store the fact we have set the listener
        this.state.registerFieldForIos = true;
    }
    function destroyTouchendListener() {
        if (!ua.__IS_IOS) return; // For when fn is called as result of destroy being called on main csf instance
        const bodyEl = selectOne(document, 'body');
        bodyEl.style.cursor = 'auto';
        off(bodyEl, 'touchend', this.touchendListener);
    }
    function destroyTouchstartListener() {
        if (!ua.__IS_IOS) return; // For when fn is called as result of destroy being called on main csf instance
        off(document, 'touchstart', this.touchstartListener);
    }
    var handleIOSTouchEvents = {
        touchendListener,
        touchstartListener,
        handleTouchend,
        destroyTouchendListener,
        destroyTouchstartListener
    };

    const getPreviousTabbableEl = (matchEl, getPrevious = true) => {
        const selStr =
            '*[data-cse], a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), ' +
            'button:not([disabled]), object, embed, *[tabindex], *[contenteditable]';
        const allPotentialTabEls = Array.prototype.slice.call(select(document, selStr));
        const actualTabEls = [];
        allPotentialTabEls.forEach(potentialTabEl => {
            const tabIndex = potentialTabEl.getAttribute('tabindex');
            const isValidTabEl = !tabIndex || parseInt(tabIndex, 10) >= 0; // If tabindex hasn't been set, or is set and is >= 0
            const bounds = potentialTabEl.getBoundingClientRect();
            const hasDimensions = bounds.width > 0 && bounds.height > 0;
            if (isValidTabEl && hasDimensions) {
                actualTabEls.push(potentialTabEl);
            }
        });
        // Loop through an array until it finds an element based on a test fn, and then return the elements index
        const getIndexThruTest = (arr, testFn) => {
            for (let n = 0; n < arr.length; n += 1) {
                if (testFn(arr[n])) {
                    return n;
                }
            }
            return -1;
        };
        // Test function
        const isElOrContainsEl = tabEl => tabEl === matchEl || matchEl.contains(tabEl);
        // Loop through the actualTabEls array until it finds the matchEl, returning its index
        const matchElIndex = getIndexThruTest(actualTabEls, isElOrContainsEl);
        // Are we actually getting the previous element OR the next?
        const indexModifier = getPrevious ? -1 : 1;
        return actualTabEls[matchElIndex + indexModifier];
    };
    const getPreviousTabbableNonSFElement = (passedFieldType, rootNode, getPrevious) => {
        // --
        const sfEl = selectOne(rootNode, `[data-cse=${passedFieldType}]`);
        return getPreviousTabbableEl(sfEl, getPrevious);
    };

    // Regular Credit Card scenario
    function shiftTabCreditCard(fieldType, rootNode, hasSeparateDateFields, numIframes) {
        let additionalField;
        let fieldToFocus;
        switch (fieldType) {
            case ENCRYPTED_CARD_NUMBER:
                additionalField = getPreviousTabbableNonSFElement(ENCRYPTED_CARD_NUMBER, rootNode);
                break;
            case ENCRYPTED_EXPIRY_DATE:
                fieldToFocus = ENCRYPTED_CARD_NUMBER;
                break;
            case ENCRYPTED_EXPIRY_MONTH:
                fieldToFocus = ENCRYPTED_CARD_NUMBER;
                break;
            case ENCRYPTED_EXPIRY_YEAR:
                fieldToFocus = ENCRYPTED_EXPIRY_MONTH;
                break;
            case ENCRYPTED_SECURITY_CODE:
                // Shifting focus away from securedFields
                if (numIframes === 1) {
                    additionalField = getPreviousTabbableNonSFElement(ENCRYPTED_SECURITY_CODE, rootNode);
                } else {
                    // Focus stays within securedFields
                    fieldToFocus = !hasSeparateDateFields ? ENCRYPTED_EXPIRY_DATE : ENCRYPTED_EXPIRY_YEAR;
                }
                break;
        }
        return {
            fieldToFocus,
            additionalField
        };
    }

    // ACH scenario: bankAccountNumber SF followed by a bankLocationId SF
    function shiftTabACH(fieldType) {
        let additionalField;
        let fieldToFocus;
        if (fieldType === ENCRYPTED_BANK_LOCATION_FIELD) {
            fieldToFocus = ENCRYPTED_BANK_ACCNT_NUMBER_FIELD;
        }
        return {
            fieldToFocus,
            additionalField
        };
    }

    // GIFT CARD scenario: SecurityCode preceded by CardNumber
    function shiftTabGiftCard(fieldType, rootNode) {
        let additionalField;
        let fieldToFocus;
        switch (fieldType) {
            case ENCRYPTED_CARD_NUMBER:
                additionalField = getPreviousTabbableNonSFElement(ENCRYPTED_CARD_NUMBER, rootNode);
                break;
            case ENCRYPTED_SECURITY_CODE:
                fieldToFocus = ENCRYPTED_CARD_NUMBER;
                break;
        }
        return {
            fieldToFocus,
            additionalField
        };
    }

    // KCP scenario: Regular credit card but with additional fields -
    // an encrypted pin/password field preceded by a form field of a non-SF type (d.o.b/taxRefNum)
    function shiftTabKCP(fieldType, rootNode, hasSeparateDateFields) {
        let additionalField;
        let fieldToFocus;
        switch (fieldType) {
            case ENCRYPTED_CARD_NUMBER:
                additionalField = getPreviousTabbableNonSFElement(ENCRYPTED_CARD_NUMBER, rootNode);
                break;
            case ENCRYPTED_EXPIRY_DATE:
                fieldToFocus = ENCRYPTED_CARD_NUMBER;
                break;
            case ENCRYPTED_EXPIRY_MONTH:
                fieldToFocus = ENCRYPTED_CARD_NUMBER;
                break;
            case ENCRYPTED_EXPIRY_YEAR:
                fieldToFocus = ENCRYPTED_EXPIRY_MONTH;
                break;
            case ENCRYPTED_SECURITY_CODE:
                fieldToFocus = !hasSeparateDateFields ? ENCRYPTED_EXPIRY_DATE : ENCRYPTED_EXPIRY_YEAR;
                break;
            case ENCRYPTED_PWD_FIELD:
            case ENCRYPTED_PIN_FIELD:
                additionalField = getPreviousTabbableNonSFElement(fieldType, rootNode);
                break;
        }
        return {
            fieldToFocus,
            additionalField
        };
    }

    const logTab = false;
    const focusExternalField = pAdditionalField => {
        if (pAdditionalField) {
            pAdditionalField.focus();
            // Quirky! - Needed to work in the Components scenario
            pAdditionalField.blur();
            pAdditionalField.focus();
        }
    };
    function handleShiftTab(fieldType) {
        let shiftTabObj;
        switch (this.state.type) {
            // ACH scenario: bankAccountNumber SF followed by a bankLocationId SF
            case 'ach':
                shiftTabObj = shiftTabACH(fieldType);
                break;
            // GIFT CARD scenario: SecurityCode preceded by CardNumber
            case 'giftcard':
                shiftTabObj = shiftTabGiftCard(fieldType, this.props.rootNode);
                break;
            // Credit Card scenarios
            default:
                // KCP scenario: Regular credit card but with additional fields
                // - an encrypted pin/password field preceded by a form field of a non-SF type (d.o.b/taxRefNum)
                if (this.state.isKCP) {
                    shiftTabObj = shiftTabKCP(fieldType, this.props.rootNode, this.state.hasSeparateDateFields);
                } else {
                    // Regular Credit Card
                    shiftTabObj = shiftTabCreditCard(fieldType, this.props.rootNode, this.state.hasSeparateDateFields, this.state.numIframes);
                }
                break;
        }
        const fieldToFocus = shiftTabObj.fieldToFocus;
        const additionalField = shiftTabObj.additionalField;
        if (fieldToFocus) {
            this.setFocusOnFrame(fieldToFocus, logTab);
        } else if (additionalField) {
            focusExternalField(additionalField);
        }
    }
    const eligibleForTabFix = () => ua.__IS_FIREFOX || (ua.__IS_IE && ua.__IS_IE <= 11);
    function handleSFShiftTab(fieldType) {
        if (eligibleForTabFix()) {
            this.handleShiftTab(fieldType);
        }
    }
    var handleTab = {
        handleShiftTab,
        handleSFShiftTab
    };

    function sendBrandToCardSF(brandObj) {
        if (hasOwnProperty(this.state.securedFields, ENCRYPTED_CARD_NUMBER)) {
            const dataObj = {
                txVariant: this.state.type,
                ...brandObj,
                fieldType: ENCRYPTED_CARD_NUMBER,
                numKey: this.state.securedFields[ENCRYPTED_CARD_NUMBER].numKey
            };
            postMessageToIframe(dataObj, getIframeContentWin(this.state, ENCRYPTED_CARD_NUMBER), this.config.loadingContext);
        }
    }
    function sendExpiryDatePolicyToSF(expiryDateObj) {
        const separateDateFields =
            hasOwnProperty(this.state.securedFields, ENCRYPTED_EXPIRY_MONTH) && hasOwnProperty(this.state.securedFields, ENCRYPTED_EXPIRY_YEAR);
        const dateIframesArr = separateDateFields ? [ENCRYPTED_EXPIRY_MONTH, ENCRYPTED_EXPIRY_YEAR] : [ENCRYPTED_EXPIRY_DATE];
        dateIframesArr.forEach(key => {
            const dataObj = {
                txVariant: this.state.type,
                ...expiryDateObj,
                fieldType: key,
                numKey: this.state.securedFields[key].numKey
            };
            postMessageToIframe(dataObj, getIframeContentWin(this.state, key), this.config.loadingContext);
        });
    }
    function handleBrandFromBinLookup(binLookupResponse, resetObj) {
        const isGenericCard = this.state.type === 'card';
        /**
         * The number of digits in number field has dropped below threshold for BIN lookup (or the bin wasn't found in the DB)
         * - so tell SF to reset & republish the brand it detects
         */ if (!binLookupResponse || !Object.keys(binLookupResponse).length) {
            if (isGenericCard) {
                // This will be sent to CardNumber SF which will trigger the brand to be re-evaluated and broadcast (which will reset cvcPolicy)
                this.sendBrandToCardSF({
                    brand: 'reset'
                });
                this.sendExpiryDatePolicyToSF({
                    expiryDatePolicy: DATE_POLICY_REQUIRED
                });
            } else {
                /**
                 * For "dedicated" card components, i.e a card component created as: checkout.create('bcmc') but which can accept multiple brands,
                 * there will be no to-and-fro with the securedField iframe to reset brand.
                 * The presence of a resetObj indicates we are in this "dedicated"" scenario, so we need to use the information contained within this object
                 * to internally reset the brand
                 */ if (resetObj) {
                    this.processBrand({
                        ...resetObj,
                        fieldType: ENCRYPTED_CARD_NUMBER
                    });
                }
            }
            // Reset expiryDatePolicy - which never comes from SF
            if (this.state.type === 'card' && hasOwnProperty(this.state.securedFields, ENCRYPTED_EXPIRY_DATE)) {
                this.state.securedFields[ENCRYPTED_EXPIRY_DATE].expiryDatePolicy = DATE_POLICY_REQUIRED;
            }
            return;
        }
        const binBrandObj = binLookupResponse.supportedBrands[0];
        const passedBrand = binBrandObj.brand;
        // Look first for expiryDatePolicy string otherwise use showExpiryDate boolean
        const expiryDatePolicy = binBrandObj.expiryDatePolicy ?? (binBrandObj.showExpiryDate === true ? DATE_POLICY_REQUIRED : DATE_POLICY_HIDDEN);
        const brandObj = {
            brand: passedBrand,
            cvcPolicy: binBrandObj.cvcPolicy,
            expiryDatePolicy,
            cvcText: 'Security code',
            showSocialSecurityNumber: binBrandObj.showSocialSecurityNumber ?? false,
            fieldType: ENCRYPTED_CARD_NUMBER
        };
        // Take advantage of function used to handle brand messages from SF in order to process this new brand information
        this.processBrand(brandObj);
        if (isGenericCard) {
            // Pass brand to CardNumber SF
            const cardObj = {
                brand: passedBrand,
                enableLuhnCheck: binLookupResponse.supportedBrands[0].enableLuhnCheck !== false,
                ...(binBrandObj?.panLength && {
                    panLength: binBrandObj?.panLength
                })
            };
            this.sendBrandToCardSF(cardObj);
            // Inform the date related securedFields
            // - if expiryDatePolicy is 'optional' or 'hidden' they need to set the aria-required attribute / hide themselves
            this.sendExpiryDatePolicyToSF({
                expiryDatePolicy
            });
        }
        /**
         * CHECK IF BRAND CHANGE MEANS FORM IS NOW VALID e.g maestro/bcmc (which don't require cvc) OR bcmc/visa (one of which doesn't require cvc, one of which does)
         */ /**
         * First set the cvcPolicy value on the relevant SecuredFields instance (which will reflect in the cvc field being considered valid,
         *  as long as it is not in error)...
         */ if (hasOwnProperty(this.state.securedFields, ENCRYPTED_SECURITY_CODE)) {
            this.state.securedFields[ENCRYPTED_SECURITY_CODE].cvcPolicy = binBrandObj.cvcPolicy;
        }
        /**
         * ...then set the expiryDatePolicy...
         */ if (hasOwnProperty(this.state.securedFields, ENCRYPTED_EXPIRY_DATE)) {
            this.state.securedFields[ENCRYPTED_EXPIRY_DATE].expiryDatePolicy = expiryDatePolicy;
        } else if (
            hasOwnProperty(this.state.securedFields, ENCRYPTED_EXPIRY_MONTH) &&
            hasOwnProperty(this.state.securedFields, ENCRYPTED_EXPIRY_YEAR)
        ) {
            this.state.securedFields[ENCRYPTED_EXPIRY_MONTH].expiryDatePolicy = expiryDatePolicy;
            this.state.securedFields[ENCRYPTED_EXPIRY_YEAR].expiryDatePolicy = expiryDatePolicy;
        }
        /**
         * ...and now re-check if form i.e all the SecuredFields, are valid
         */ this.validateForm();
    }

    /**
     * @param csfState - comes from initial, partial, implementation
     * @param csfConfig - comes from initial, partial, implementation
     *
     * @param pFieldType -
     * @param doLog -
     */ function setFocusOnFrame({ csfState, csfConfig }, pFieldType, doLog) {
        // Check destroySecuredFields hasn't been called (thus clearing the state's securedFields object)
        if (!hasOwnProperty(csfState.securedFields, pFieldType)) return;
        const focusData = {
            txVariant: csfState.type,
            fieldType: pFieldType,
            focus: true,
            numKey: csfState.securedFields[pFieldType].numKey
        };
        postMessageToIframe(focusData, getIframeContentWin(csfState, pFieldType), csfConfig.loadingContext);
    }

    /**
     * UTIL TO BROADCAST TO ALL IFRAMES AT ONCE
     * Adds correct txVariant, fieldType and numKey for each iframe
     *
     * @param csfState - comes from initial, partial, implementation
     * @param csfConfig  - comes from initial, partial, implementation
     *
     * @param pDataObj -
     */ function postMessageToAllIframes({ csfState, csfConfig }, pDataObj) {
        const objKeys = Object.keys(pDataObj || {});
        if (!objKeys.length) {
            // pDataObj is an object with the 'special' key(s) that represent the reason for making this postMessage
            // without it/them there is no reason to postMessage
            return;
        }
        const securedFieldKeys = Object.keys(csfState.securedFields);
        securedFieldKeys.forEach(pFieldType => {
            const dataObj = {
                txVariant: csfState.type,
                fieldType: pFieldType,
                numKey: csfState.securedFields[pFieldType].numKey
            };
            // Copy across 'special' properties from passed data object
            objKeys.forEach(pKey => {
                dataObj[pKey] = pDataObj[pKey];
            });
            postMessageToIframe(dataObj, getIframeContentWin(csfState, pFieldType), csfConfig.loadingContext);
        });
    }

    const checkForBrandChange = (pBrand, storedBrand) => {
        // if the objects aren't the same - then return true = brandChange has happened
        return !objectsDeepEqual(pBrand, storedBrand);
    };
    /**
     * - If generic card type AND passed brand doesn't equal stored brand - send the new brand to the cvc input
     *    (so it can reassess what length it should be and if any value it contains is now valid)
     *
     * - Create object for onBrand callback aka SFPHandlers.handleOnBrand
     *
     * @param csfState - comes from initial, partial, implementation
     * @param csfConfig - comes from initial, partial, implementation
     * @param csfProps - comes from initial, partial, implementation
     * @param csfCallbacks - comes from initial, partial, implementation
     *
     * @param pFeedbackObj -
     */ function processBrand({ csfState, csfConfig, csfProps, csfCallbacks }, pFeedbackObj) {
        const fieldType = pFeedbackObj.fieldType;
        if (fieldType === ENCRYPTED_CARD_NUMBER) {
            // Check for new brand...
            const newBrandObj = {
                brand: pFeedbackObj.brand,
                cvcPolicy: pFeedbackObj.cvcPolicy,
                expiryDatePolicy: pFeedbackObj.expiryDatePolicy,
                showSocialSecurityNumber: pFeedbackObj.showSocialSecurityNumber
            };
            const newBrand = checkForBrandChange(newBrandObj, csfState.brand);
            if (!newBrand) {
                return null;
            }
            // Now BCMC can dual brand with Visa it must also be treated as a generic card so we can show/hide the CVC field
            const treatAsGenericCard = csfState.type === 'card' || csfState.type === 'bcmc';
            // ...if also a generic card - tell cvc field...
            if (treatAsGenericCard && newBrand) {
                // Store on state so for subsequent brand messages we can compare the new and the old
                csfState.brand = newBrandObj;
                // Perform postMessage to send brand to CVC field - this also needs to happen for BCMC, single branded cards,
                // because it needs to know the cvcPolicy (to set the aria-required attribute & to show the iframe)
                if (hasOwnProperty(csfState.securedFields, ENCRYPTED_SECURITY_CODE)) {
                    const dataObj = {
                        txVariant: csfState.type,
                        brand: newBrandObj.brand,
                        fieldType: ENCRYPTED_SECURITY_CODE,
                        cvcPolicy: pFeedbackObj.cvcPolicy,
                        numKey: csfState.securedFields[ENCRYPTED_SECURITY_CODE].numKey
                    };
                    postMessageToIframe(dataObj, getIframeContentWin(csfState, ENCRYPTED_SECURITY_CODE), csfConfig.loadingContext);
                }
            }
            // Create object with brand related properties
            const brandInfoObj = treatAsGenericCard
                ? pick(['brand', 'cvcPolicy', 'cvcText', 'expiryDatePolicy', 'showSocialSecurityNumber']).from(pFeedbackObj)
                : null;
            if (brandInfoObj && brandInfoObj.brand) {
                const callbackObj = brandInfoObj;
                callbackObj.type = csfState.type;
                callbackObj.rootNode = csfProps.rootNode;
                /// ...and call SFPHandlers.handleOnBrand
                csfCallbacks.onBrand(callbackObj);
            }
            return true;
        }
        return false;
    }

    /**
     *
     * @param csfState - comes from initial, partial, implementation
     * @param csfConfig - comes from initial, partial, implementation
     * @param csfCallbacks - comes from initial, partial, implementation
     *
     * @param pFeedbackObj -
     */ function processAutoComplete({ csfState, csfConfig, csfCallbacks }, pFeedbackObj) {
        /**
         * NOTE: It seems Chrome has started autofilling across cross-origin iframes. Have tested as far back as v104 but have no resources to test further back
         * So, in theory for Chrome \>= v104 we don't need to do any of this, including having special listeners in the securedFields
         */ // Specifically for cc-name (but no reason not to propagate all AC objects to the merchant)
        if (pFeedbackObj.name === 'cc-name') {
            const feedbackObj = {
                ...pFeedbackObj
            };
            delete feedbackObj.numKey;
            const ACFeedbackObj = feedbackObj;
            csfCallbacks.onAutoComplete(ACFeedbackObj);
        }
        // Send date info to relevant secured fields
        if (pFeedbackObj.name === 'cc-exp') {
            const splittableDateVal = pFeedbackObj.value.replace(/[^0-9]/gi, '/'); // Replace any non-digits with a fwd-slash so we can always split it
            const dateValArr = splittableDateVal.split('/');
            if (dateValArr.length !== 2) return; // To avoid bug in some versions of Safari where date doesn't come through as expected
            if (dateValArr[0].length === 1) dateValArr[0] = `0${dateValArr[0]}`; // pad, if required
            const acMonthVal = dateValArr[0];
            const acYearVal = dateValArr[1].substr(2); // take last 2 digits of year
            const acDateVal = `${acMonthVal}/${acYearVal}`;
            if (hasOwnProperty(csfState.securedFields, ENCRYPTED_EXPIRY_DATE)) {
                const dataObj = {
                    txVariant: csfState.type,
                    fieldType: ENCRYPTED_EXPIRY_DATE,
                    autoComplete: acDateVal,
                    numKey: csfState.securedFields[ENCRYPTED_EXPIRY_DATE].numKey
                };
                postMessageToIframe(dataObj, getIframeContentWin(csfState, ENCRYPTED_EXPIRY_DATE), csfConfig.loadingContext);
                return;
            }
            if (hasOwnProperty(csfState.securedFields, ENCRYPTED_EXPIRY_MONTH)) {
                const dataObj = {
                    txVariant: csfState.type,
                    fieldType: ENCRYPTED_EXPIRY_MONTH,
                    autoComplete: acMonthVal,
                    numKey: csfState.securedFields[ENCRYPTED_EXPIRY_MONTH].numKey
                };
                postMessageToIframe(dataObj, getIframeContentWin(csfState, ENCRYPTED_EXPIRY_MONTH), csfConfig.loadingContext);
            }
            if (hasOwnProperty(csfState.securedFields, ENCRYPTED_EXPIRY_YEAR)) {
                // Dirty! - Need to wait til next page draw if setting month and year at the same time, otherwise only year gets set
                setTimeout(() => {
                    const dataObj = {
                        txVariant: csfState.type,
                        fieldType: ENCRYPTED_EXPIRY_YEAR,
                        autoComplete: acYearVal,
                        numKey: csfState.securedFields[ENCRYPTED_EXPIRY_YEAR].numKey
                    };
                    postMessageToIframe(dataObj, getIframeContentWin(csfState, ENCRYPTED_EXPIRY_YEAR), csfConfig.loadingContext);
                }, 0);
            }
        }
    }

    /**
     * Call focus callback and store which field currently has focus
     *
     * @param csfState - comes from initial, partial, implementation
     * @param csfProps - comes from initial, partial, implementation
     * @param csfCallbacks - comes from initial, partial, implementation
     *
     * @param pFeedbackObj -
     */ function handleFocus$1({ csfState, csfProps, csfCallbacks }, pFeedbackObj) {
        const feedbackObj = {
            ...pFeedbackObj
        };
        delete feedbackObj.numKey;
        feedbackObj.rootNode = csfProps.rootNode;
        feedbackObj.type = csfState.type;
        // Store which field has focus
        const focusString = feedbackObj.fieldType;
        // FOCUS EVENT - store who has focus, if it differs to the current value
        if (feedbackObj.focus) {
            if (csfState.currentFocusObject !== focusString) {
                csfState.currentFocusObject = focusString;
                // If iOS detected AND we don't have a (touchend) listener
                if (ua.__IS_IOS && !csfState.registerFieldForIos) {
                    this.handleIOSTouchEvents();
                }
            }
        } else {
            // BLUR EVENT - remove stored focus
            const focusObjectMatches = csfState.currentFocusObject === focusString;
            if (focusObjectMatches) {
                csfState.currentFocusObject = null;
            }
        }
        // Call callback (SecuredFieldsProviderHandlers > onFocus)
        const callbackObj = feedbackObj;
        callbackObj.currentFocusObject = csfState.currentFocusObject;
        csfCallbacks.onFocus(callbackObj);
    }

    // Count how many iframes have successfully been configured and, if its all of them, call callback function
    // First, object, param comes from partial implementation
    /**
     * @param csfState - comes from initial, partial, implementation
     * @param csfCallbacks - comes from initial, partial, implementation
     * @param isConfigured - comes from initial, partial, implementation
     *
     * @param pFeedbackObj -
     */ function handleIframeConfigFeedback({ csfState, csfCallbacks }, isConfigured, pFeedbackObj) {
        csfState.iframeConfigCount += 1;
        if (window._b$dl)
            console.log('### handleIframeConfigFeedback::csfState.iframeConfigCount:: ', csfState.iframeConfigCount, 'who=', pFeedbackObj.fieldType);
        if (!csfState.isConfigured) {
            if (csfState.iframeConfigCount === csfState.originalNumIframes) {
                // Announce we're configured to the rest of the system
                isConfigured();
                return true;
            }
        } else {
            const callbackObj = {
                additionalIframeConfigured: true,
                fieldType: pFeedbackObj.fieldType,
                type: csfState.type
            };
            csfCallbacks.onAdditionalSFConfig(callbackObj);
        }
        return false;
    }

    /**
     * @param csfState - comes from initial, partial, implementation
     * @param csfConfig - comes from initial, partial, implementation
     * @param csfProps - comes from initial, partial, implementation
     * @param csfCallbacks - comes from initial, partial, implementation
     * @param validateForm - comes from initial, partial, implementation
     */ function isConfigured({ csfState, csfConfig, csfProps, csfCallbacks }, validateForm) {
        csfState.isConfigured = true;
        const callbackObj = {
            iframesConfigured: true,
            type: csfState.type,
            rootNode: csfProps.rootNode
        };
        csfCallbacks.onConfigSuccess(callbackObj);
        // If a recurring card
        if (csfState.numIframes === 1 && csfConfig.isCreditCardType) {
            if (csfState.type === 'card') {
                error("ERROR: Payment method with a single secured field - but 'type' has not been set to a specific card brand");
                return;
            }
            // Get card object from txVariant
            const card = cardType.getCardByBrand(csfState.type);
            // It's possible we don't recognise the card type -
            // scenario: frontend initially recognises card as e.g. Visa - but then backend tokenises it as a sub-brand which we currently don't recognise
            if (card) {
                // Assess whether cvc field is required
                const cvcPolicy = card.cvcPolicy ?? CVC_POLICY_REQUIRED;
                // If cvc is optional - the form can be considered valid
                if (cvcPolicy !== CVC_POLICY_REQUIRED) {
                    // this.validateForm();
                    validateForm();
                }
            }
        }
    }

    const checkFormIsValid = pSecuredFields => {
        const securedFieldKeys = Object.keys(pSecuredFields);
        for (let i = 0, len = securedFieldKeys.length; i < len; i += 1) {
            const key = securedFieldKeys[i];
            if (!pSecuredFields[key].isValid) {
                return false;
            }
        }
        return true;
    };
    /**
     * @param csfState - comes from initial, partial, implementation
     * @param csfProps - comes from initial, partial, implementation
     * @param csfCallbacks - comes from initial, partial, implementation
     */ function validateForm({ csfState, csfProps, csfCallbacks }) {
        const isValid = checkFormIsValid(csfState.securedFields);
        const validityHasChanged = isValid !== csfState.allValid;
        csfState.allValid = isValid;
        // Only call onAllValid callback if value has changed OR is true
        if (!isValid && !validityHasChanged) return;
        const callbackObj = {
            allValid: isValid,
            type: csfState.type,
            rootNode: csfProps.rootNode
        };
        // BROADCAST VALID STATE OF THE FORM AS A WHOLE
        csfCallbacks.onAllValid(callbackObj);
    }

    /**
     * @param csfState - comes from initial, partial, implementation
     * @param csfCallbacks - comes from initial, partial, implementation
     *
     * @param pFeedbackObj -
     */ function handleBinValue({ csfState, csfCallbacks }, pFeedbackObj) {
        const { binValue, encryptedBin, uuid } = pFeedbackObj;
        const callbacksObj = {
            binValue,
            type: csfState.type
        };
        if (encryptedBin) {
            callbacksObj.encryptedBin = encryptedBin;
            callbacksObj.uuid = uuid;
        }
        csfCallbacks.onBinValue(callbacksObj);
    }

    function destroySecuredFields() {
        // Tell all securedFields iframes: they will remove all event listeners including keyboard events
        this.postMessageToAllIframes({
            destroy: true
        });
        // Get ref to all the keys under which SecuredField instances are stores
        const securedFieldKeys = Object.keys(this.state.securedFields);
        // Tell each SecuredField instance to:
        // stop listening to message events, remove iframe window refs, remove iframes
        // Then remove ref to SecuredField instance
        securedFieldKeys.forEach(pFieldType => {
            const sf = this.state.securedFields[pFieldType];
            if (sf) sf.destroy(); // Comment out if you want to test the 'destroy' effects in the actual SF
            this.state.securedFields[pFieldType] = null;
        });
        // --
        // Stop listening to touchend event on body (iOS only)
        this.destroyTouchendListener();
        // Stop listening to touchstart event on document (iOS only)
        this.destroyTouchstartListener();
        // Clear SecuredField storage object
        this.state.securedFields = {};
    }

    const notConfiguredWarning = (str = 'You cannot use secured fields') => {
        warn(`${str} - they are not yet configured. Use the 'onConfigSuccess' callback to know when this has happened.`);
    };
    class CSF extends AbstractCSF {
        // --
        constructor(setupObj) {
            /**
             * Initialises:
             *  - this.props = setupObj: CSFSetupObject
             *
             * and empty objects for:
             *  - this.config: CSFConfigObject (populated in handleConfig.ts)
             *  - this.callbacks: CSFCallbacksConfig (populated in configureCallbacks.ts
             *  - this.state: CSFStateObject (populated below)
             */ super(setupObj);
            this.state = {
                /**
                 *  For generic card will always be 'card'.
                 *  For non-generic card will be hardcoded to a particular txVariant e.g. 'mc' or 'visa'
                 *  For other types of SecuredField will be the passed type e.g. 'ach' or 'giftcard'
                 */ type: this.props.type,
                /**
                 *  For generic card will change as shopper types
                 *  For non-generic card will be fixed
                 */ brand:
                    this.props.type !== 'card'
                        ? {
                              brand: this.props.type,
                              cvcPolicy: 'required'
                          }
                        : {
                              brand: null,
                              cvcPolicy: 'required'
                          },
                allValid: undefined,
                numIframes: 0,
                originalNumIframes: 0,
                iframeCount: 0,
                iframeConfigCount: 0,
                isConfigured: false,
                hasSeparateDateFields: false,
                currentFocusObject: null,
                registerFieldForIos: false,
                securedFields: {},
                isKCP: false
            };
            const thisObj = {
                csfState: this.state,
                csfConfig: this.config,
                csfProps: this.props,
                csfCallbacks: this.callbacks
            };
            // Setup 'this' references
            this.configHandler = handleConfig;
            this.callbacksHandler = configureCallbacks;
            this.validateForm = partial(validateForm, thisObj);
            this.isConfigured = partial(isConfigured, thisObj, this.validateForm);
            this.handleIframeConfigFeedback = partial(handleIframeConfigFeedback, thisObj, this.isConfigured);
            this.processBrand = partial(processBrand, thisObj);
            this.handleValidation = handleValidation;
            this.handleEncryption = handleEncryption;
            this.createSecuredFields = createSecuredFields;
            this.createNonCardSecuredFields = createNonCardSecuredFields;
            this.createCardSecuredFields = createCardSecuredFields;
            this.setupSecuredField = setupSecuredField;
            this.postMessageToAllIframes = partial(postMessageToAllIframes, thisObj);
            this.setFocusOnFrame = partial(setFocusOnFrame, thisObj);
            this.handleFocus = partial(handleFocus$1, thisObj);
            this.handleIOSTouchEvents = handleIOSTouchEvents.handleTouchend;
            this.touchendListener = handleIOSTouchEvents.touchendListener.bind(this);
            this.destroyTouchendListener = handleIOSTouchEvents.destroyTouchendListener;
            this.touchstartListener = handleIOSTouchEvents.touchstartListener.bind(this);
            this.destroyTouchstartListener = handleIOSTouchEvents.destroyTouchstartListener;
            this.handleSFShiftTab = handleTab.handleSFShiftTab;
            this.handleShiftTab = handleTab.handleShiftTab;
            this.destroySecuredFields = destroySecuredFields;
            this.processAutoComplete = partial(processAutoComplete, thisObj);
            this.handleBinValue = partial(handleBinValue, thisObj);
            this.handleBrandFromBinLookup = handleBrandFromBinLookup;
            this.sendBrandToCardSF = sendBrandToCardSF;
            this.sendExpiryDatePolicyToSF = sendExpiryDatePolicyToSF;
            // Populate config & callbacks objects & create securedFields
            this.init();
        }
        init() {
            this.configHandler(this.props);
            this.callbacksHandler(this.props.callbacks);
            /**
             * Create all the securedFields
             */ const numIframes = this.createSecuredFields();
            this.state.numIframes = this.state.originalNumIframes = numIframes;
            this.state.isKCP = !!this.props.isKCP;
            /**
             * Add touchstart listener
             * re. Disabling arrow keys in iOS
             */ if (ua.__IS_IOS && this.config.disableIOSArrowKeys) {
                on(document, 'touchstart', this.touchstartListener);
            }
        }
        // Expose functions that can be called on the CSF instance
        createReturnObject() {
            // --
            const returnObj = {
                // --
                updateStyles: pStyleObject => {
                    if (this.state.isConfigured) {
                        this.postMessageToAllIframes({
                            styleObject: pStyleObject
                        });
                    } else {
                        warn(
                            'You cannot update the secured fields styling ' +
                                "- they are not yet configured. Use the 'onConfigSuccess' callback to know when this has happened."
                        );
                    }
                },
                setFocusOnFrame: pFieldType => {
                    if (this.state.isConfigured) {
                        this.setFocusOnFrame(pFieldType);
                        // Comment in a quick way to test destroying secured fields (also see comment in destroySecuredFields)
                        // this.destroySecuredFields();
                    } else {
                        notConfiguredWarning('You cannot set focus on any secured field');
                    }
                },
                // For component based implementation - if showValidation function is called on the component use this
                // function as a way to notify the CSF that a field is in error
                isValidated: (pFieldType, code) => {
                    if (this.state.isConfigured) {
                        if (hasOwnProperty(this.state.securedFields, pFieldType)) {
                            this.state.securedFields[pFieldType].hasError = true;
                            // If there's not already an errorType, set one
                            // NOTE: fixes issue in Components where you first validate and then start typing a maestro number
                            // - w/o this and the corresponding fix in the SecuredField class the maestro PM will never register as valid
                            if (this.state.securedFields[pFieldType].errorType === '') {
                                this.state.securedFields[pFieldType].errorType = 'isValidated';
                            }
                            // Inform iframe
                            const dataObj = {
                                txVariant: this.state.type,
                                fieldType: pFieldType,
                                externalValidation: true,
                                code,
                                numKey: this.state.securedFields[pFieldType].numKey
                            };
                            postMessageToIframe(dataObj, getIframeContentWin(this.state, pFieldType), this.config.loadingContext);
                        }
                    } else {
                        notConfiguredWarning('You cannot set validated on any secured field');
                    }
                },
                hasUnsupportedCard: (pFieldType, code) => {
                    if (this.state.isConfigured) {
                        if (hasOwnProperty(this.state.securedFields, pFieldType)) {
                            //
                            this.state.securedFields[pFieldType].hasError = !!code;
                            this.state.securedFields[pFieldType].errorType = code;
                            // Inform iframe
                            const dataObj = {
                                txVariant: this.state.type,
                                fieldType: pFieldType,
                                unsupportedCard: !!code,
                                code,
                                numKey: this.state.securedFields[pFieldType].numKey
                            };
                            postMessageToIframe(dataObj, getIframeContentWin(this.state, pFieldType), this.config.loadingContext);
                        }
                    } else {
                        notConfiguredWarning('You cannot set hasUnsupportedCard on any secured field');
                    }
                },
                destroy: () => {
                    if (this.state.isConfigured) {
                        this.destroySecuredFields();
                    } else {
                        notConfiguredWarning('You cannot destroy secured fields');
                    }
                },
                brandsFromBinLookup: (binLookupResponse, resetObj) => {
                    if (!this.config.isCreditCardType) return null;
                    if (this.state.isConfigured) {
                        this.handleBrandFromBinLookup(binLookupResponse, resetObj);
                    } else {
                        notConfiguredWarning('You cannot set pass brands to secured fields');
                    }
                },
                addSecuredField: pFieldType => {
                    const securedField = selectOne(this.props.rootNode, `[data-cse="${pFieldType}"]`);
                    if (securedField) {
                        this.state.numIframes += 1;
                        this.setupSecuredField(securedField);
                    }
                },
                removeSecuredField: pFieldType => {
                    if (this.state.securedFields[pFieldType]) {
                        this.state.securedFields[pFieldType].destroy();
                        delete this.state.securedFields[pFieldType];
                        this.state.numIframes -= 1;
                        this.state.iframeCount -= 1;
                        const callbackObj = {
                            additionalIframeRemoved: true,
                            fieldType: pFieldType,
                            type: this.state.type
                        };
                        this.callbacks.onAdditionalSFRemoved(callbackObj);
                    }
                },
                setKCPStatus: isKCP => {
                    this.state.isKCP = isKCP;
                },
                sfIsOptionalOrHidden: fieldType => {
                    return this.state.securedFields[fieldType].isOptionalOrHidden();
                }
            };
            return returnObj;
        }
    }

    const initCSF = pSetupObj => {
        if (!pSetupObj) {
            throw new Error('No securedFields configuration object defined');
        }
        const setupObj = {
            ...pSetupObj
        };
        try {
            // Map the generic types (i.e. 'card', 'scheme') to 'card'
            const isGenericCardType = cardType.isGenericCardType(setupObj.type);
            setupObj.type = isGenericCardType ? 'card' : setupObj.type;
        } catch (e) {
            // If type has not been specified - ensure there is a default
            setupObj.type = 'card';
        }
        // //////// 1. Check passed config object has minimum expected properties //////////
        if (!hasOwnProperty(setupObj, 'rootNode')) {
            return error('ERROR: SecuredFields configuration object is missing a "rootNode" property');
        }
        if (falsy(setupObj.clientKey)) {
            return warn('WARNING: AdyenCheckout configuration object is missing a "clientKey" property.');
        }
        //----------------------------------------------------------------------------
        // //////// 2. Find and store reference to the root DOM element //////////
        const rootNode = findRootNode(setupObj.rootNode);
        if (!rootNode) {
            return error(`ERROR: SecuredFields cannot find a valid rootNode element for ${setupObj.type}`);
        }
        setupObj.rootNode = rootNode; // Overwrite with actual node (in case we were sent a string)
        const myCSF = new CSF(setupObj);
        return myCSF.createReturnObject();
    };
    const findRootNode = pRootNode => {
        let rootNode;
        // Expect to be sent the actual html node...
        if (typeof pRootNode === 'object') {
            rootNode = pRootNode;
        }
        if (typeof pRootNode === 'string') {
            // ... but if only sent a string - find it ourselves
            rootNode = selectOne(document, pRootNode);
            if (!rootNode) {
                return null;
            }
        }
        return rootNode;
    };

    /**
     * Emits the onLoad event
     * Here we can assume all securedFields iframes have fired their 'load' event
     */ function handleOnLoad(cbObj) {
        // Clear 'loading' timeout
        clearTimeout(this.csfLoadFailTimeout);
        this.csfLoadFailTimeout = null;
        // Propagate onLoad event
        this.props.onLoad(cbObj);
        /**
         * Having seen that the securedFields iframes have loaded some kind of content (we don't know what, yet)
         * - setTimeout since we expect to get a successful configuration message "within a reasonable time"
         *
         * Now we catch clientKey & environment mismatch in core.ts - this timeout being called indicates that the securedFields have not all configured
         * - so we need to clear the loading spinner to see if the securedFields are reporting anything
         */ this.csfConfigFailTimeout = setTimeout(() => {
            if (this.state.status !== 'ready') {
                // Hide the spinner
                this.setState({
                    status: 'csfConfigFailure'
                });
                // Report the error
                this.props.onError(new AdyenCheckoutError('ERROR', 'secured fields have failed to configure'));
            }
        }, this.csfConfigFailTimeoutMS);
    }
    /**
     * Emits the onConfigSuccess (ready) event
     * Here we can assume CSF is loaded, configured and ready to be used
     */ function handleOnConfigSuccess(cbObj) {
        // Clear 'config' timeout
        clearTimeout(this.csfConfigFailTimeout);
        this.csfConfigFailTimeout = null;
        this.setState(
            {
                status: 'ready'
            },
            () => {
                // Propagate onConfigSuccess event
                this.props.onConfigSuccess(cbObj);
            }
        );
    }
    /**
     * Emits the onAllValid event
     */ function handleOnAllValid(status) {
        // Form cannot be valid whilst there is an unsupported card
        if (this.state.detectedUnsupportedBrands) {
            return false;
        }
        this.setState(
            {
                isSfpValid: status.allValid
            },
            () => {
                // New - fixes maestro-with-error-on-optional-cvc-field bug
                this.props.onChange(this.state, {
                    event: 'handleOnAllValid'
                });
                // Propagate onAllValid event
                this.props.onAllValid(status);
            }
        );
        return true;
    }
    /**
     * Saves a field value from CSF in the CardInput state
     * Emits the onFieldValid event
     */ function handleOnFieldValid(fieldObj) {
        // A card number field cannot be valid whilst there is an unsupported card
        if (this.state.detectedUnsupportedBrands && fieldObj.fieldType === ENCRYPTED_CARD_NUMBER) {
            return false;
        }
        const setValidFieldState = prevState => ({
            data: {
                ...prevState.data,
                [fieldObj.encryptedFieldName]: fieldObj.blob
            },
            valid: {
                ...prevState.valid,
                [fieldObj.encryptedFieldName]: fieldObj.valid
            },
            /**
             * For a field that has just received valid:true (field has just been completed & encrypted) - mark the error state for this field as false
             * For a field that has just received valid:false (field was encrypted, now is not)
             *  - field is either in a state of being incomplete but without errors (digit deleted) - so mark the error state for this field as false
             *  or has switched from valid/encrypted state to being in error (digit edited to one that puts the field in error) - so keep any error that
             *  might just have been set
             */ errors: {
                ...prevState.errors,
                [fieldObj.fieldType]: prevState.errors[fieldObj.fieldType] ?? false
            }
        });
        this.setState(setValidFieldState, () => {
            this.props.onChange(this.state, {
                event: 'handleOnFieldValid',
                fieldType: fieldObj.fieldType
            });
            // Propagate onFieldValid event
            this.props.onFieldValid(fieldObj);
        });
        return true;
    }
    function fieldIsInError(fieldType, policy, numCharsObj, errorsObj) {
        return (policy === OPTIONAL || policy === HIDDEN) && numCharsObj[fieldType] === 0 ? false : errorsObj[fieldType];
    }
    /**
     * Saves the card brand in state
     * Emits the onBrand event
     */ function handleOnBrand(cardInfo) {
        this.setState(
            prevState => {
                /**
                 * If we change brand to one where the cvc or date field(s) are not required & are empty - then these fields cannot be in error
                 * (scenario: have validated empty form, then choose brand w. optional/hidden cvc or date)...
                 * ...else propagate the existing error.
                 */ const cvcFieldInError = fieldIsInError(ENCRYPTED_SECURITY_CODE, cardInfo.cvcPolicy, this.numCharsInField, prevState.errors);
                const dateFieldInError =
                    this.numDateFields === 1
                        ? fieldIsInError(ENCRYPTED_EXPIRY_DATE, cardInfo.expiryDatePolicy, this.numCharsInField, prevState.errors)
                        : null;
                // For custom card comp
                const monthFieldInError =
                    this.numDateFields === 2
                        ? fieldIsInError(ENCRYPTED_EXPIRY_MONTH, cardInfo.expiryDatePolicy, this.numCharsInField, prevState.errors)
                        : null;
                const yearFieldInError =
                    this.numDateFields === 2
                        ? fieldIsInError(ENCRYPTED_EXPIRY_YEAR, cardInfo.expiryDatePolicy, this.numCharsInField, prevState.errors)
                        : null;
                // --
                /** end */ return {
                    brand: cardInfo.brand,
                    cvcPolicy: cardInfo.cvcPolicy ?? CVC_POLICY_REQUIRED,
                    showSocialSecurityNumber: cardInfo.showSocialSecurityNumber,
                    errors: {
                        ...prevState.errors,
                        ...(existy(cvcFieldInError) && {
                            [ENCRYPTED_SECURITY_CODE]: cvcFieldInError
                        }),
                        ...(existy(dateFieldInError) && {
                            [ENCRYPTED_EXPIRY_DATE]: dateFieldInError
                        }),
                        ...(existy(monthFieldInError) && {
                            [ENCRYPTED_EXPIRY_MONTH]: monthFieldInError
                        }),
                        ...(existy(yearFieldInError) && {
                            [ENCRYPTED_EXPIRY_YEAR]: yearFieldInError
                        })
                    },
                    expiryDatePolicy: cardInfo.expiryDatePolicy ?? DATE_POLICY_REQUIRED
                };
            },
            () => {
                this.props.onChange(this.state, {
                    event: 'handleOnBrand'
                });
                // Enhance data object with the url for the brand image, first checking if the merchant has configured their own one for this brand
                const brandImageUrl = this.props.brandsConfiguration[cardInfo.brand]?.icon ?? getCardImageUrl$1(cardInfo.brand, this.props.resources);
                this.props.onBrand({
                    ...cardInfo,
                    brandImageUrl
                });
            }
        );
    }
    /**
     * Handles validation errors
     */ function handleOnError(cbObj, hasUnsupportedCard = null) {
        const errorCode = cbObj.error;
        this.setState(
            prevState => ({
                errors: {
                    ...prevState.errors,
                    [cbObj.fieldType]: errorCode || false
                },
                // If dealing with an unsupported card ensure these card number related fields are reset re. pasting a full, unsupported card straight in
                ...(hasUnsupportedCard && {
                    data: {
                        ...prevState.data,
                        [ENCRYPTED_CARD_NUMBER]: undefined
                    }
                }),
                ...(hasUnsupportedCard && {
                    valid: {
                        ...prevState.valid,
                        [ENCRYPTED_CARD_NUMBER]: false
                    }
                }),
                ...(hasUnsupportedCard && {
                    isSfpValid: false
                })
            }),
            () => {
                this.props.onChange(this.state, {
                    event: 'handleOnError',
                    fieldType: cbObj.fieldType
                });
            }
        );
        return true;
    }
    function handleFocus(cbObj) {
        this.numCharsInField[cbObj.fieldType] = cbObj.numChars;
        this.props.onFocus(cbObj);
    }
    function handleOnTouchstartIOS(cbObj) {
        // disableIOSArrowKeys is either null or a function (in which case we should call it)
        this.props.disableIOSArrowKeys?.(cbObj);
    }
    // Only called for holder name (from CSF>partials>processAutoComplete)
    function handleOnAutoComplete(cbObj) {
        this.setState(
            {
                autoCompleteName: cbObj.value
            },
            () => {
                this.props.onChange(this.state, {
                    event: 'handleOnAutoComplete',
                    fieldType: cbObj.fieldType
                });
                this.setState({
                    autoCompleteName: null
                }); // Nullify ref after sending it (lets shopper edit holder name)
            }
        );
        this.props.onAutoComplete(cbObj);
    }
    /**
     * Handles cases where no secured fields are necessary (one click payments without CVC)
     * Automatically resolves with a valid state
     */ function handleOnNoDataRequired() {
        this.setState(
            {
                status: 'ready'
            },
            () =>
                this.props.onChange({
                    isSfpValid: true
                })
        );
    }
    var handlers = {
        handleFocus,
        handleOnAllValid,
        handleOnAutoComplete,
        handleOnFieldValid,
        handleOnLoad,
        handleOnConfigSuccess,
        handleOnBrand,
        handleOnError,
        handleOnNoDataRequired,
        handleOnTouchstartIOS
    };

    var defaultProps$8 = {
        type: 'card',
        // Settings
        keypadFix: true,
        rootNode: null,
        loadingContext: null,
        brands: [],
        allowedDOMAccess: false,
        showWarnings: false,
        autoFocus: true,
        trimTrailingSeparator: true,
        // Events
        onChange: () => {},
        onLoad: () => {},
        onConfigSuccess: () => {},
        onAllValid: () => {},
        onFieldValid: () => {},
        onBrand: () => {},
        onError: () => {},
        onBinValue: () => {},
        onFocus: () => {},
        onAutoComplete: () => {},
        // Customization
        styles: {}
    };

    /**
     * SecuredFieldsProvider:
     * Initialises & handles the client-side part of SecuredFields
     */ class SecuredFieldsProvider extends k$1 {
        csfLoadFailTimeout;
        csfLoadFailTimeoutMS;
        csfConfigFailTimeout;
        csfConfigFailTimeoutMS;
        numCharsInField;
        rootNode;
        numDateFields;
        csf;
        handleOnLoad;
        handleOnConfigSuccess;
        handleOnFieldValid;
        handleOnAllValid;
        handleOnBrand;
        handleFocus;
        handleOnError;
        handleOnAutoComplete;
        handleOnNoDataRequired;
        handleOnTouchstartIOS;
        state;
        props;
        issuingCountryCode;
        constructor(props) {
            super(props);
            const stateObj = {
                status: 'loading',
                brand: props.type,
                errors: {},
                valid: {},
                data: {},
                cvcPolicy: CVC_POLICY_REQUIRED,
                expiryDatePolicy: DATE_POLICY_REQUIRED,
                isSfpValid: false,
                hasKoreanFields: props.hasKoreanFields
            };
            this.state = stateObj;
            this.csfLoadFailTimeout = null;
            this.csfLoadFailTimeoutMS = 30000;
            this.csfConfigFailTimeout = null;
            this.csfConfigFailTimeoutMS = 15000;
            this.numCharsInField = {};
            // Handlers
            this.handleOnLoad = handlers.handleOnLoad.bind(this);
            this.handleOnConfigSuccess = handlers.handleOnConfigSuccess.bind(this);
            this.handleOnFieldValid = handlers.handleOnFieldValid.bind(this);
            this.handleOnAllValid = handlers.handleOnAllValid.bind(this);
            this.handleOnBrand = handlers.handleOnBrand.bind(this);
            this.handleFocus = handlers.handleFocus.bind(this);
            this.handleOnError = handlers.handleOnError.bind(this);
            this.handleOnNoDataRequired = handlers.handleOnNoDataRequired.bind(this);
            this.handleOnAutoComplete = handlers.handleOnAutoComplete.bind(this);
            this.handleOnTouchstartIOS = handlers.handleOnTouchstartIOS.bind(this); // Only called when iOS detected
            this.processBinLookupResponse = this.processBinLookupResponse.bind(this);
            // Bindings for functions exposed to users of this component: SecuredFields & CardInput
            this.setFocusOn = this.setFocusOn.bind(this);
            this.updateStyles = this.updateStyles.bind(this);
            this.handleUnsupportedCard = this.handleUnsupportedCard.bind(this);
            this.showValidation = this.showValidation.bind(this);
            this.destroy = this.destroy.bind(this);
        }
        static defaultProps = defaultProps$8;
        componentDidMount() {
            // When SFP instantiated through SecuredFieldsInput c.f. CardInput
            if (this.props.rootNode) {
                this.setRootNode(this.props.rootNode);
            }
            // Find encryptedFields and map them to the values we use to store valid states
            const fields = getFields(this.rootNode);
            const valid = fields.reduce(validFieldsReducer, {});
            this.setState({
                valid
            });
            // Populate numCharsInField object
            fields.forEach(field => {
                this.numCharsInField[field] = 0;
            });
            // Store how many dateFields we are dealing with visually
            this.numDateFields = fields.filter(f => f.match(/Expiry/)).length;
            if (fields.length) {
                this.destroy(); // TODO test if this solves the React double render problem.
                this.initializeCSF(this.rootNode);
            } else {
                this.handleOnNoDataRequired();
            }
        }
        componentDidUpdate() {
            this.checkForKCPFields();
        }
        componentWillUnmount() {
            this.csf = null;
        }
        initializeCSF(root) {
            let loadingContext = this.props.loadingContext;
            const csfSetupObj = {
                rootNode: root,
                type: this.props.type,
                clientKey: this.props.clientKey,
                cardGroupTypes: this.props.brands,
                allowedDOMAccess: this.props.allowedDOMAccess,
                autoFocus: this.props.autoFocus,
                trimTrailingSeparator: this.props.trimTrailingSeparator,
                loadingContext,
                keypadFix: this.props.keypadFix,
                showWarnings: this.props.showWarnings,
                iframeUIConfig: {
                    sfStyles: this.props.styles
                },
                i18n: this.props.i18n,
                callbacks: {
                    onLoad: this.handleOnLoad,
                    onConfigSuccess: this.handleOnConfigSuccess,
                    onFieldValid: this.handleOnFieldValid,
                    onAllValid: this.handleOnAllValid,
                    onBrand: this.handleOnBrand,
                    onError: this.handleOnError,
                    onFocus: this.handleFocus,
                    onBinValue: this.props.onBinValue,
                    onAutoComplete: this.handleOnAutoComplete,
                    onAdditionalSFConfig: this.props.onAdditionalSFConfig,
                    onAdditionalSFRemoved: this.props.onAdditionalSFRemoved,
                    onTouchstartIOS: this.handleOnTouchstartIOS
                },
                isKCP: this.state.hasKoreanFields,
                legacyInputMode: this.props.legacyInputMode,
                minimumExpiryDate: this.props.minimumExpiryDate,
                implementationType: this.props.implementationType || 'components',
                forceCompat: this.props.forceCompat,
                maskSecurityCode: this.props.maskSecurityCode,
                disableIOSArrowKeys: !!this.props.disableIOSArrowKeys
            };
            this.csf = initCSF(csfSetupObj);
            /**
             * Expect to at least have had the handleOnLoad callback called within this time
             * - if this hasn't happened then something has happened to interrupt the loading of the securedFields
             * So we need to clear the loading spinner to see if the securedFields are reporting anything
             */ // @ts-ignore - timout 'type' is a number
            this.csfLoadFailTimeout = setTimeout(() => {
                if (this.state.status !== 'ready') {
                    // Hide the spinner
                    this.setState({
                        status: 'csfLoadFailure'
                    });
                    // Report the error
                    this.props.onError(new AdyenCheckoutError('ERROR', 'secured field iframes have failed to load'));
                }
            }, this.csfLoadFailTimeoutMS);
        }
        checkForKCPFields() {
            let needsKoreanFields = false;
            if (this.props.koreanAuthenticationRequired) {
                needsKoreanFields = this.issuingCountryCode ? this.issuingCountryCode === 'kr' : this.props.countryCode === 'kr';
            }
            // Was korean, now isn't - hide password field
            if (this.state.hasKoreanFields && !needsKoreanFields) {
                // Clear any stored data
                const setRemovedFieldState = prevState => ({
                    data: {
                        ...prevState.data,
                        [ENCRYPTED_PWD_FIELD]: undefined
                    },
                    valid: {
                        ...prevState.valid,
                        [ENCRYPTED_PWD_FIELD]: false
                    },
                    errors: {
                        ...prevState.errors,
                        [ENCRYPTED_PWD_FIELD]: false
                    },
                    hasKoreanFields: false
                });
                this.setState(setRemovedFieldState, () => {
                    this.props.onChange(this.state);
                });
                this.csf.removeSecuredField(ENCRYPTED_PWD_FIELD);
                this.csf.setKCPStatus(false);
            }
            // Wasn't korean, now is - show password field
            if (!this.state.hasKoreanFields && needsKoreanFields) {
                const setAddedFieldState = prevState => ({
                    valid: {
                        ...prevState.valid,
                        [ENCRYPTED_PWD_FIELD]: false
                    },
                    hasKoreanFields: true,
                    isSfpValid: false
                });
                this.setState(setAddedFieldState, () => {
                    this.props.onChange(this.state);
                });
                this.csf.addSecuredField(ENCRYPTED_PWD_FIELD);
                this.csf.setKCPStatus(true);
            }
        }
        getChildContext() {
            return {
                i18n: this.props.i18n
            };
        }
        handleUnsupportedCard(errObj) {
            const hasUnsupportedCard = !!errObj.error;
            // Store the brand(s) we detected and which we don't support
            if (hasUnsupportedCard) {
                this.setState({
                    detectedUnsupportedBrands: errObj.detectedBrands
                });
            }
            errObj.rootNode = this.rootNode; // Needed for CustomCard
            this.handleOnError(errObj, hasUnsupportedCard);
            // Inform CSF that the number field has an unsupportedCard error (or that it has been cleared)
            if (this.csf) {
                this.csf.hasUnsupportedCard(ENCRYPTED_CARD_NUMBER, errObj.error);
            }
            return hasUnsupportedCard;
        }
        setFocusOn(frame) {
            if (this.csf) this.csf.setFocusOnFrame(frame);
        }
        updateStyles(stylesObj) {
            if (this.csf) this.csf.updateStyles(stylesObj);
        }
        sfIsOptionalOrHidden(fieldType) {
            return this.csf.sfIsOptionalOrHidden(fieldType);
        }
        destroy() {
            if (this.csf) this.csf.destroy();
        }
        showValidation() {
            const { numDateFields, state } = this;
            Object.keys(state.valid)
                .reduce(getErrorReducer(numDateFields, state), [])
                .forEach(field => {
                    // For each detected error pass an error object to the handler (calls error callback & sets state)
                    const errorObj = getErrorObject(field, this.rootNode, state);
                    this.handleOnError(errorObj, !!state.detectedUnsupportedBrands);
                    // Inform the secured-fields instance of which fields have been found to have errors
                    if (this.csf && this.csf.isValidated) {
                        this.csf.isValidated(field, errorObj.error);
                    }
                });
        }
        /**
         * Map SF errors to ValidationRuleResult-like objects, for CardInput component
         */ mapErrorsToValidationRuleResult() {
            const errorKeys = Object.keys(this.state.errors);
            const sfStateErrorsObj = errorKeys.reduce((acc, key) => {
                if (this.state.errors[key]) {
                    acc[key] = {
                        isValid: false,
                        errorMessage: getError(this.state.errors[key]),
                        // For v5 the object found in state.errors should also contain the additional properties that used to be sent to the onError callback
                        // namely: translation, errorCode, a ref to rootNode &, in the case of failed binLookup, an array of the detectedBrands
                        errorI18n: this.props.i18n.get(this.state.errors[key]),
                        error: this.state.errors[key],
                        rootNode: this.rootNode,
                        ...(this.state.detectedUnsupportedBrands && {
                            detectedBrands: this.state.detectedUnsupportedBrands
                        })
                    };
                } else {
                    acc[key] = null;
                }
                return acc;
            }, {});
            return sfStateErrorsObj;
        }
        processBinLookupResponse(binLookupResponse, resetObject) {
            // If we were dealing with an unsupported card & now we have a valid /binLookup response (or a response triggering a reset of the UI),
            // - reset state to clear the error & the stored unsupportedBrands and, in the case of a valid /binLookup response, inform CSF (via handleUnsupportedCard)
            // (Scenario: from an unsupportedCard state the shopper has pasted another number long enough to trigger a /binLookup)
            if (this.state.detectedUnsupportedBrands) {
                this.setState(prevState => ({
                    errors: {
                        ...prevState.errors,
                        [ENCRYPTED_CARD_NUMBER]: false
                    },
                    detectedUnsupportedBrands: null
                }));
                // If we have some sort of binLookupResponse object then this isn't the reset caused by digits dropping below a threshold
                // - so call handleUnsupportedCard to clear the error
                if (this.csf && binLookupResponse) {
                    const errObj = {
                        type: 'card',
                        fieldType: 'encryptedCardNumber',
                        error: ''
                    };
                    this.handleUnsupportedCard(errObj);
                }
            }
            this.issuingCountryCode = binLookupResponse?.issuingCountryCode?.toLowerCase();
            const hasBrandedResetObj = resetObject?.brand;
            /**
             * Are we dealing with a "dedicated" card scenario i.e a card component created as: checkout.create('bcmc') but which can accept multiple brands
             * - in which case we will need to reset brand and pass on the resetObj to CSF
             */ const mustResetDedicatedBrand = hasBrandedResetObj && DEDICATED_CARD_COMPONENTS.includes(resetObject.brand);
            if (mustResetDedicatedBrand) {
                // resetObject.brand will be the value of the brand whose logo we want to reshow in the UI
                this.setState(resetObject, () => {
                    this.props.onChange(this.state);
                });
            }
            /**
             * Scenarios:
             *
             * - RESET (binLookupResponse === null): The number of digits in number field has dropped below threshold for BIN lookup
             * - RESULT (binLookupResponse.supportedBrands.length === 1): binLookup has found a result so inform CSF
             *
             * In the RESET scenario, for "dedicated" card components we also need to pass on the resetObject since this contains information about
             * the brand that CSF needs to reset to, internally.
             */ if (this.csf) this.csf.brandsFromBinLookup(binLookupResponse, mustResetDedicatedBrand ? resetObject : null);
        }
        setRootNode = input => {
            this.rootNode = input;
        };
        render(props, state) {
            return props.render(
                {
                    setRootNode: this.setRootNode,
                    setFocusOn: this.setFocusOn
                },
                state
            );
        }
    }

    var AddressModeOptions;
    (function (AddressModeOptions) {
        AddressModeOptions['full'] = 'full';
        AddressModeOptions['partial'] = 'partial';
        AddressModeOptions['none'] = 'none';
    })(AddressModeOptions || (AddressModeOptions = {}));

    var defaultProps$7 = {
        type: 'card',
        setComponentRef: () => {},
        // Settings
        hasHolderName: false,
        holderNameRequired: false,
        enableStoreDetails: false,
        hasCVC: true,
        showBrandIcon: true,
        showBrandsUnderCardNumber: true,
        positionHolderNameOnTop: false,
        billingAddressRequired: false,
        billingAddressMode: AddressModeOptions.full,
        billingAddressRequiredFields: ['street', 'houseNumberOrName', 'postalCode', 'city', 'stateOrProvince', 'country'],
        installmentOptions: {},
        configuration: {
            koreanAuthenticationRequired: false,
            socialSecurityNumberMode: 'auto'
        },
        autoFocus: true,
        isPayButtonPrimaryVariant: true,
        disableIOSArrowKeys: true,
        // Events
        onLoad: () => {},
        onConfigSuccess: () => {},
        onAllValid: () => {},
        onFieldValid: () => {},
        onBrand: () => {},
        onError: () => {},
        onBinValue: () => {},
        onBlur: () => {},
        onFocus: () => {},
        onChange: () => {},
        // Values
        data: {
            billingAddress: {}
        },
        // Customization
        styles: {},
        placeholders: {}
    };

    var defaultStyles$1 = {
        base: {
            caretColor: '#0075FF'
        }
    };

    const CPF_LENGTH = 11;

    function maskCPF(value) {
        return value
            .replace(/\W/gi, '')
            .replace(/(\d{3})(?!$)/g, '$1.')
            .replace(/(.{11}).(\d{1,2})$/g, '$1-$2');
    }
    function maskCNPJ(value) {
        return value.replace(
            /^(\d{2})(\d{3})(\d{3})?(\d{4})?(\d{1,2})?$/g,
            (match, g1, g2, g3, g4 = '', g5 = '') => `${g1}.${g2}.${g3}/${g4}${g5.length ? `-${g5}` : ''}`
        );
    }
    function cleanCPFCNPJ(value) {
        return value.replace(/[^0-9]/g, '').trim();
    }
    function formatCPFCNPJ(value = '') {
        if (typeof value !== 'string') return '';
        const cleanValue = cleanCPFCNPJ(value);
        const formattedValue = cleanValue.length > CPF_LENGTH ? maskCNPJ(cleanValue) : maskCPF(cleanValue);
        return formattedValue;
    }

    function validateSSN(ssn) {
        return /(^\d{3}\.\d{3}\.\d{3}-\d{2}$)|(^\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}$)/.test(ssn);
    }

    const MAX_LENGTH = 30;
    const getMaxLengthByFieldAndCountry = (formattingRules, field, country, ignoreIfFormatterExists) => {
        // In ignoreIfFormatterExists is true we expect the formatter function to also act to limit length
        if (ignoreIfFormatterExists && formattingRules[country]?.[field]?.formatterFn) {
            return null;
        }
        const maxLength = formattingRules[country]?.[field]?.maxlength;
        return maxLength ? maxLength : MAX_LENGTH;
    };
    // Not null or undefined or only spaces
    const isEmpty = input => !!(input == null || /^[\s]*$/.test(input));
    const SPECIAL_CHARS = '?\\+_=!@#$%^&*(){}~<>\\[\\]\\/\\\\'; // N.B. difficulty escaping \
    // Generates a regEx ideal for use in a String.replace call for use in a formatter
    // e.g. getFormattingRegEx('^\\d', 'g') will generate: /[^\d]/g which is a regEx to match anything that is not a digit
    const getFormattingRegEx = (specChars, flags = 'g') => new RegExp(`[${specChars}]`, flags);
    // Trim start and never allow more than 1 space on the end
    const trimValWithOneSpace = val => val.trimStart().replace(/\s+/g, ' ');

    const cardInputFormatters = {
        socialSecurityNumber: formatCPFCNPJ
    };
    const cardInputValidationRules = {
        socialSecurityNumber: [
            {
                modes: ['blur'],
                validate: value => {
                    if (isEmpty(value)) return null;
                    return validateSSN(value);
                },
                errorMessage: 'boleto.socialSecurityNumber.invalid'
            }
        ],
        taxNumber: [
            {
                modes: ['blur'],
                validate: value => (isEmpty(value) ? null : value?.length === 6 || value?.length === 10),
                errorMessage: 'creditCard.taxNumber.invalid'
            }
        ],
        holderName: [
            {
                // Will fire at startup and when triggerValidation is called and also applies as text is input
                modes: ['blur'],
                validate: value => (isEmpty(value) ? null : true),
                errorMessage: 'creditCard.holderName.invalid'
            }
        ],
        default: [
            {
                modes: ['blur'],
                // ensuring we don't try to run this against objects e.g. billingAddress
                validate: value => !!value && typeof value === 'string' && value.trim().length > 0
            }
        ]
    };
    const getRuleByNameAndMode = (name, mode) => {
        const ruleArr = cardInputValidationRules[name];
        const rule = ruleArr.reduce((acc, elem) => {
            if (!acc.length) {
                if (elem.modes.includes(mode)) {
                    acc.push(elem.validate);
                }
            }
            return acc;
        }, []);
        return rule[0];
    };

    /**
     * Creates an object used for setting state - that will trigger the rendering of a select element to allow a choice between 2 different card variants
     * @param brandObjArr - array containing 2 card brands objects
     */ function createCardVariantSwitcher(brandObjArr) {
        const [leadBrand, subBrand] = brandObjArr;
        return {
            dualBrandSelectElements: [
                {
                    id: leadBrand.brand,
                    brandObject: leadBrand
                },
                {
                    id: subBrand.brand,
                    brandObject: subBrand
                }
            ],
            selectedBrandValue: '',
            leadBrand
        };
    }

    // Externally testable utils
    const containsExcludedBrand = (brandsArr, excludedBrands) => {
        return brandsArr.reduce((acc, brandObj) => acc || excludedBrands.includes(brandObj.brand), false);
    };
    const cloneBrandsArr = brandsArr =>
        brandsArr.map(item => ({
            ...item
        }));
    const removeExcludedBrand = (brandsArr, mainBrand1 = 'mc', mainBrand2 = 'visa') => {
        const clonedBrands = cloneBrandsArr(brandsArr);
        if (clonedBrands[0].brand !== mainBrand1 && clonedBrands[0].brand !== mainBrand2) clonedBrands.reverse();
        clonedBrands.length = 1;
        return clonedBrands;
    };
    // --
    function extensions(props, refs, states, hasPanLengthRef = {}) {
        // Destructure props, refs and state hooks
        const { type, cvcPolicy } = props;
        const { sfp } = refs;
        const { dualBrandSelectElements, setDualBrandSelectElements, setSelectedBrandValue, issuingCountryCode, setIssuingCountryCode } = states;
        return {
            /**
             * Handle the binLookup response object generated in triggerBinLookup and process it in relation to the CardInput and it's sub-components.
             * e.g. we might need to add/remove additional markup (a selector for brands), and inform SFP of the issuingCountryCode & detected brand(s).
             *
             * @param binLookupResponse -
             * @param isReset -
             */ processBinLookup: (binLookupResponse, isReset) => {
                const issuingCode = binLookupResponse?.issuingCountryCode ? binLookupResponse.issuingCountryCode.toLowerCase() : null;
                setIssuingCountryCode(issuingCode);
                // Reset UI
                if (!binLookupResponse || !Object.keys(binLookupResponse).length) {
                    setDualBrandSelectElements([]);
                    setSelectedBrandValue('');
                    // If /binLookup has 'reset' then for a generic card the internal regex will kick in to show the right brand icon - so set to null
                    // However for a single-branded card we need to pass the "base" type so the brand logo is reset - so set to type
                    const brandToReset = isReset && type !== 'card' ? type : null;
                    sfp.current.processBinLookupResponse(binLookupResponse, {
                        brand: brandToReset,
                        cvcPolicy: cvcPolicy // undefined except for Bancontact
                    });
                    // Reset storage var
                    hasPanLengthRef.current = 0;
                    return;
                }
                // RESULT: binLookup has found a result so proceed accordingly
                if (binLookupResponse.supportedBrands?.length) {
                    const hasExcludedBrand = containsExcludedBrand(binLookupResponse.supportedBrands, BRAND_ICON_UI_EXCLUSION_LIST);
                    const supportedBrands = hasExcludedBrand
                        ? removeExcludedBrand(binLookupResponse.supportedBrands)
                        : cloneBrandsArr(binLookupResponse.supportedBrands);
                    // 1) Multiple options found - add to the UI & inform SFP
                    if (supportedBrands.length > 1) {
                        // --
                        const switcherObj = createCardVariantSwitcher(supportedBrands);
                        // Set properties on state to trigger the dual branding icons in the UI
                        setDualBrandSelectElements(switcherObj.dualBrandSelectElements);
                        setSelectedBrandValue(switcherObj.selectedBrandValue); // initially this value from switcherObj will be ''
                        // Pass an object through to SFP
                        sfp.current.processBinLookupResponse({
                            issuingCountryCode: binLookupResponse.issuingCountryCode,
                            supportedBrands: [switcherObj.leadBrand]
                        });
                        // Store the fact the binLookup obj has a panLength prop
                        if (switcherObj.leadBrand.panLength > 0) {
                            hasPanLengthRef.current = switcherObj.leadBrand.panLength;
                        }
                        // 2) Single option found (binValueObject.supportedBrands.length === 1)
                    } else {
                        // Reset UI
                        setDualBrandSelectElements([]);
                        setSelectedBrandValue('');
                        // Set (single) value from binLookup so it will be added to the 'brand' property in the paymentMethod object
                        // EXCEPT - if we are dealing with a brand that we exclude from the UI
                        if (!hasExcludedBrand) setSelectedBrandValue(supportedBrands[0].brand);
                        // Pass object through to SFP
                        sfp.current.processBinLookupResponse({
                            issuingCountryCode: binLookupResponse.issuingCountryCode,
                            supportedBrands
                        });
                        // Store the fact the binLookup obj has a panLength prop
                        if (supportedBrands[0].panLength > 0) {
                            hasPanLengthRef.current = supportedBrands[0].panLength;
                        }
                    }
                }
            },
            /**
             * Handler for clicks on the icons added in response to the /binLookup call
             * Inform SFP of the brand changes when these selections are made
             */ handleDualBrandSelection: e => {
                let value = e;
                if (e instanceof Event) {
                    const target = e.target;
                    value = target.getAttribute('data-value') || target.getAttribute('alt');
                }
                setSelectedBrandValue(value);
                // Find the brandObject with the matching brand value and place into an array
                const brandObjArr = dualBrandSelectElements.reduce((acc, item) => {
                    if (item.brandObject.brand === value) {
                        acc.push(item.brandObject);
                    }
                    return acc;
                }, []);
                // Pass brand object into SecuredFields
                sfp.current.processBinLookupResponse({
                    issuingCountryCode,
                    supportedBrands: brandObjArr
                });
            }
        };
    }

    class ValidationResult {
        validationResults;
        constructor(results) {
            this.validationResults = results;
        }
        /** Checks if all validation rules have passed */ get isValid() {
            return this.validationResults.reduce((acc, result) => acc && result.isValid, true);
        }
        /** Checks if any validation rule returned an error */ hasError(isValidatingForm = false) {
            return Boolean(this.getError(isValidatingForm));
        }
        /** Returns the first validation result that returned an error */ getError(isValidatingForm = false) {
            return this.validationResults.find(result => result.hasError(isValidatingForm));
        }
        /** Returns all validation results that returned an error */ getAllErrors() {
            return this.validationResults.filter(result => result.hasError());
        }
    }
    class Validator {
        rules = {
            default: {
                validate: () => true,
                modes: ['blur', 'input']
            }
        };
        constructor(rules) {
            this.setRules(rules);
        }
        setRules(newRules) {
            this.rules = {
                ...this.rules,
                ...newRules
            };
        }
        /**
         * Get all validation rules for a field
         */ getRulesFor(field) {
            let fieldRules = this.rules[field] ?? this.rules['default'];
            if (!Array.isArray(fieldRules)) {
                fieldRules = [fieldRules];
            }
            return fieldRules;
        }
        /**
         * Validates a field
         */ validate({ key, value, mode = 'blur' }, context) {
            const fieldRules = this.getRulesFor(key);
            const validationRulesResult = fieldRules.map(rule => new ValidationRuleResult(rule, value, mode, context));
            return new ValidationResult(validationRulesResult);
        }
    }

    const omitKeys = (obj, omit) =>
        Object.keys(obj)
            .filter(k => !omit.includes(k))
            .reduce((a, c) => {
                a[c] = obj[c];
                return a;
            }, {});
    const addKeys = (obj, add, initialValue, defaultData, pendingData) =>
        add.reduce(
            (a, c) => ({
                ...a,
                [c]: a[c] ?? pendingData?.[c] ?? defaultData?.[c] ?? initialValue
            }),
            obj
        );
    /**
     * Processes default data and sets as default in state
     */ function init({ schema, defaultData, processField, fieldProblems }) {
        const getProcessedState = fieldKey => {
            if (typeof defaultData[fieldKey] === 'undefined')
                return {
                    valid: false,
                    errors: null,
                    data: null,
                    fieldProblems: fieldProblems?.[fieldKey] ?? null
                };
            const [formattedValue, validationResult] = processField(
                {
                    key: fieldKey,
                    value: defaultData[fieldKey],
                    mode: 'blur'
                },
                {
                    state: {
                        data: defaultData
                    }
                }
            );
            return {
                valid: (validationResult.isValid && !fieldProblems?.[fieldKey]) || false,
                errors: validationResult.hasError() ? validationResult.getError() : null,
                data: formattedValue,
                fieldProblems: fieldProblems?.[fieldKey] ?? null
            };
        };
        const formData = schema.reduce(
            (acc, fieldKey) => {
                const { valid, errors, data, fieldProblems } = getProcessedState(fieldKey);
                return {
                    valid: {
                        ...acc.valid,
                        [fieldKey]: valid
                    },
                    errors: {
                        ...acc.errors,
                        [fieldKey]: errors
                    },
                    data: {
                        ...acc.data,
                        [fieldKey]: data
                    },
                    fieldProblems: {
                        ...acc.fieldProblems,
                        [fieldKey]: fieldProblems
                    }
                };
            },
            {
                data: {},
                valid: {},
                errors: {},
                fieldProblems: {}
            }
        );
        return {
            schema,
            data: formData.data,
            valid: formData.valid,
            errors: formData.errors,
            fieldProblems: formData.fieldProblems
        };
    }
    function getReducer(processField) {
        return function reducer(state, { type, key, value, mode, schema, defaultData, formValue, selectedSchema, fieldProblems }) {
            const validationSchema = selectedSchema || state.schema;
            switch (type) {
                case 'setData': {
                    return {
                        ...state,
                        data: {
                            ...state['data'],
                            [key]: value
                        }
                    };
                }
                case 'setValid': {
                    return {
                        ...state,
                        valid: {
                            ...state['valid'],
                            [key]: value
                        }
                    };
                }
                case 'setErrors': {
                    return {
                        ...state,
                        errors: {
                            ...state['errors'],
                            [key]: value
                        }
                    };
                }
                case 'setFieldProblems': {
                    return (
                        state?.schema?.reduce(
                            (acc, key) => ({
                                ...acc,
                                fieldProblems: {
                                    ...state['fieldProblems'],
                                    [key]: fieldProblems?.[key] ?? null
                                },
                                valid: {
                                    ...state['valid'],
                                    [key]: state['valid']?.[key] && !fieldProblems[key]
                                }
                            }),
                            state
                        ) ?? state
                    );
                }
                case 'updateField': {
                    const [formattedValue, validation] = processField(
                        {
                            key,
                            value,
                            mode
                        },
                        {
                            state
                        }
                    );
                    const oldValue = state.data[key];
                    const fieldProblems = {
                        ...state.fieldProblems
                    };
                    if (oldValue !== formattedValue) {
                        fieldProblems[key] = null;
                    }
                    return {
                        ...state,
                        data: {
                            ...state['data'],
                            [key]: formattedValue
                        },
                        errors: {
                            ...state['errors'],
                            [key]: validation.hasError() ? validation.getError() : null
                        },
                        valid: {
                            ...state['valid'],
                            [key]: (validation.isValid && !fieldProblems[key]) || false
                        },
                        fieldProblems
                    };
                }
                case 'mergeForm': {
                    // To provide a uniform result from forms even if there are multiple levels of nested forms are present
                    const mergedState = {
                        ...state,
                        data: {
                            ...state['data'],
                            ...formValue['data']
                        },
                        errors: {
                            ...state['errors'],
                            ...formValue['errors']
                        },
                        valid: {
                            ...state['valid'],
                            ...formValue['valid']
                        },
                        fieldProblems: {
                            ...state['fieldProblems'],
                            ...formValue['fieldProblems']
                        }
                    };
                    if (mergedState['valid']) {
                        mergedState.isValid = Object.values(mergedState.valid).every(isValid => isValid);
                    }
                    return mergedState;
                }
                case 'setSchema': {
                    const defaultState = init({
                        schema,
                        defaultData,
                        processField,
                        fieldProblems
                    });
                    const removedSchemaFields = state.schema.filter(x => !schema.includes(x));
                    const newSchemaFields = schema.filter(x => !state.schema.includes(x));
                    // if we remove a key from the schema we also lost the latest value of the field
                    // to prevent this we have to store the value in a local state so we can recover it when the key is re-added to the schema
                    const local = {
                        data: omitKeys(state.data, newSchemaFields),
                        errors: omitKeys(state.errors, newSchemaFields),
                        valid: omitKeys(state.valid, newSchemaFields)
                    };
                    // reindex data and validation according to the new schema
                    const data = addKeys(omitKeys(state.data, removedSchemaFields), newSchemaFields, null, defaultState.data, state.local?.data);
                    const valid = addKeys(omitKeys(state.valid, removedSchemaFields), newSchemaFields, false, defaultState.valid, state.local?.valid);
                    const errors = addKeys(
                        omitKeys(state.errors, removedSchemaFields),
                        newSchemaFields,
                        null,
                        defaultState.errors,
                        state.local?.errors
                    );
                    return {
                        ...state,
                        schema,
                        data,
                        valid,
                        errors,
                        local
                    };
                }
                case 'validateForm': {
                    const formValidation = validationSchema.reduce(
                        (acc, cur) => {
                            const [, validation] = processField(
                                {
                                    key: cur,
                                    value: state.data[cur],
                                    mode: 'blur'
                                },
                                {
                                    state
                                }
                            );
                            return {
                                valid: {
                                    ...acc['valid'],
                                    [cur]: (validation.isValid && !state.fieldProblems[cur]) || false
                                },
                                errors: {
                                    ...acc['errors'],
                                    [cur]: validation.hasError(true) ? validation.getError(true) : null
                                }
                            };
                        },
                        {
                            valid: state.valid,
                            errors: state.errors
                        }
                    );
                    return {
                        ...state,
                        valid: formValidation.valid,
                        errors: formValidation.errors
                    };
                }
                default:
                    throw new Error('Undefined useForm action');
            }
        };
    }

    function isFormatterObject(formatter) {
        return formatter && 'formatterFn' in formatter;
    }
    function useForm(props) {
        const { rules = {}, formatters = {}, defaultData = {}, fieldProblems = {}, schema = [] } = props;
        const validator = F(() => new Validator(rules), [rules]);
        /** Formats and validates a field */ const processField = ({ key, value, mode }, fieldContext) => {
            // Find a formatting function either stored under 'key' or a level deeper under a 'formatter' property
            const formatter = formatters?.[key];
            const formatterFn = isFormatterObject(formatter) ? formatter.formatterFn : formatter;
            const formattedValue = formatterFn && typeof formatterFn === 'function' ? formatterFn(value ?? '', fieldContext) : value;
            const validationResult = validator.validate(
                {
                    key,
                    value: formattedValue,
                    mode
                },
                fieldContext
            );
            return [formattedValue, validationResult];
        };
        const [state, dispatch] = s(
            getReducer(processField),
            {
                defaultData,
                schema: schema ?? [],
                processField,
                fieldProblems
            },
            init
        );
        const isValid = F(() => state.schema.reduce((acc, val) => acc && state.valid[val], true), [state.schema, state.valid]);
        const getTargetValue = (key, e) => {
            if (!e.target) return e;
            if (e.target.type === 'checkbox') {
                return !state.data[key];
            }
            return e.target.value;
        };
        /** Formats, validates, and stores a new value for a form field */ const handleChangeFor = (key, mode) => {
            return e => {
                const value = getTargetValue(key, e);
                dispatch({
                    type: 'updateField',
                    key,
                    value,
                    mode
                });
            };
        };
        /** Validates every field in the form OR just those in selectedSchema */ const triggerValidation = T((selectedSchema = null) => {
            dispatch({
                type: 'validateForm',
                selectedSchema
            });
        }, []);
        const setErrors = T(
            (key, value) =>
                dispatch({
                    type: 'setErrors',
                    key,
                    value
                }),
            []
        );
        const setValid = T(
            (key, value) =>
                dispatch({
                    type: 'setValid',
                    key,
                    value
                }),
            []
        );
        const setData = T(
            (key, value) =>
                dispatch({
                    type: 'setData',
                    key,
                    value
                }),
            []
        );
        const setSchema = T(
            schema =>
                dispatch({
                    type: 'setSchema',
                    schema,
                    defaultData
                }),
            [state.schema]
        );
        const mergeForm = T(
            formValue =>
                dispatch({
                    type: 'mergeForm',
                    formValue
                }),
            []
        );
        const setFieldProblems = T(
            fieldProblems =>
                dispatch({
                    type: 'setFieldProblems',
                    fieldProblems
                }),
            [state.schema]
        );
        // Set reducer fields problems if fieldProblems prop changes
        p(() => {
            setFieldProblems(fieldProblems ?? {});
        }, [JSON.stringify(fieldProblems)]);
        return {
            handleChangeFor,
            triggerValidation,
            setSchema,
            setData,
            setValid,
            setErrors,
            isValid,
            mergeForm,
            setFieldProblems,
            schema: state.schema,
            valid: state.valid,
            errors: state.errors,
            data: state.data,
            fieldProblems: state.fieldProblems
        };
    }

    const TAX_NUMBER = 'taxNumber';
    const HOLDER_NAME = 'holderName';
    const SSN_FIELD = 'socialSecurityNumber';
    const CREDIT_CARD = [ENCRYPTED_CARD_NUMBER, ENCRYPTED_EXPIRY_DATE, ENCRYPTED_SECURITY_CODE];
    const CREDIT_CARD_NAME_TOP = [HOLDER_NAME, ENCRYPTED_CARD_NUMBER, ENCRYPTED_EXPIRY_DATE, ENCRYPTED_SECURITY_CODE];
    const CREDIT_CARD_NAME_BOTTOM = [ENCRYPTED_CARD_NUMBER, ENCRYPTED_EXPIRY_DATE, ENCRYPTED_SECURITY_CODE, HOLDER_NAME];
    const KCP_FIELDS = [TAX_NUMBER, ENCRYPTED_PWD_FIELD];
    const KCP_CARD = CREDIT_CARD.concat(KCP_FIELDS);
    const KCP_CARD_NAME_TOP = CREDIT_CARD_NAME_TOP.concat(KCP_FIELDS);
    const KCP_CARD_NAME_BOTTOM = CREDIT_CARD_NAME_BOTTOM.concat(KCP_FIELDS);
    const SSN_CARD = CREDIT_CARD.concat([SSN_FIELD]);
    const SSN_CARD_NAME_TOP = CREDIT_CARD_NAME_TOP.concat([SSN_FIELD]);
    const SSN_CARD_NAME_BOTTOM = CREDIT_CARD_NAME_BOTTOM.concat([SSN_FIELD]);

    const FALLBACK_VALUE = 'N/A';
    const ADDRESS_SCHEMA = ['street', 'houseNumberOrName', 'postalCode', 'city', 'stateOrProvince', 'country'];
    const [STREET, HOUSE_NUMBER_OR_NAME, POSTAL_CODE, CITY, STATE_OR_PROVINCE, COUNTRY] = ADDRESS_SCHEMA;
    // prettier-ignore
    const ADDRESS_SPECIFICATIONS = {
    AU: {
        hasDataset: true,
        labels: {
            [HOUSE_NUMBER_OR_NAME]: 'apartmentSuite',
            [STATE_OR_PROVINCE]: 'state',
            [STREET]: 'address'
        },
        optionalFields: [
            HOUSE_NUMBER_OR_NAME
        ],
        placeholders: {
            [STATE_OR_PROVINCE]: 'select.state'
        },
        schema: [
            COUNTRY,
            STREET,
            HOUSE_NUMBER_OR_NAME,
            CITY,
            [
                [
                    STATE_OR_PROVINCE,
                    50
                ],
                [
                    POSTAL_CODE,
                    50
                ]
            ]
        ]
    },
    BR: {
        hasDataset: true,
        labels: {
            [STATE_OR_PROVINCE]: 'state'
        },
        placeholders: {
            [STATE_OR_PROVINCE]: 'select.state'
        }
    },
    CA: {
        hasDataset: true,
        labels: {
            [HOUSE_NUMBER_OR_NAME]: 'apartmentSuite',
            [STATE_OR_PROVINCE]: 'provinceOrTerritory',
            [STREET]: 'address'
        },
        optionalFields: [
            HOUSE_NUMBER_OR_NAME
        ],
        schema: [
            COUNTRY,
            STREET,
            HOUSE_NUMBER_OR_NAME,
            [
                [
                    CITY,
                    70
                ],
                [
                    POSTAL_CODE,
                    30
                ]
            ],
            STATE_OR_PROVINCE
        ]
    },
    GB: {
        labels: {
            [CITY]: 'cityTown'
        },
        schema: [
            COUNTRY,
            [
                [
                    HOUSE_NUMBER_OR_NAME,
                    30
                ],
                [
                    STREET,
                    70
                ]
            ],
            [
                [
                    CITY,
                    70
                ],
                [
                    POSTAL_CODE,
                    30
                ]
            ],
            STATE_OR_PROVINCE
        ]
    },
    US: {
        hasDataset: true,
        labels: {
            [POSTAL_CODE]: 'zipCode',
            [HOUSE_NUMBER_OR_NAME]: 'apartmentSuite',
            [STATE_OR_PROVINCE]: 'state',
            [STREET]: 'address'
        },
        optionalFields: [
            HOUSE_NUMBER_OR_NAME
        ],
        placeholders: {
            [STATE_OR_PROVINCE]: 'select.state'
        },
        schema: [
            COUNTRY,
            STREET,
            HOUSE_NUMBER_OR_NAME,
            CITY,
            [
                [
                    STATE_OR_PROVINCE,
                    50
                ],
                [
                    POSTAL_CODE,
                    50
                ]
            ]
        ]
    },
    default: {
        optionalFields: [],
        placeholders: {
            [STATE_OR_PROVINCE]: 'select.provinceOrTerritory'
        },
        schema: [
            COUNTRY,
            [
                [
                    STREET,
                    70
                ],
                [
                    HOUSE_NUMBER_OR_NAME,
                    30
                ]
            ],
            [
                [
                    POSTAL_CODE,
                    30
                ],
                [
                    CITY,
                    70
                ]
            ],
            STATE_OR_PROVINCE
        ]
    }
};
    const PARTIAL_ADDRESS_SCHEMA = {
        default: {
            labels: {
                [POSTAL_CODE]: 'zipCode'
            },
            schema: [POSTAL_CODE]
        }
    };
    const COUNTRIES_WITH_CUSTOM_SPECIFICATION = Object.keys(ADDRESS_SPECIFICATIONS);

    const getCardImageUrl = (brand, loadingContext) => {
        const imageOptions = {
            type: brand === 'card' ? 'nocard' : brand || 'nocard',
            extension: 'svg',
            loadingContext
        };
        return getImageUrl(imageOptions)(brand);
    };
    /**
     * Verifies that installment object is valid to send to the Backend.
     * Valid means that it has 'revolving' plan set, or the number of installments is bigger than one
     */ const hasValidInstallmentsObject = installments => {
        return installments?.plan === 'revolving' || installments?.value > 1;
    };
    const getLayout = ({ props, showKCP, showBrazilianSSN, countrySpecificSchemas = null, billingAddressRequiredFields = null }) => {
        let layout = CREDIT_CARD;
        const hasRequiredHolderName = props.hasHolderName && props.holderNameRequired;
        if (hasRequiredHolderName) {
            layout = props.positionHolderNameOnTop ? CREDIT_CARD_NAME_TOP : CREDIT_CARD_NAME_BOTTOM;
        }
        if (showKCP) {
            layout = KCP_CARD;
            if (hasRequiredHolderName) {
                layout = props.positionHolderNameOnTop ? KCP_CARD_NAME_TOP : KCP_CARD_NAME_BOTTOM;
            }
        }
        if (showBrazilianSSN) {
            layout = SSN_CARD;
            if (hasRequiredHolderName) {
                layout = props.positionHolderNameOnTop ? SSN_CARD_NAME_TOP : SSN_CARD_NAME_BOTTOM;
            }
        }
        // w. Billing address
        if (countrySpecificSchemas) {
            // Flatten array and remove any numbers that describe how fields should be aligned
            const countrySpecificSchemasFlat = countrySpecificSchemas['flat'](2).filter(item => typeof item !== 'number');
            let countryBasedAddressLayout = countrySpecificSchemasFlat;
            if (billingAddressRequiredFields) {
                // Get intersection of the 2 arrays
                countryBasedAddressLayout = countrySpecificSchemasFlat.filter(x => billingAddressRequiredFields.includes(x));
            }
            layout = CREDIT_CARD.concat(countryBasedAddressLayout);
            if (hasRequiredHolderName) {
                layout = props.positionHolderNameOnTop
                    ? CREDIT_CARD_NAME_TOP.concat(countryBasedAddressLayout)
                    : CREDIT_CARD_NAME_BOTTOM.concat(countryBasedAddressLayout);
            }
            // TODO we are not yet creating a layout for AVS + SSN field (w. or w/o holderName) - is AVS + SSN a real world scenario?
        }
        return layout;
    };
    /**
     * Lookup service to map local (CardInput) field refs to a key, possibly region specific, by which to retrieve the translation
     */ const mapFieldKey$3 = (key, i18n, countrySpecificLabels) => {
        // console.log('### utils::mapFieldKey:: key', key);
        switch (key) {
            case 'socialSecurityNumber':
                return i18n.get(`boleto.${key}`);
            // Address related - if we have a country specific key for the field - use that to get the translation
            case 'street':
            case 'houseNumberOrName':
            case 'postalCode':
            case 'stateOrProvince':
            case 'city':
            case 'country':
                return countrySpecificLabels?.[key] ? i18n.get(countrySpecificLabels?.[key]) : i18n.get(key);
            // We know that the translated error messages do contain a reference to the field they refer to, so we won't need to map them (currently applies mostly to SecuredFields related errors)
            default:
                return null;
        }
    };
    const extractPropsForCardFields = props => {
        return {
            // Extract props for CardFieldsWrapper & StoredCardFieldsWrapper(just needs amount, hasCVC, installmentOptions)
            amount: props.amount,
            billingAddressRequired: props.billingAddressRequired,
            billingAddressRequiredFields: props.billingAddressRequiredFields,
            billingAddressAllowedCountries: props.billingAddressAllowedCountries,
            brandsConfiguration: props.brandsConfiguration,
            enableStoreDetails: props.enableStoreDetails,
            hasCVC: props.hasCVC,
            hasHolderName: props.hasHolderName,
            holderNameRequired: props.holderNameRequired,
            installmentOptions: props.installmentOptions,
            placeholders: props.placeholders,
            positionHolderNameOnTop: props.positionHolderNameOnTop,
            // Extract props for CardFields > CardNumber
            showBrandIcon: props.showBrandIcon,
            showBrandsUnderCardNumber: props.showBrandsUnderCardNumber,
            // Extract props for StoredCardFields
            lastFour: props.lastFour,
            expiryMonth: props.expiryMonth,
            expiryYear: props.expiryYear,
            disclaimerMessage: props.disclaimerMessage
        };
    };
    const extractPropsForSFP$2 = props => {
        return {
            allowedDOMAccess: props.allowedDOMAccess,
            autoFocus: props.autoFocus,
            brands: props.brands,
            brandsConfiguration: props.brandsConfiguration,
            clientKey: props.clientKey,
            countryCode: props.countryCode,
            forceCompat: props.forceCompat,
            i18n: props.i18n,
            implementationType: props.implementationType,
            keypadFix: props.keypadFix,
            legacyInputMode: props.legacyInputMode,
            loadingContext: props.loadingContext,
            minimumExpiryDate: props.minimumExpiryDate,
            onAdditionalSFConfig: props.onAdditionalSFConfig,
            onAdditionalSFRemoved: props.onAdditionalSFRemoved,
            onAllValid: props.onAllValid,
            onAutoComplete: props.onAutoComplete,
            onBinValue: props.onBinValue,
            onConfigSuccess: props.onConfigSuccess,
            onError: props.onError,
            onFieldValid: props.onFieldValid,
            onLoad: props.onLoad,
            showWarnings: props.showWarnings,
            trimTrailingSeparator: props.trimTrailingSeparator,
            maskSecurityCode: props.maskSecurityCode,
            resources: props.resources
        }; // Can't set as return type on fn or it will complain about missing, mandatory, props
    };
    const handlePartialAddressMode = addressMode => {
        return addressMode == AddressModeOptions.partial ? PARTIAL_ADDRESS_SCHEMA : null;
    };
    // Almost all errors are blur based, but some SF ones are not i.e. when an unsupported card is entered or the expiry date is out of range
    function lookupBlurBasedErrors(errorCode) {
        return !['error.va.sf-cc-num.03', 'error.va.sf-cc-dat.01', 'error.va.sf-cc-dat.02', 'error.va.sf-cc-dat.03'].includes(errorCode);
    }

    function usePrevious(value) {
        const ref = _();
        // Store current value in ref
        p(() => {
            ref.current = value;
        }, [value]); // Only re-run if value changes
        // Return previous value
        return ref.current;
    }

    const SCHEMA_MAX_DEPTH = 2;
    class Specifications {
        specifications;
        constructor(specifications) {
            this.specifications = {
                ...ADDRESS_SPECIFICATIONS,
                ...specifications
            };
        }
        /**
         * Checks if a certain country has a dataset.
         * @param country - The selected country
         * @returns Boolean
         */ countryHasDataset(country) {
            return !!this.specifications?.[country]?.hasDataset;
        }
        /**
         * Checks if a certain country has the passed field in their optional fields array.
         * @param country - The selected country
         * @param fieldName - The field to be checked
         * @returns Boolean
         */ countryHasOptionalField(country, fieldName) {
            return !!this.specifications?.[country]?.optionalFields?.includes(fieldName);
        }
        /**
         * Returns the address schema of the selected country or the default address schema.
         * @param country - The selected country
         * @returns AddressSchema
         */ getAddressSchemaForCountry(country) {
            return this.specifications?.[country]?.schema || this.specifications.default.schema;
        }
        /**
         * Returns the address labels of the selected country or the default address labels.
         * @param country - The selected country
         * @returns StringObject
         */ getAddressLabelsForCountry(country) {
            return this.specifications?.[country]?.labels || this.specifications.default.labels;
        }
        /**
         * Returns the optional fields of the selected country or the default optional fields.
         * @param country - The selected country
         * @returns Optional fields array
         */ getOptionalFieldsForCountry(country) {
            return this.specifications?.[country]?.optionalFields || this.specifications.default?.optionalFields || [];
        }
        /**
         * Returns the key for a field of the passed country or the default key for that field.
         * @param fieldName - The field to be searched
         * @param country - The selected country
         */ getKeyForField(fieldName, country) {
            return this.specifications?.[country]?.labels?.[fieldName] || this.specifications?.default?.labels?.[fieldName] || fieldName;
        }
        /**
         * Returns the placeholder key for a field of the passed country or the default key for that field.
         * @param fieldName - The field to be searched
         * @param country - The selected country
         */ getPlaceholderKeyForField(fieldName, country) {
            return this.specifications?.[country]?.placeholders?.[fieldName] || this.specifications?.default?.placeholders?.[fieldName];
        }
        /**
         * Returns an array with the address schema of the selected country or the default address schema
         * Flat version of getAddressSchemaForCountry
         * @param country - The selected country
         * @param mode - Address schema mode, can be 'full', 'partial' or 'none'
         * @returns Array
         */ getAddressSchemaForCountryFlat(country) {
            return this.getAddressSchemaForCountry(country)
                .flat(SCHEMA_MAX_DEPTH)
                .filter(element => typeof element === 'string');
        }
    }

    var styles$5 = {
        'loading-input__form': 'LoadingWrapper-module_loading-input__form__ffCKa',
        'loading-input__form--loading': 'LoadingWrapper-module_loading-input__form--loading__7GmVo',
        'loading-input__spinner': 'LoadingWrapper-module_loading-input__spinner__GxA51',
        'loading-input__spinner--active': 'LoadingWrapper-module_loading-input__spinner--active__ENNBS'
    };

    const LoadingWrapper = ({ children, status }) => {
        const wrapperClass = classNames('adyen-checkout__loading-input__form', styles$5['loading-input__form'], {
            [styles$5['loading-input__form--loading']]: status === 'loading'
        });
        const spinnerClass = classNames({
            [styles$5['loading-input__spinner']]: true,
            [styles$5['loading-input__spinner--active']]: status === 'loading'
        });
        return /*#__PURE__*/ y$1(
            'div',
            {
                style: {
                    position: 'relative'
                }
            },
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: spinnerClass
                },
                /*#__PURE__*/ y$1(Spinner, null)
            ),
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: wrapperClass
                },
                children
            )
        );
    };

    function CVCHint({ frontCVC = false, fieldLabel }) {
        const hintClassnames = classNames({
            'adyen-checkout__card__cvc__hint__wrapper': true,
            'adyen-checkout__field__cvc--front-hint': !!frontCVC,
            'adyen-checkout__field__cvc--back-hint': !frontCVC
        });
        /* eslint-disable max-len */ return /*#__PURE__*/ y$1(
            'div',
            {
                className: hintClassnames
            },
            /*#__PURE__*/ y$1(
                'svg',
                {
                    className: 'adyen-checkout__card__cvc__hint adyen-checkout__card__cvc__hint--front',
                    width: '27',
                    height: '18',
                    viewBox: '0 0 27 18',
                    fill: 'none',
                    xmlns: 'http://www.w3.org/2000/svg',
                    'aria-hidden': !frontCVC,
                    'aria-describedby': 'adyen-checkout__cvc__front-hint-img',
                    role: 'img'
                },
                /*#__PURE__*/ y$1(
                    'title',
                    {
                        id: 'adyen-checkout__cvc__front-hint-img'
                    },
                    fieldLabel
                ),
                /*#__PURE__*/ y$1('path', {
                    d: 'M0 3C0 1.34315 1.34315 0 3 0H24C25.6569 0 27 1.34315 27 3V15C27 16.6569 25.6569 18 24 18H3C1.34315 18 0 16.6569 0 15V3Z',
                    fill: '#E6E9EB'
                }),
                /*#__PURE__*/ y$1('rect', {
                    x: '4',
                    y: '12',
                    width: '19',
                    height: '2',
                    fill: '#B9C4C9'
                }),
                /*#__PURE__*/ y$1('rect', {
                    x: '4',
                    y: '4',
                    width: '4',
                    height: '4',
                    rx: '1',
                    fill: 'white'
                }),
                /*#__PURE__*/ y$1('rect', {
                    className: 'adyen-checkout__card__cvc__hint__location',
                    x: '16.5',
                    y: '4.5',
                    width: '7',
                    height: '5',
                    rx: '2.5',
                    stroke: '#C12424'
                })
            ),
            /*#__PURE__*/ y$1(
                'svg',
                {
                    className: 'adyen-checkout__card__cvc__hint adyen-checkout__card__cvc__hint--back',
                    width: '27',
                    height: '18',
                    viewBox: '0 0 27 18',
                    fill: 'none',
                    xmlns: 'http://www.w3.org/2000/svg',
                    'aria-hidden': !!frontCVC,
                    'aria-describedby': 'adyen-checkout__cvc__back-hint-img',
                    role: 'img'
                },
                /*#__PURE__*/ y$1(
                    'title',
                    {
                        id: 'adyen-checkout__cvc__back-hint-img'
                    },
                    fieldLabel
                ),
                /*#__PURE__*/ y$1('path', {
                    d: 'M27 4.00001V3.37501C27 2.4799 26.6444 1.62146 26.0115 0.988518C25.3786 0.355581 24.5201 0 23.625 0H3.375C2.47989 0 1.62145 0.355581 0.988514 0.988518C0.355579 1.62146 0 2.4799 0 3.37501V4.00001H27Z',
                    fill: '#E6E9EB'
                }),
                /*#__PURE__*/ y$1('path', {
                    d: 'M0 6.99994V14.6666C0 15.5507 0.355579 16.3985 0.988514 17.0237C1.62145 17.6488 2.47989 18 3.375 18H23.625C24.5201 18 25.3786 17.6488 26.0115 17.0237C26.6444 16.3985 27 15.5507 27 14.6666V6.99994H0Z',
                    fill: '#E6E9EB'
                }),
                /*#__PURE__*/ y$1('rect', {
                    y: '4.00012',
                    width: '27',
                    height: '3.00001',
                    fill: '#687282'
                }),
                /*#__PURE__*/ y$1('path', {
                    d: 'M4 11C4 10.4477 4.44772 10 5 10H21C22.1046 10 23 10.8954 23 12C23 13.1046 22.1046 14 21 14H5C4.44771 14 4 13.5523 4 13V11Z',
                    fill: 'white'
                }),
                /*#__PURE__*/ y$1('rect', {
                    className: 'adyen-checkout__card__cvc__hint__location',
                    x: '16.5',
                    y: '9.5',
                    width: '7',
                    height: '5',
                    rx: '2.5',
                    stroke: '#C12424'
                })
            )
        );
        /* eslint-enable max-len */
    }

    function useImage() {
        const { resources } = useCoreContext();
        return T(props => resources?.getImage(props), []);
    }

    const Icon = ({ type, className = '', alt = '', height, width }) => {
        const getImage = useImage();
        const iconUrl = getImage({
            imageFolder: 'components/'
        })?.(type);
        return /*#__PURE__*/ y$1('img', {
            className: classNames('adyen-checkout__icon', className),
            alt: alt,
            src: iconUrl,
            height: height,
            width: width
        });
    };

    let idCounter = Date.now();
    const getUniqueId$1 = (prefix = 'field') => {
        idCounter += 1;
        return `${prefix}-${idCounter}`;
    };

    const Field = props => {
        //
        const {
            children,
            className,
            classNameModifiers,
            dir,
            disabled,
            errorMessage,
            helper,
            inputWrapperModifiers,
            isLoading,
            isValid,
            label,
            labelEndAdornment,
            name,
            onBlur,
            onFieldBlur,
            onFocus,
            onFocusField,
            showValidIcon,
            useLabelElement, // Redeclare prop names to avoid internal clashes
            filled: propsFilled,
            focused: propsFocused,
            i18n,
            errorVisibleToScreenReader
        } = props;
        // Controls whether any error element has an aria-hidden="true" attr (which means it is the error for a securedField)
        // or whether it has an id attr that can be pointed to by an aria-describedby attr on an input element
        const errorVisibleToSR = errorVisibleToScreenReader ?? true;
        const uniqueId = _(getUniqueId$1(`adyen-checkout-${name}`));
        const [focused, setFocused] = h(false);
        const [filled, setFilled] = h(false);
        // The means by which focussed/filled is set for securedFields
        if (propsFocused != null) setFocused(!!propsFocused);
        if (propsFilled != null) setFilled(!!propsFilled);
        // The means by which focussed/filled is set for other fields - this function is passed down to them and triggered
        const onFocusHandler = T(
            event => {
                setFocused(true);
                onFocus?.(event);
            },
            [onFocus]
        );
        const onBlurHandler = T(
            event => {
                setFocused(false);
                onBlur?.(event);
                // When we also need to fire a specific function when a field blurs
                onFieldBlur?.(event);
            },
            [onBlur, onFieldBlur]
        );
        const renderContent = T(() => {
            return /*#__PURE__*/ y$1(
                _$1,
                null,
                typeof label === 'string' &&
                    /*#__PURE__*/ y$1(
                        'span',
                        {
                            className: classNames({
                                'adyen-checkout__label__text': true,
                                'adyen-checkout__label__text--error': errorMessage
                            }),
                            'data-id': name
                        },
                        label
                    ),
                typeof label === 'function' && label(),
                labelEndAdornment &&
                    /*#__PURE__*/ y$1(
                        'span',
                        {
                            className: 'adyen-checkout__label-adornment--end'
                        },
                        labelEndAdornment
                    ),
                helper &&
                    /*#__PURE__*/ y$1(
                        'span',
                        {
                            className: 'adyen-checkout__helper-text'
                        },
                        helper
                    ),
                /*#__PURE__*/ y$1(
                    'span',
                    {
                        className: classNames([
                            'adyen-checkout__input-wrapper',
                            ...inputWrapperModifiers.map(m => `adyen-checkout__input-wrapper--${m}`)
                        ]),
                        dir: dir
                    },
                    P(children).map(child => {
                        const childProps = {
                            isValid,
                            onFocusHandler,
                            onBlurHandler,
                            isInvalid: !!errorMessage,
                            ...(name && {
                                uniqueId: uniqueId.current
                            })
                        };
                        return E(child, childProps);
                    }),
                    isLoading &&
                        /*#__PURE__*/ y$1(
                            'span',
                            {
                                className: 'adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--loading'
                            },
                            /*#__PURE__*/ y$1(Spinner, {
                                size: 'small'
                            })
                        ),
                    isValid &&
                        showValidIcon !== false &&
                        /*#__PURE__*/ y$1(
                            'span',
                            {
                                className: 'adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--valid'
                            },
                            /*#__PURE__*/ y$1(Icon, {
                                type: 'checkmark',
                                alt: i18n?.get('field.valid')
                            })
                        ),
                    errorMessage &&
                        /*#__PURE__*/ y$1(
                            'span',
                            {
                                className: 'adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--invalid'
                            },
                            /*#__PURE__*/ y$1(Icon, {
                                type: 'field_error',
                                alt: i18n?.get('error.title')
                            })
                        )
                ),
                /*#__PURE__*/ y$1(
                    'span',
                    {
                        className: 'adyen-checkout__error-text',
                        ...(errorVisibleToSR && {
                            id: `${uniqueId.current}${ARIA_ERROR_SUFFIX}`
                        }),
                        'aria-hidden': errorVisibleToSR ? null : 'true'
                    },
                    errorMessage && typeof errorMessage === 'string' && errorMessage.length ? errorMessage : null
                )
            );
        }, [children, errorMessage, isLoading, isValid, label, onFocusHandler, onBlurHandler]);
        const LabelOrDiv = T(({ onFocusField, focused, filled, disabled, name, uniqueId, useLabelElement, isSecuredField, children }) => {
            const defaultWrapperProps = {
                onClick: onFocusField,
                className: classNames({
                    'adyen-checkout__label': true,
                    'adyen-checkout__label--focused': focused,
                    'adyen-checkout__label--filled': filled,
                    'adyen-checkout__label--disabled': disabled
                })
            };
            return useLabelElement // if errorVisibleToSR is true then we are NOT dealing with the label for a securedField... so give it a `for` attribute
                ? /*#__PURE__*/ y$1(
                      'label',
                      {
                          ...defaultWrapperProps,
                          ...(!isSecuredField && {
                              htmlFor: name && uniqueId
                          })
                      },
                      children
                  )
                : /*#__PURE__*/ y$1(
                      'div',
                      {
                          ...defaultWrapperProps,
                          role: 'form'
                      },
                      children
                  );
        }, []);
        /**
         * RENDER
         */ return /*#__PURE__*/ y$1(
            'div',
            {
                className: classNames(
                    'adyen-checkout__field',
                    className,
                    classNameModifiers.map(m => `adyen-checkout__field--${m}`),
                    {
                        'adyen-checkout__field--error': errorMessage,
                        'adyen-checkout__field--valid': isValid
                    }
                )
            },
            /*#__PURE__*/ y$1(
                LabelOrDiv,
                {
                    onFocusField: onFocusField,
                    name: name,
                    disabled: disabled,
                    filled: filled,
                    focused: focused,
                    useLabelElement: useLabelElement,
                    uniqueId: uniqueId.current,
                    isSecuredField: !errorVisibleToSR
                },
                renderContent()
            )
        );
    };
    Field.defaultProps = {
        className: '',
        classNameModifiers: [],
        inputWrapperModifiers: [],
        useLabelElement: true
    };

    var styles$4 = {
        'card-input__wrapper': 'CardInput-module_card-input__wrapper__wXSCw',
        'card-input__icon': 'CardInput-module_card-input__icon__3Cz5M',
        'card-input__form': 'CardInput-module_card-input__form__fRo1r',
        'card-input__spinner': 'CardInput-module_card-input__spinner__-j2Qi',
        'card-input__spinner--active': 'CardInput-module_card-input__spinner--active__slD7w',
        'card-input__form--loading': 'CardInput-module_card-input__form--loading__rrmdj',
        'adyen-checkout__input': 'CardInput-module_adyen-checkout__input__11tlB',
        'adyen-checkout__card__cvc__input--hidden': 'CardInput-module_adyen-checkout__card__cvc__input--hidden__VIlHV',
        'adyen-checkout__card__exp-date__input--hidden': 'CardInput-module_adyen-checkout__card__exp-date__input--hidden__evi6-',
        'adyen-checkout__card__exp-cvc__exp-date__input--hidden': 'CardInput-module_adyen-checkout__card__exp-cvc__exp-date__input--hidden__YC3VT',
        'revolving-plan-installments__disabled': 'CardInput-module_revolving-plan-installments__disabled__VhNj2'
    };

    /**
     * Extract the relevant props and write them as attributes to the span that will contain the securedFields iframe
     * Specifically exists to make the uniqueId created by the Field comp accessible to the SFP via a data-uid attr
     */ function DataSfSpan(props) {
        const opts = {
            [DATA_ENCRYPTED_FIELD_ATTR]: props.encryptedFieldType,
            [DATA_INFO]: props['data-info'],
            [DATA_UID]: props.uniqueId,
            className: props.className
        };
        return /*#__PURE__*/ y$1('span', opts, props.children);
    }

    function CVC(props) {
        const {
            label,
            onFocusField = () => {},
            error = '',
            className = '',
            classNameModifiers = [],
            focused,
            filled,
            isValid,
            frontCVC = false,
            cvcPolicy = CVC_POLICY_REQUIRED
        } = props;
        const { i18n } = useCoreContext();
        const fieldClassnames = classNames(className, {
            'adyen-checkout__field__cvc': true,
            [styles$4['adyen-checkout__card__cvc__input--hidden']]: cvcPolicy === CVC_POLICY_HIDDEN,
            'adyen-checkout__field__cvc--optional': cvcPolicy === CVC_POLICY_OPTIONAL
        });
        const cvcClassnames = classNames({
            'adyen-checkout__input': true,
            'adyen-checkout__input--small': true,
            'adyen-checkout__card__cvc__input': true,
            'adyen-checkout__input--error': error,
            'adyen-checkout__input--focus': focused,
            'adyen-checkout__input--valid': isValid,
            [styles$4['adyen-checkout__input']]: true
        });
        const fieldLabel = cvcPolicy !== CVC_POLICY_OPTIONAL ? label : i18n.get('creditCard.cvcField.title.optional');
        return /*#__PURE__*/ y$1(
            Field,
            {
                label: fieldLabel,
                focused: focused,
                filled: filled,
                classNameModifiers: [...classNameModifiers, 'securityCode'],
                onFocusField: () => onFocusField(ENCRYPTED_SECURITY_CODE),
                className: fieldClassnames,
                errorMessage: error,
                isValid: isValid,
                dir: 'ltr',
                name: ENCRYPTED_SECURITY_CODE,
                i18n: i18n,
                errorVisibleToScreenReader: false
            },
            /*#__PURE__*/ y$1(DataSfSpan, {
                encryptedFieldType: ENCRYPTED_SECURITY_CODE,
                className: cvcClassnames
            }),
            /*#__PURE__*/ y$1(CVCHint, {
                frontCVC: frontCVC,
                fieldLabel: fieldLabel
            })
        );
    }

    function StoredCardFields({ brand, hasCVC, onFocusField, errors, valid, cvcPolicy, focusedElement, lastFour, expiryMonth, expiryYear }) {
        const { i18n } = useCoreContext();
        const storedCardDescription = i18n.get('creditCard.storedCard.description.ariaLabel').replace('%@', lastFour);
        const ariaLabel = `${storedCardDescription} ${i18n.get('creditCard.expiryDateField.title')} ${expiryMonth}/${expiryYear}`;
        const getError = (errors, fieldType) => {
            const errorMessage = errors[fieldType] ? i18n.get(errors[fieldType]) : null;
            return errorMessage;
        };
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__card__form adyen-checkout__card__form--oneClick',
                'aria-label': ariaLabel
            },
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__card__exp-cvc adyen-checkout__field-wrapper'
                },
                /*#__PURE__*/ y$1(
                    Field,
                    {
                        label: i18n.get('creditCard.expiryDateField.title'),
                        className: 'adyen-checkout__field--50',
                        classNameModifiers: ['storedCard'],
                        disabled: true
                    },
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            className: 'adyen-checkout__input adyen-checkout__input--disabled adyen-checkout__card__exp-date__input--oneclick',
                            dir: 'ltr'
                        },
                        expiryMonth,
                        ' / ',
                        expiryYear
                    )
                ),
                hasCVC &&
                    /*#__PURE__*/ y$1(CVC, {
                        cvcPolicy: cvcPolicy,
                        error: getError(errors, ENCRYPTED_SECURITY_CODE),
                        focused: focusedElement === 'encryptedSecurityCode',
                        filled: !!valid.encryptedSecurityCode || !!errors.encryptedSecurityCode,
                        isValid: !!valid.encryptedSecurityCode,
                        label: i18n.get('creditCard.cvcField.title'),
                        onFocusField: onFocusField,
                        className: 'adyen-checkout__field--50',
                        classNameModifiers: ['storedCard'],
                        frontCVC: brand === 'amex'
                    })
            )
        );
    }

    function InputBase({ onCreateRef, ...props }) {
        const { autoCorrect, classNameModifiers, isInvalid, isValid, readonly = null, spellCheck, type, uniqueId, disabled } = props;
        const inputRef = _(null);
        p(() => {
            onCreateRef?.(inputRef.current);
        }, [inputRef.current, onCreateRef]);
        /**
         * To avoid confusion with misplaced/misdirected onChange handlers - InputBase only accepts onInput, onBlur & onFocus handlers.
         * The first 2 being the means by which we expect useForm--handleChangeFor validation functionality to be applied.
         */ if (Object.prototype.hasOwnProperty.call(props, 'onChange')) {
            console.error('Error: Form fields that rely on InputBase may not have an onChange property');
        }
        const handleInput = T(
            event => {
                props.onInput(event);
            },
            [props.onInput]
        );
        const handleKeyPress = T(
            event => {
                if (props?.onKeyPress) props.onKeyPress(event);
            },
            [props?.onKeyPress]
        );
        const handleKeyUp = T(
            event => {
                if (props?.onKeyUp) props.onKeyUp(event);
            },
            [props?.onKeyUp]
        );
        const handleBlur = T(
            event => {
                props?.onBlurHandler?.(event); // From Field component
                if (props.trimOnBlur) {
                    event.target.value = event.target.value.trim(); // needed to trim trailing spaces in field (leading spaces can be done via formatting)
                }
                props?.onBlur?.(event);
            },
            [props.onBlur, props.onBlurHandler]
        );
        const handleFocus = T(
            event => {
                props?.onFocusHandler?.(event); // From Field component
            },
            [props.onFocusHandler]
        );
        const inputClassNames = classNames(
            'adyen-checkout__input',
            [`adyen-checkout__input--${type}`],
            props.className,
            {
                'adyen-checkout__input--invalid': isInvalid,
                'adyen-checkout__input--valid': isValid
            },
            classNameModifiers.map(m => `adyen-checkout__input--${m}`)
        );
        // Don't spread classNameModifiers etc to input element (it ends up as an attribute on the element itself)
        const { classNameModifiers: cnm, uniqueId: uid, isInvalid: iiv, isValid: iv, ...newProps } = props;
        return /*#__PURE__*/ y$1('input', {
            id: uniqueId,
            ...newProps,
            'aria-required': newProps.required,
            type: type,
            className: inputClassNames,
            readOnly: readonly,
            spellCheck: spellCheck,
            autoCorrect: autoCorrect,
            'aria-describedby': `${uniqueId}${ARIA_ERROR_SUFFIX}`,
            'aria-invalid': isInvalid,
            onInput: handleInput,
            onBlur: handleBlur,
            onFocus: handleFocus,
            onKeyUp: handleKeyUp,
            onKeyPress: handleKeyPress,
            disabled: disabled,
            ref: inputRef
        });
    }
    InputBase.defaultProps = {
        type: 'text',
        classNameModifiers: []
    };

    function InputText(props) {
        /* Type of input base is always text, which is combined with using inputmode to change mobile keyboards.
         * This gives the most consistent and performant mobile input experience.
         */ return /*#__PURE__*/ y$1(InputBase, {
            classNameModifiers: ['large'],
            ...props,
            'aria-required': props.required,
            type: 'text'
        });
    }

    /**
     * Returns either the date input is supported or not in the current browser
     */ const checkDateInputSupport = () => {
        const input = document.createElement('input');
        input.setAttribute('type', 'date');
        return input.type === 'date';
    };
    /**
     * Returns a formatted date
     * @param value -
     * @example
     * formatDate('22111990');
     * // '22/11/1990'
     */ const formatDate = value => {
        const date = value
            .replace(/\D|\s/g, '') // Digits only
            .replace(/^(00)(.*)?/, '01$2') // 00 -> 01
            .replace(/^(3[2-9])(.*)?/, '0$1$2') // 34 -> 03/04
            .replace(/^([4-9])(.*)?/, '0$1') // 4 -> 04
            .replace(/^([0-9]{2})(00)(.*)?/, '$101') // 01/00 -> 01/01
            .replace(/^(3[01])(02)(.*)?/, '29$2') // Force up to day 29 for Feb
            .replace(/^([0-9]{2})([2-9]|1[3-9])(.*)?/, '$10$2') // 01/4 -> 01/04
            .replace(/^([0-9]{2})([0-9]{2})([0-9])/, '$1/$2/$3') // 22111990 -> 22/11/1990
            .replace(/^([0-9]{2})([0-9])/, '$1/$2'); // 2211 -> 22/11
        const [day = '', month = '', year = ''] = date.split('/');
        // Check leap year
        if (
            year.length === 4 &&
            day === '29' &&
            month === '02' &&
            (Number(year) % 4 !== 0 || (year.substr(2, 2) === '00' && Number(year) % 400 !== 0))
        ) {
            return date.replace(/^29/, '28');
        }
        return date;
    };
    /**
     * Receives a formatted date and returns it as the API expects it
     * @param value -
     * @example
     * unformatDate('22/11/1990');
     * // '1990-11-22'
     */ const unformatDate = (value = '') => {
        if (value.indexOf('/') === -1) return value;
        const [day = '', month = '', year = ''] = value.split('/');
        if (!day || !month || !year) return null;
        return `${year}-${month}-${day}`;
    };

    function InputDate(props) {
        const isDateInputSupported = F(checkDateInputSupport, []);
        const handleInput = e => {
            const { value } = e.target;
            e.target.value = formatDate(value);
            props.onInput(e);
        };
        if (isDateInputSupported) {
            return /*#__PURE__*/ y$1(InputBase, {
                ...props,
                type: 'date'
            });
        }
        return /*#__PURE__*/ y$1(InputBase, {
            ...props,
            onInput: handleInput,
            maxLength: 10
        });
    }

    function InputTelephone(props) {
        return /*#__PURE__*/ y$1(InputBase, {
            ...props,
            type: 'tel'
        });
    }

    function InputEmail(props) {
        return /*#__PURE__*/ y$1(InputBase, {
            ...props,
            type: 'email',
            autoCapitalize: 'off'
        });
    }

    function RadioGroup(props) {
        const { items, i18n, name, onChange, value, isInvalid, uniqueId } = props;
        const uniqueIdBase = uniqueId?.replace(/[0-9]/g, '').substring(0, uniqueId.lastIndexOf('-'));
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__radio_group'
            },
            items.map(item => {
                const uniqueId = getUniqueId$1(uniqueIdBase);
                return /*#__PURE__*/ y$1(
                    'div',
                    {
                        key: item.id,
                        className: 'adyen-checkout__radio_group__input-wrapper'
                    },
                    /*#__PURE__*/ y$1('input', {
                        id: uniqueId,
                        type: 'radio',
                        checked: value === item.id,
                        className: 'adyen-checkout__radio_group__input',
                        name: name,
                        onChange: onChange,
                        onClick: onChange,
                        value: item.id
                    }),
                    /*#__PURE__*/ y$1(
                        'label',
                        {
                            className: classNames([
                                'adyen-checkout__label__text',
                                'adyen-checkout__radio_group__label',
                                props.className,
                                {
                                    'adyen-checkout__radio_group__label--invalid': isInvalid
                                }
                            ]),
                            htmlFor: uniqueId
                        },
                        i18n.get(item.name)
                    )
                );
            })
        );
    }
    RadioGroup.defaultProps = {
        onChange: () => {},
        items: []
    };

    function Checkbox({ classNameModifiers = [], label, isInvalid, onChange, ...props }) {
        return /*#__PURE__*/ y$1(
            'label',
            {
                className: 'adyen-checkout__checkbox'
            },
            /*#__PURE__*/ y$1('input', {
                ...props,
                className: classNames([
                    'adyen-checkout__checkbox__input',
                    [props.className],
                    {
                        'adyen-checkout__checkbox__input--invalid': isInvalid
                    },
                    classNameModifiers.map(m => `adyen-checkout__input--${m}`)
                ]),
                type: 'checkbox',
                onChange: onChange
            }),
            /*#__PURE__*/ y$1(
                'span',
                {
                    className: 'adyen-checkout__checkbox__label'
                },
                label
            )
        );
    }
    Checkbox.defaultProps = {
        onChange: () => {}
    };

    var styles$3 = {
        'adyen-checkout__dropdown': 'Select-module_adyen-checkout__dropdown__0Mj-n',
        'adyen-checkout__dropdown__button': 'Select-module_adyen-checkout__dropdown__button__yTyqq',
        'adyen-checkout__dropdown__button--active': 'Select-module_adyen-checkout__dropdown__button--active__Ej-JR',
        'adyen-checkout__filter-input': 'Select-module_adyen-checkout__filter-input__CwPBS',
        'adyen-checkout__dropdown__list': 'Select-module_adyen-checkout__dropdown__list__YtEzj',
        'adyen-checkout__dropdown__list--active': 'Select-module_adyen-checkout__dropdown__list--active__Gegw2',
        'adyen-checkout__dropdown__element': 'Select-module_adyen-checkout__dropdown__element__ORU4-'
    };

    function Img(props) {
        const { backgroundUrl = '', className = '', classNameModifiers = [], src = '', alt = '', showOnError = false } = props;
        const [loaded, setLoaded] = h(false);
        const imageRef = _(null);
        const handleLoad = () => {
            setLoaded(true);
        };
        const handleError = () => {
            setLoaded(showOnError);
        };
        const classNames$1 = classNames(
            [className],
            'adyen-checkout__image',
            {
                'adyen-checkout__image--loaded': loaded
            },
            ...classNameModifiers.map(modifier => `adyen-checkout__image--${modifier}`)
        );
        p(() => {
            const image = backgroundUrl ? new Image() : imageRef.current;
            image.src = backgroundUrl || src;
            image.onload = handleLoad;
            setLoaded(!!image.complete);
        }, []);
        if (backgroundUrl) {
            return /*#__PURE__*/ y$1('div', {
                style: {
                    backgroundUrl
                },
                ...props,
                className: classNames$1
            });
        }
        return /*#__PURE__*/ y$1('img', {
            ...props,
            alt: alt,
            ref: imageRef,
            className: classNames$1,
            onError: handleError
        });
    }

    function SelectButtonElement({ filterable, toggleButtonRef, ...props }) {
        if (filterable)
            return /*#__PURE__*/ y$1('div', {
                ...props,
                ref: toggleButtonRef
            });
        return /*#__PURE__*/ y$1('button', {
            id: props.id,
            'aria-describedby': props.ariaDescribedBy,
            type: 'button',
            ...props,
            ref: toggleButtonRef
        });
    }
    function SelectButton(props) {
        const { i18n } = useCoreContext();
        const { active, selected, inputText, readonly, showList } = props;
        // display fallback order
        const displayText = selected.selectedOptionName || selected.name || props.placeholder || '';
        // displayInputText only used for the text input for the filter
        // display the "typed" filter text when showing the dropdown,
        // hide it and show the "selected" value when collapsed
        const displayInputText = showList ? inputText : displayText;
        const setFocus = e => {
            e.preventDefault();
            if (document.activeElement === props.filterInputRef.current) {
                if (!props.showList) {
                    props.toggleList(e);
                }
            } else if (props.filterInputRef.current) props.filterInputRef.current.focus();
        };
        // 1. If readonly we ignore the click action
        // 2. If filterable we want to show the list and focus on the input
        // 3. Otherwise we just toggle the list
        const onClickHandler = readonly ? null : props.filterable ? setFocus : props.toggleList;
        const onFocusHandler = readonly ? null : props.onFocus;
        return /*#__PURE__*/ y$1(
            SelectButtonElement,
            {
                className: classNames({
                    'adyen-checkout__dropdown__button': true,
                    [styles$3['adyen-checkout__dropdown__button']]: true,
                    'adyen-checkout__dropdown__button--readonly': readonly,
                    'adyen-checkout__dropdown__button--active': showList,
                    [styles$3['adyen-checkout__dropdown__button--active']]: showList,
                    'adyen-checkout__dropdown__button--invalid': props.isInvalid,
                    'adyen-checkout__dropdown__button--valid': props.isValid,
                    'adyen-checkout__dropdown__button--disabled': selected.disabled
                }),
                disabled: props.disabled,
                filterable: props.filterable,
                onClick: onClickHandler,
                onKeyDown: !readonly ? props.onButtonKeyDown : null,
                toggleButtonRef: props.toggleButtonRef
            },
            !props.filterable
                ? /*#__PURE__*/ y$1(
                      _$1,
                      null,
                      selected.icon &&
                          /*#__PURE__*/ y$1(Img, {
                              className: 'adyen-checkout__dropdown__button__icon',
                              src: selected.icon,
                              alt: selected.name
                          }),
                      /*#__PURE__*/ y$1(
                          'span',
                          {
                              className: 'adyen-checkout__dropdown__button__text'
                          },
                          displayText
                      ),
                      selected.secondaryText &&
                          /*#__PURE__*/ y$1(
                              'span',
                              {
                                  className: 'adyen-checkout__dropdown__button__secondary-text'
                              },
                              selected.secondaryText
                          )
                  )
                : /*#__PURE__*/ y$1(
                      _$1,
                      null,
                      !showList &&
                          selected.icon &&
                          /*#__PURE__*/ y$1(Img, {
                              className: 'adyen-checkout__dropdown__button__icon',
                              src: selected.icon,
                              alt: selected.name
                          }),
                      /*#__PURE__*/ y$1('input', {
                          value: displayInputText,
                          'aria-autocomplete': 'list',
                          'aria-controls': props.selectListId,
                          'aria-expanded': showList,
                          'aria-owns': props.selectListId,
                          autoComplete: 'off',
                          className: classNames('adyen-checkout__filter-input', [styles$3['adyen-checkout__filter-input']]),
                          onInput: props.onInput,
                          onFocus: onFocusHandler,
                          placeholder: i18n.get('select.filter.placeholder'),
                          ref: props.filterInputRef,
                          role: 'combobox',
                          'aria-activedescendant': `listItem-${active.id}`,
                          type: 'text',
                          readOnly: props.readonly,
                          id: props.id,
                          'aria-describedby': props.ariaDescribedBy
                      }),
                      !showList &&
                          selected.secondaryText &&
                          /*#__PURE__*/ y$1(
                              'span',
                              {
                                  className: 'adyen-checkout__dropdown__button__secondary-text'
                              },
                              selected.secondaryText
                          )
                  )
        );
    }

    const SelectListItem = ({ item, active, selected, ...props }) => {
        return /*#__PURE__*/ y$1(
            'li',
            {
                'aria-disabled': !!item.disabled,
                'aria-selected': selected,
                className: classNames([
                    'adyen-checkout__dropdown__element',
                    styles$3['adyen-checkout__dropdown__element'],
                    {
                        'adyen-checkout__dropdown__element--active': active,
                        'adyen-checkout__dropdown__element--disabled': !!item.disabled
                    }
                ]),
                // A change in Preact v10.11.1 means that all falsy values are assessed and set on data attributes.
                // In the case of data-disabled we only ever want it set if item.disabled is actually true, since the presence of the data-disabled attr,
                // regardless of its value, will disable the select list item
                'data-disabled': item.disabled === true ? true : null,
                'data-value': item.id,
                onClick: props.onSelect,
                onMouseEnter: props.onHover,
                role: 'option',
                //tabIndex={-1}
                id: `listItem-${item.id}`
            },
            item.icon &&
                /*#__PURE__*/ y$1(Img, {
                    className: 'adyen-checkout__dropdown__element__icon',
                    alt: item.name,
                    src: item.icon
                }),
            /*#__PURE__*/ y$1(
                'span',
                {
                    className: 'adyen-checkout__dropdown__element__text'
                },
                item.name
            ),
            item.secondaryText &&
                /*#__PURE__*/ y$1(
                    'span',
                    {
                        className: 'adyen-checkout__dropdown__element__secondary-text'
                    },
                    item.secondaryText
                ),
            selected &&
                /*#__PURE__*/ y$1(Icon, {
                    type: 'checkmark',
                    height: 14,
                    width: 14
                })
        );
    };

    function SelectList({ selected, active, filteredItems, showList, ...props }) {
        const { i18n } = useCoreContext();
        return /*#__PURE__*/ y$1(
            'ul',
            {
                className: classNames({
                    'adyen-checkout__dropdown__list': true,
                    [styles$3['adyen-checkout__dropdown__list']]: true,
                    'adyen-checkout__dropdown__list--active': showList,
                    [styles$3['adyen-checkout__dropdown__list--active']]: showList
                }),
                id: props.selectListId,
                ref: props.selectListRef,
                role: 'listbox'
            },
            filteredItems.length
                ? filteredItems.map(item =>
                      /*#__PURE__*/ y$1(SelectListItem, {
                          active: item.id === active.id,
                          item: item,
                          key: item.id,
                          onSelect: props.onSelect,
                          onHover: props.onHover,
                          selected: item.id === selected.id
                      })
                  )
                : /*#__PURE__*/ y$1(
                      'div',
                      {
                          className: 'adyen-checkout__dropdown__element adyen-checkout__dropdown__element--no-options'
                      },
                      i18n.get('select.noOptionsFound')
                  )
        );
    }

    const keys = {
        arrowDown: 'ArrowDown',
        arrowUp: 'ArrowUp',
        enter: 'Enter',
        escape: 'Escape',
        space: ' ',
        tab: 'Tab'
    };

    /**
     * This function scrolls and element to view and simulates the default behaviour of .focus() by a given browser
     * This function is inspired, yet simplified of the code found here https://gist.github.com/hsablonniere/2581101
     * @param element - element to focus
     */ const simulateFocusScroll = element => {
        const parent = element.parentNode;
        const parentComputedStyle = window.getComputedStyle(parent, null);
        const parentBorderTopWidth = parseInt(parentComputedStyle.getPropertyValue('border-top-width'));
        const overTop = element.offsetTop - parent.offsetTop < parent.scrollTop;
        const overBottom =
            element.offsetTop - parent.offsetTop + element.clientHeight - parentBorderTopWidth > parent.scrollTop + parent.clientHeight;
        if (overTop || overBottom) {
            parent.scrollTop = element.offsetTop - parent.offsetTop - parent.clientHeight / 2 - parentBorderTopWidth + element.clientHeight / 2;
        }
    };

    function Select({
        items = [],
        className = '',
        classNameModifiers = [],
        filterable = true,
        readonly = false,
        onChange = () => {},
        onInput,
        selected,
        name,
        isInvalid,
        isValid,
        placeholder,
        uniqueId,
        disabled,
        disableTextFilter,
        clearOnSelect
    }) {
        const filterInputRef = _(null);
        const selectContainerRef = _(null);
        const toggleButtonRef = _(null);
        const selectListRef = _(null);
        const [textFilter, setTextFilter] = h(null);
        const [showList, setShowList] = h(false);
        const selectListId = F(() => `select-${uuidv4()}`, []);
        const active = items.find(i => i.id === selected) || {};
        const [inputText, setInputText] = h();
        const [activeOption, setActiveOption] = h(active);
        const selectedOption = active;
        const filteredItems = disableTextFilter
            ? items
            : items.filter(item => !textFilter || item.name.toLowerCase().includes(textFilter.toLowerCase()));
        const setNextActive = () => {
            if (!filteredItems || filteredItems.length < 1) return;
            const possibleNextIndex = filteredItems.findIndex(listItem => listItem === activeOption) + 1;
            const nextIndex = possibleNextIndex < filteredItems.length ? possibleNextIndex : 0;
            const nextItem = filteredItems[nextIndex];
            scrollToItem(nextItem);
            setActiveOption(nextItem);
        };
        const setPreviousActive = () => {
            if (!filteredItems || filteredItems.length < 1) return;
            const possibleNextIndex = filteredItems.findIndex(listItem => listItem === activeOption) - 1;
            const nextIndex = possibleNextIndex < 0 ? filteredItems.length - 1 : possibleNextIndex;
            const nextItem = filteredItems[nextIndex];
            scrollToItem(nextItem);
            setActiveOption(nextItem);
        };
        const scrollToItem = item => {
            if (!item) return;
            const nextElement = document.getElementById(`listItem-${item.id}`);
            simulateFocusScroll(nextElement);
        };
        /**
         * Closes the selectList, empties the text filter and focuses the button element
         */ const closeList = () => {
            setShowList(false);
        };
        const openList = () => {
            setShowList(true);
        };
        const extractItemFromEvent = e => {
            const value = e.currentTarget.getAttribute('data-value');
            return filteredItems.find(listItem => listItem.id == value);
        };
        /**
         * Closes the select list and fires an onChange
         * @param e - Event
         */ const handleSelect = e => {
            e.preventDefault();
            // We use a local variable here since writing and if statement is cleaner then a long ternary
            let valueToEmit;
            if (e.currentTarget instanceof HTMLElement && e.currentTarget.getAttribute('role') === 'option') {
                // This is the main scenario when clicking and item in the list
                // Item comes from the event
                valueToEmit = extractItemFromEvent(e);
            } else if (activeOption.id && filteredItems.some(item => item.id === activeOption.id)) {
                // This is the scenario where a user is using the keyboard to navigate
                // In the case item comes from the visually select item
                valueToEmit = activeOption;
            } else {
                // This is the scenario the user didn't select anything
                if (textFilter) {
                    // if we filtering for something then select the first option
                    valueToEmit = filteredItems[0];
                } else {
                    // This will happen when we want to keep an already chosen option
                    // If no active option we should just emit again with the value that was already selected
                    valueToEmit = {
                        id: selected
                    };
                }
            }
            if (valueToEmit && !valueToEmit.disabled) {
                onChange({
                    target: {
                        value: valueToEmit.id,
                        name: name
                    }
                });
                if (clearOnSelect) setInputText(null);
                closeList();
            }
        };
        /**
         * Handles hovering and directions
         * @param e - Event
         */ const handleHover = e => {
            e.preventDefault();
            const item = extractItemFromEvent(e);
            setActiveOption(item);
        };
        /**
         * Handle keyDown events on the selectList button
         * Responsible for opening and closing the list
         * @param e - KeyboardEvent
         */ const handleButtonKeyDown = e => {
            if (e.key === keys.enter && filterable && showList && textFilter) {
                handleSelect(e);
            } else if (e.key === keys.escape) {
                // When user has focused Select button but not yet moved into Select list - close list and keep focus on the Select Button re. a11y guidelines
                // https://w3c.github.io/aria-practices/examples/disclosure/disclosure-navigation.html
                closeList();
            } else if ([keys.arrowUp, keys.arrowDown, keys.enter].includes(e.key) || (e.key === keys.space && (!filterable || !showList))) {
                e.preventDefault();
                if (!showList) {
                    openList();
                } else {
                    handleNavigationKeys(e);
                }
            } else if (e.shiftKey && e.key === keys.tab) {
                // Shift-Tab out of Select - close list re. a11y guidelines (above)
                closeList();
            } else if (e.key === keys.tab) {
                closeList();
            }
        };
        /**
         * Handles movement with navigation keys and enter
         * Navigates through the list, or select an element, or focus the filter input, or close the menu.
         * @param e - KeyDownEvent
         */ const handleNavigationKeys = e => {
            switch (e.key) {
                case keys.space:
                case keys.enter:
                    handleSelect(e);
                    break;
                case keys.arrowDown:
                    e.preventDefault();
                    setNextActive();
                    break;
                case keys.arrowUp:
                    e.preventDefault();
                    setPreviousActive();
                    break;
            }
        };
        /**
         * Updates the state with the current text filter value
         * @param e - KeyboardEvent
         */ const handleTextFilter = e => {
            const value = e.target.value;
            setInputText(value);
            setTextFilter(value);
            if (onInput) {
                onInput(value);
            }
        };
        /**
         * Toggles the selectList and focuses in either the filter input or in the selectList button
         * @param e - Event
         */ const toggleList = e => {
            e.preventDefault();
            if (!showList) {
                setInputText(null);
                openList();
            } else {
                setInputText(selectedOption.name);
                closeList();
            }
        };
        p(() => {
            if (showList) {
                setInputText(null);
            } else {
                setTextFilter(null);
            }
        }, [showList]);
        /**
         * Focus on the input if filterable
         */ p(() => {
            if (showList && filterable && filterInputRef.current) {
                filterInputRef.current.focus();
            }
        }, [showList]);
        p(() => {
            /**
             * Close the select list when clicking outside the list
             * @param e - MouseEvent
             */ function handleClickOutside(e) {
                // use composedPath so it can also check when inside a web component
                // if composedPath is not available fallback to e.target
                const clickIsOutside = e.composedPath
                    ? !e.composedPath().includes(selectContainerRef.current)
                    : !selectContainerRef.current.contains(e.target);
                if (clickIsOutside) {
                    closeList();
                }
            }
            document.addEventListener('click', handleClickOutside, false);
            return () => {
                document.removeEventListener('click', handleClickOutside, false);
            };
        }, [selectContainerRef]);
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: classNames([
                    'adyen-checkout__dropdown',
                    styles$3['adyen-checkout__dropdown'],
                    className,
                    ...classNameModifiers.map(m => `adyen-checkout__dropdown--${m}`)
                ]),
                ref: selectContainerRef
            },
            /*#__PURE__*/ y$1(SelectButton, {
                inputText: inputText,
                id: uniqueId ?? null,
                active: activeOption,
                selected: selectedOption,
                filterInputRef: filterInputRef,
                filterable: filterable,
                isInvalid: isInvalid,
                isValid: isValid,
                onButtonKeyDown: handleButtonKeyDown,
                onFocus: openList,
                onInput: handleTextFilter,
                placeholder: placeholder,
                readonly: readonly,
                selectListId: selectListId,
                showList: showList,
                toggleButtonRef: toggleButtonRef,
                toggleList: toggleList,
                disabled: disabled,
                ariaDescribedBy: uniqueId ? `${uniqueId}${ARIA_ERROR_SUFFIX}` : null
            }),
            /*#__PURE__*/ y$1(SelectList, {
                active: activeOption,
                filteredItems: filteredItems,
                onHover: handleHover,
                onSelect: handleSelect,
                selected: selectedOption,
                selectListId: selectListId,
                selectListRef: selectListRef,
                showList: showList
            })
        );
    }
    Select.defaultProps = {
        className: '',
        classNameModifiers: [],
        filterable: true,
        items: [],
        readonly: false,
        onChange: () => {}
    };

    const renderFormField = (type, props) => {
        const formFieldTypes = {
            boolean: Checkbox,
            radio: RadioGroup,
            select: Select,
            // All the following use InputBase
            date: InputDate,
            emailAddress: InputEmail,
            tel: InputTelephone,
            text: InputText,
            default: InputText
        };
        const FormInputElement = formFieldTypes[type] || formFieldTypes.default;
        return /*#__PURE__*/ y$1(FormInputElement, props);
    };

    function Fieldset({ children, classNameModifiers = [], label, readonly = false }) {
        const { i18n } = useCoreContext();
        return /*#__PURE__*/ y$1(
            'fieldset',
            {
                className: classNames([
                    'adyen-checkout__fieldset',
                    ...classNameModifiers.map(m => `adyen-checkout__fieldset--${m}`),
                    {
                        'adyen-checkout__fieldset--readonly': readonly
                    }
                ])
            },
            label &&
                /*#__PURE__*/ y$1(
                    'legend',
                    {
                        className: 'adyen-checkout__fieldset__title'
                    },
                    i18n.get(label)
                ),
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__fieldset__fields'
                },
                children
            )
        );
    }

    /**
     * Installments generic dropdown
     */ function Installments(props) {
        const { i18n } = useCoreContext();
        const { amount, brand, onChange, type } = props;
        const installmentOptions = props.installmentOptions[brand] || props.installmentOptions.card;
        const [installmentAmount, setInstallmentAmount] = h(installmentOptions?.preselectedValue || installmentOptions?.values[0]);
        const [radioBtnValue, setRadioBtnValue] = h('onetime');
        // hasRadioButtonUI determines if we have 3 radio buttons in the UI ('onetime', 'installments' and 'revolving')
        const hasRadioButtonUI = installmentOptions?.plans?.includes('revolving');
        const getPartialAmount = divider => i18n.amount(amount.value / divider, amount.currency);
        const onSelectInstallment = e => {
            const selectedInstallments = e.target.value;
            setInstallmentAmount(Number(selectedInstallments));
        };
        const onRadioSelect = e => {
            const selectedBtn = e.currentTarget.getAttribute('value');
            setRadioBtnValue(selectedBtn);
        };
        const installmentItemsMapper = value => {
            let translationKey;
            let translationObj;
            if (type === 'amount') {
                translationKey = 'installmentOption';
                translationObj = {
                    count: value,
                    values: {
                        times: value,
                        partialValue: getPartialAmount(value)
                    }
                };
            } else {
                translationKey = `installmentOptionMonths`;
                translationObj = {
                    count: value,
                    values: {
                        times: value
                    }
                };
            }
            return {
                id: value,
                name: amount.value ? i18n.get(translationKey, translationObj) : `${value}`
            };
        };
        p(() => {
            if (installmentOptions?.values?.includes(installmentAmount)) {
                return;
            }
            setInstallmentAmount(installmentOptions?.preselectedValue ?? installmentOptions?.values[0]);
        }, [brand]);
        p(() => {
            const stateObj = {
                value: installmentAmount,
                ...(hasRadioButtonUI &&
                    radioBtnValue === 'revolving' && {
                        plan: radioBtnValue,
                        value: 1
                    }),
                ...(hasRadioButtonUI &&
                    radioBtnValue === 'onetime' && {
                        value: 1
                    })
            };
            onChange(
                installmentOptions
                    ? stateObj
                    : {
                          value: null
                      }
            );
        }, [installmentAmount, installmentOptions, radioBtnValue]);
        if (!installmentOptions) return null;
        if (amount.value === 0) return null;
        // Alternate interface for installments with the possibility of a "revolving" plan
        if (hasRadioButtonUI) {
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__installments'
                },
                /*#__PURE__*/ y$1(
                    Fieldset,
                    {
                        classNameModifiers: ['revolving-plan'],
                        label: ''
                    },
                    /*#__PURE__*/ y$1(RadioGroup, {
                        items: [
                            {
                                id: 'onetime',
                                name: 'installments.oneTime'
                            },
                            {
                                id: 'installments',
                                name: 'installments.installments'
                            },
                            {
                                id: 'revolving',
                                name: 'installments.revolving'
                            }
                        ],
                        i18n: i18n,
                        onChange: onRadioSelect,
                        value: radioBtnValue
                    }),
                    /*#__PURE__*/ y$1(
                        Field,
                        {
                            className:
                                radioBtnValue !== 'installments'
                                    ? `${styles$4['revolving-plan-installments__disabled']}`
                                    : `${styles$4['revolving-plan-installments']}`,
                            classNameModifiers: ['revolving-plan-installments']
                        },
                        renderFormField('select', {
                            filterable: false,
                            items: installmentOptions.values.map(installmentItemsMapper),
                            selected: installmentAmount,
                            onChange: onSelectInstallment,
                            name: 'installments',
                            disabled: radioBtnValue !== 'installments'
                        })
                    )
                )
            );
        }
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__installments'
            },
            /*#__PURE__*/ y$1(
                Field,
                {
                    label: i18n.get('installments'),
                    classNameModifiers: ['installments']
                },
                renderFormField('select', {
                    filterable: false,
                    items: installmentOptions.values.map(installmentItemsMapper),
                    selected: installmentAmount,
                    onChange: onSelectInstallment,
                    name: 'installments',
                    readonly: installmentOptions?.values?.length === 1
                })
            )
        );
    }
    Installments.defaultProps = {
        brand: '',
        amount: {},
        onChange: () => {}
    };

    const isValidHttpUrl = (string, allowHttp = false) => {
        let url;
        try {
            url = new URL(string);
        } catch (_) {
            return false;
        }
        return allowHttp ? url.protocol === 'http:' || url.protocol === 'https:' : url.protocol === 'https:';
    };

    function render(message, urls) {
        return /*#__PURE__*/ y$1(
            'span',
            {
                className: 'adyen-checkout-disclaimer__label'
            },
            interpolateElement(
                message,
                urls.map(
                    url => translation =>
                        /*#__PURE__*/ y$1(
                            'a',
                            {
                                className: 'adyen-checkout__link',
                                href: url,
                                target: '_blank',
                                rel: 'noopener noreferrer'
                            },
                            translation
                        )
                )
            )
        );
    }
    /* eslint-disable */ /**
     *  props: {
     *    message: 'By continuing you agree with the %#terms and conditions%#',
     *    urls: ['https://www.adyen.com']
     *  }
     *  String inside the '%#' token pair will be rendered as an anchor element.
     */ /* eslint-enable */ function DisclaimerMessage({ message, urls }) {
        const messageIsStr = typeof message === 'string';
        const validUrls = urls.every(url => typeof url === 'string' && isValidHttpUrl(url));
        if (!messageIsStr || !validUrls) return null;
        return render(message, urls);
    }

    const StoredCardFieldsWrapper = ({
        // base (shared)
        // n/a
        // vars created in CardInput:
        sfpState,
        setFocusOn,
        cvcPolicy,
        focusedElement,
        hasInstallments,
        handleInstallments,
        showAmountsInInstallments, // props passed through from CardInput:
        amount,
        hasCVC,
        installmentOptions,
        lastFour,
        expiryMonth,
        expiryYear, // Card
        disclaimerMessage
    }) => {
        return /*#__PURE__*/ y$1(
            LoadingWrapper,
            {
                status: sfpState.status
            },
            /*#__PURE__*/ y$1(StoredCardFields, {
                errors: sfpState.errors,
                brand: sfpState.brand,
                hasCVC: hasCVC,
                cvcPolicy: cvcPolicy,
                onFocusField: setFocusOn,
                focusedElement: focusedElement,
                status: sfpState.status,
                valid: sfpState.valid,
                lastFour: lastFour,
                expiryMonth: expiryMonth,
                expiryYear: expiryYear
            }),
            hasInstallments &&
                /*#__PURE__*/ y$1(Installments, {
                    amount: amount,
                    brand: sfpState.brand,
                    installmentOptions: installmentOptions,
                    onChange: handleInstallments,
                    type: showAmountsInInstallments ? 'amount' : 'months'
                }),
            disclaimerMessage &&
                /*#__PURE__*/ y$1(DisclaimerMessage, {
                    message: disclaimerMessage.message.replace('%{linkText}', `%#${disclaimerMessage.linkText}%#`),
                    urls: [disclaimerMessage.link]
                })
        );
    };

    function BrandIcon({ brand, brandsConfiguration = {} }) {
        const { loadingContext } = useCoreContext();
        const imageName = brand === 'card' ? 'nocard' : brand;
        const imageUrl = brandsConfiguration[brand]?.icon ?? getCardImageUrl(imageName, loadingContext);
        const handleError = e => {
            e.target.style.cssText = 'display: none';
        };
        return /*#__PURE__*/ y$1('img', {
            className: `${styles$4['card-input__icon']} adyen-checkout__card__cardNumber__brandIcon`,
            onError: handleError,
            alt: brand,
            src: imageUrl
        });
    }

    const DualBrandingIcon = ({ brand, onClick, dataValue, notSelected, brandsConfiguration = {} }) => {
        const { loadingContext } = useCoreContext();
        const imageName = brand === 'card' ? 'nocard' : brand;
        const imageUrl = brandsConfiguration[brand]?.icon ?? getCardImageUrl(imageName, loadingContext);
        const handleError = e => {
            e.target.style.cssText = 'display: none';
        };
        return /*#__PURE__*/ y$1('img', {
            className: `${styles$4['card-input__icon']} ${
                notSelected ? 'adyen-checkout__card__cardNumber__brandIcon--not-selected' : ''
            } adyen-checkout__card__cardNumber__brandIcon`,
            onError: handleError,
            alt: brand,
            src: imageUrl,
            onClick: onClick,
            'data-value': dataValue
        });
    };

    function CardNumber(props) {
        const { i18n } = useCoreContext();
        const { error = '', isValid = false, onFocusField = () => {}, dualBrandingElements, dualBrandingChangeHandler, dualBrandingSelected } = props;
        return /*#__PURE__*/ y$1(
            Field,
            {
                label: props.label,
                focused: props.focused,
                filled: props.filled,
                classNameModifiers: ['cardNumber'],
                onFocusField: () => onFocusField(ENCRYPTED_CARD_NUMBER),
                errorMessage: error,
                isValid: isValid,
                dir: 'ltr',
                name: ENCRYPTED_CARD_NUMBER,
                showValidIcon: false,
                i18n: i18n,
                errorVisibleToScreenReader: false
            },
            /*#__PURE__*/ y$1(
                DataSfSpan,
                {
                    encryptedFieldType: ENCRYPTED_CARD_NUMBER,
                    className: classNames({
                        'adyen-checkout__input': true,
                        'adyen-checkout__input--large': true,
                        'adyen-checkout__card__cardNumber__input': true,
                        [styles$4['adyen-checkout__input']]: true,
                        'adyen-checkout__input--error': error,
                        'adyen-checkout__input--focus': props.focused,
                        'adyen-checkout__input--valid': isValid,
                        'adyen-checkout__card__cardNumber__input--noBrand': !props.showBrandIcon
                    })
                },
                props.showBrandIcon &&
                    !dualBrandingElements &&
                    /*#__PURE__*/ y$1(BrandIcon, {
                        brandsConfiguration: props.brandsConfiguration,
                        brand: props.brand
                    })
            ),
            dualBrandingElements &&
                !error &&
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: classNames([
                            'adyen-checkout__card__dual-branding__buttons',
                            {
                                'adyen-checkout__card__dual-branding__buttons--active': isValid
                            }
                        ])
                    },
                    dualBrandingElements.map(element =>
                        /*#__PURE__*/ y$1(DualBrandingIcon, {
                            key: element.id,
                            brand: element.id,
                            brandsConfiguration: props.brandsConfiguration,
                            onClick: dualBrandingChangeHandler,
                            dataValue: element.id,
                            notSelected: dualBrandingSelected !== '' && dualBrandingSelected !== element.id
                        })
                    )
                )
        );
    }

    function ExpirationDate(props) {
        const { label, focused, filled, onFocusField, className = '', error = '', isValid = false, expiryDatePolicy = DATE_POLICY_REQUIRED } = props;
        const { i18n } = useCoreContext();
        const getImage = useImage();
        const fieldClassnames = classNames(className, {
            'adyen-checkout__field__exp-date': true,
            [styles$4['adyen-checkout__card__exp-date__input--hidden']]: expiryDatePolicy === DATE_POLICY_HIDDEN,
            'adyen-checkout__field__exp-date--optional': expiryDatePolicy === DATE_POLICY_OPTIONAL
        });
        const fieldLabel = expiryDatePolicy !== DATE_POLICY_OPTIONAL ? label : `${label} ${i18n.get('field.title.optional')}`;
        return /*#__PURE__*/ y$1(
            Field,
            {
                label: fieldLabel,
                classNameModifiers: ['expiryDate'],
                className: fieldClassnames,
                focused: focused,
                filled: filled,
                onFocusField: () => onFocusField(ENCRYPTED_EXPIRY_DATE),
                errorMessage: error,
                isValid: isValid,
                dir: 'ltr',
                name: 'encryptedExpiryDate',
                i18n: i18n,
                errorVisibleToScreenReader: false
            },
            /*#__PURE__*/ y$1(DataSfSpan, {
                encryptedFieldType: ENCRYPTED_EXPIRY_DATE,
                className: classNames(
                    'adyen-checkout__input',
                    'adyen-checkout__input--small',
                    'adyen-checkout__card__exp-date__input',
                    [styles$4['adyen-checkout__input']],
                    {
                        'adyen-checkout__input--error': error,
                        'adyen-checkout__input--focus': focused,
                        'adyen-checkout__input--valid': isValid
                    }
                )
            }),
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: classNames('adyen-checkout__field__exp-date_hint_wrapper', [styles$4['checkout__field__exp-date_hint_wrapper']], {
                        'adyen-checkout__field__exp-date_hint_wrapper--hidden': error || isValid
                    })
                },
                /*#__PURE__*/ y$1('img', {
                    src: getImage({
                        imageFolder: 'components/'
                    })('expiry_date_hint'),
                    className: 'adyen-checkout__field__exp-date_hint',
                    alt: fieldLabel
                })
            )
        );
    }

    const AvailableBrands = ({ brands, activeBrand }) => {
        if (!brands?.length) {
            return null;
        }
        const isValidBrand = activeBrand !== 'card';
        return /*#__PURE__*/ y$1(
            'span',
            {
                className: classNames('adyen-checkout__card__brands', {
                    'adyen-checkout__card__brands--hidden': isValidBrand
                })
            },
            brands.map(({ name, icon }) =>
                /*#__PURE__*/ y$1(
                    'span',
                    {
                        key: name,
                        className: 'adyen-checkout__card__brands__brand-wrapper'
                    },
                    /*#__PURE__*/ y$1(Img, {
                        src: icon,
                        alt: BRAND_READABLE_NAME_MAP[name]
                    })
                )
            )
        );
    };

    function CardFields({
        brand,
        brandsIcons,
        brandsConfiguration,
        dualBrandingElements,
        dualBrandingChangeHandler,
        dualBrandingSelected,
        errors,
        focusedElement,
        hasCVC,
        cvcPolicy,
        expiryDatePolicy,
        onFocusField,
        showBrandIcon,
        showBrandsUnderCardNumber,
        valid
    }) {
        const { i18n } = useCoreContext();
        const getError = (errors, fieldType) => {
            const errorMessage = errors[fieldType] ? i18n.get(errors[fieldType]) : null;
            return errorMessage;
        };
        // A set of brands filtered to exclude those that can never appear in the UI
        const allowedBrands = brandsIcons?.filter(brandsIcons => !BRAND_ICON_UI_EXCLUSION_LIST?.includes(brandsIcons.name));
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__card__form'
            },
            /*#__PURE__*/ y$1(CardNumber, {
                brand: brand,
                brandsConfiguration: brandsConfiguration,
                error: getError(errors, ENCRYPTED_CARD_NUMBER),
                focused: focusedElement === ENCRYPTED_CARD_NUMBER,
                isValid: !!valid.encryptedCardNumber,
                label: i18n.get('creditCard.numberField.title'),
                onFocusField: onFocusField,
                filled: !!errors.encryptedCardNumber || !!valid.encryptedCardNumber,
                showBrandIcon: showBrandIcon,
                dualBrandingElements: dualBrandingElements,
                dualBrandingChangeHandler: dualBrandingChangeHandler,
                dualBrandingSelected: dualBrandingSelected
            }),
            showBrandsUnderCardNumber &&
                /*#__PURE__*/ y$1(AvailableBrands, {
                    activeBrand: brand,
                    brands: allowedBrands
                }),
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: classNames('adyen-checkout__card__exp-cvc adyen-checkout__field-wrapper', {
                        [styles$4['adyen-checkout__card__exp-cvc__exp-date__input--hidden']]: expiryDatePolicy === DATE_POLICY_HIDDEN
                    })
                },
                /*#__PURE__*/ y$1(ExpirationDate, {
                    error: getError(errors, ENCRYPTED_EXPIRY_DATE),
                    focused: focusedElement === ENCRYPTED_EXPIRY_DATE,
                    isValid: !!valid.encryptedExpiryMonth && !!valid.encryptedExpiryYear,
                    filled: !!errors.encryptedExpiryDate || !!valid.encryptedExpiryYear,
                    label: i18n.get('creditCard.expiryDateField.title'),
                    onFocusField: onFocusField,
                    className: 'adyen-checkout__field--50',
                    expiryDatePolicy: expiryDatePolicy
                }),
                hasCVC &&
                    /*#__PURE__*/ y$1(CVC, {
                        error: getError(errors, ENCRYPTED_SECURITY_CODE),
                        focused: focusedElement === ENCRYPTED_SECURITY_CODE,
                        cvcPolicy: cvcPolicy,
                        isValid: !!valid.encryptedSecurityCode,
                        filled: !!errors.encryptedSecurityCode || !!valid.encryptedSecurityCode,
                        label: i18n.get('creditCard.cvcField.title'),
                        onFocusField: onFocusField,
                        className: 'adyen-checkout__field--50',
                        frontCVC: brand === 'amex'
                    })
            )
        );
    }

    function KCPAuthentication(props) {
        const { i18n } = useCoreContext();
        const taxNumberLabel = F(() => {
            if (props.value?.length > 6) return i18n.get('creditCard.taxNumber.labelAlt');
            return i18n.get('creditCard.taxNumber.label');
        }, [props.value]);
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__card__kcp-authentication'
            },
            /*#__PURE__*/ y$1(
                Field,
                {
                    label: taxNumberLabel,
                    filled: props.filled,
                    classNameModifiers: ['kcp-taxNumber'],
                    errorMessage: props.error && i18n.get('creditCard.taxNumber.invalid'),
                    isValid: props.isValid,
                    dir: 'ltr',
                    name: 'kcpTaxNumberOrDOB'
                },
                renderFormField('tel', {
                    name: 'kcpTaxNumberOrDOB',
                    className: `adyen-checkout__card__kcp-taxNumber__input ${styles$4['adyen-checkout__input']}`,
                    placeholder: i18n.get('creditCard.taxNumber.placeholder'),
                    maxLength: 10,
                    minLength: 6,
                    autoComplete: false,
                    value: props.value,
                    required: true,
                    onBlur: props.onBlur,
                    onInput: props.onInput,
                    disabled: props.disabled
                })
            ),
            /*#__PURE__*/ y$1(
                Field,
                {
                    label: i18n.get('creditCard.encryptedPassword.label'),
                    focused: props.focusedElement === 'encryptedPassword',
                    filled: props.filled,
                    classNameModifiers: ['50', 'koreanAuthentication-encryptedPassword'],
                    onFocusField: () => props.onFocusField('encryptedPassword'),
                    errorMessage: props.encryptedPasswordState.errors && i18n.get(String(props.encryptedPasswordState.errors)),
                    isValid: props.encryptedPasswordState.valid,
                    dir: 'ltr',
                    name: 'encryptedPassword'
                },
                /*#__PURE__*/ y$1(DataSfSpan, {
                    encryptedFieldType: 'encryptedPassword',
                    className: classNames({
                        'adyen-checkout__input': true,
                        'adyen-checkout__input--large': true,
                        [styles$4['adyen-checkout__input']]: true,
                        'adyen-checkout__input--error': props.encryptedPasswordState.errors,
                        'adyen-checkout__input--valid': props.encryptedPasswordState.valid,
                        'adyen-checkout__input--focus': props.focusedElement === 'encryptedPassword'
                    })
                })
            )
        );
    }

    function SocialSecurityNumberBrazil({ onBlur, onInput, valid = false, error = null, data = '', required = false, disabled = false }) {
        const { i18n } = useCoreContext();
        return /*#__PURE__*/ y$1(
            Field,
            {
                label: `${i18n.get('boleto.socialSecurityNumber')}`,
                classNameModifiers: ['socialSecurityNumber'],
                errorMessage: error && error.errorMessage ? i18n.get(error.errorMessage) : !!error,
                isValid: Boolean(valid),
                name: 'socialSecurityNumber'
            },
            renderFormField('text', {
                name: 'socialSecurityNumber',
                autocorrect: 'off',
                spellcheck: false,
                value: data,
                maxLength: 18,
                onInput,
                onBlur,
                required,
                disabled
            })
        );
    }

    /**
     * "Store details" generic checkbox
     */ function StoreDetails({ storeDetails = false, ...props }) {
        const { i18n } = useCoreContext();
        const [value, setValue] = h(storeDetails);
        const onChange = e => {
            setValue(e.target.checked);
        };
        p(() => {
            props.onChange(value);
        }, [value]);
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__store-details'
            },
            renderFormField('boolean', {
                onChange,
                label: i18n.get('storeDetails'),
                value,
                name: 'storeDetails'
            })
        );
    }

    const ReadOnlyAddress = ({ data, label }) => {
        const { street, houseNumberOrName, city, postalCode, stateOrProvince, country } = data;
        return /*#__PURE__*/ y$1(
            Fieldset,
            {
                classNameModifiers: [label],
                label: label,
                readonly: true
            },
            !!street && street,
            houseNumberOrName && `, ${houseNumberOrName},`,
            /*#__PURE__*/ y$1('br', null),
            postalCode && `${postalCode}`,
            city && `, ${city}`,
            stateOrProvince && stateOrProvince !== FALLBACK_VALUE && `, ${stateOrProvince}`,
            country && `, ${country} `
        );
    };

    const createFormatByDigits = digits => {
        const format = new Array(digits).fill('9').join('');
        return {
            // Formatter - excludes non digits and limits to maxlength
            formatterFn: val => val.replace(getFormattingRegEx('^\\d', 'g'), '').substring(0, digits),
            format,
            maxlength: digits
        };
    };
    const specialCharsRegEx = getFormattingRegEx(SPECIAL_CHARS);
    const formattingFn = val => trimValWithOneSpace(val).replace(specialCharsRegEx, '');
    const addressFormatters = {
        postalCode: {
            formatterFn: (val, context) => {
                const country = context.state.data.country;
                // Country specific formatting rule
                const specificRule = countrySpecificFormatters[country]?.postalCode.formatterFn;
                if (specificRule) {
                    return specificRule(val);
                }
                // Default formatting rule: allow anything
                return val;
            }
        },
        street: {
            formatterFn: formattingFn
        },
        houseNumberOrName: {
            formatterFn: formattingFn
        },
        city: {
            formatterFn: formattingFn
        }
    };
    // TODO make proper formatter fns for those entries that don't just have a straightforward, x number of digits, no spaces, format
    //  check against our internal documentation on address postal code
    //  which, for example, says BR isn't just 8 digits (it can be spilt by a hyphen) & CZ can also be 5 digits, no spaces
    const countrySpecificFormatters = {
        AT: {
            postalCode: createFormatByDigits(4)
        },
        AU: {
            postalCode: createFormatByDigits(4)
        },
        BE: {
            postalCode: createFormatByDigits(4)
        },
        BG: {
            postalCode: createFormatByDigits(4)
        },
        BR: {
            postalCode: {
                // Formatter - excludes non digits, but allows hyphens, and limits to a maxlength that varies depending on whether a hyphen is present or not
                formatterFn: val => {
                    const nuVal = val.replace(getFormattingRegEx('^\\d-', 'g'), '');
                    const maxlength = nuVal.indexOf('-') > -1 ? 9 : 8;
                    return nuVal.substring(0, maxlength);
                },
                format: '12345678 or 12345-678',
                maxlength: 9
            }
        },
        CA: {
            postalCode: {
                format: 'A9A 9A9 or A9A9A9',
                maxlength: 7
            }
        },
        CH: {
            postalCode: createFormatByDigits(4)
        },
        CY: {
            postalCode: createFormatByDigits(4)
        },
        CZ: {
            postalCode: {
                format: '999 99',
                maxlength: 6
            }
        },
        DE: {
            postalCode: createFormatByDigits(5)
        },
        DK: {
            postalCode: {
                format: '9999',
                maxlength: 7
            }
        },
        EE: {
            postalCode: createFormatByDigits(5)
        },
        ES: {
            postalCode: createFormatByDigits(5)
        },
        FI: {
            postalCode: createFormatByDigits(5)
        },
        FR: {
            postalCode: createFormatByDigits(5)
        },
        GB: {
            postalCode: {
                // Disallow special chars & set to maxlength
                formatterFn: val => val.replace(getFormattingRegEx(SPECIAL_CHARS), '').substring(0, 8),
                format: 'AA99 9AA or A99 9AA or A9 9AA',
                maxlength: 8
            }
        },
        GR: {
            postalCode: {
                format: '999 99',
                maxlength: 6
            }
        },
        HR: {
            postalCode: {
                format: '[1-5]9999',
                maxlength: 5
            }
        },
        HU: {
            postalCode: createFormatByDigits(4)
        },
        IE: {
            postalCode: {
                format: 'A99 A999',
                maxlength: 8
            }
        },
        IS: {
            postalCode: createFormatByDigits(3)
        },
        IT: {
            postalCode: createFormatByDigits(5)
        },
        LI: {
            postalCode: createFormatByDigits(4)
        },
        LT: {
            postalCode: {
                format: '9999 or 99999 or LT-99999',
                maxlength: 8
            }
        },
        LU: {
            postalCode: createFormatByDigits(4)
        },
        LV: {
            postalCode: {
                format: '9999 or LV-9999',
                maxlength: 7
            }
        },
        MC: {
            postalCode: {
                format: '980NN',
                maxlength: 5
            }
        },
        MT: {
            postalCode: {
                format: 'AA99 or AAA99 or AA9999 or AAA9999',
                maxlength: 8
            }
        },
        MY: {
            postalCode: createFormatByDigits(5)
        },
        NL: {
            postalCode: {
                format: '9999AA',
                maxlength: 7
            }
        },
        NZ: {
            postalCode: createFormatByDigits(4)
        },
        NO: {
            postalCode: createFormatByDigits(4)
        },
        PL: {
            postalCode: {
                // Formatter - excludes non digits, but allows hyphens, and limits to a maxlength that varies depending on whether a hyphen is present or not
                formatterFn: val => {
                    const nuVal = val.replace(getFormattingRegEx('^\\d-', 'g'), '');
                    const maxlength = nuVal.indexOf('-') > -1 ? 6 : 5;
                    return nuVal.substring(0, maxlength);
                },
                format: '99999 or 99-999',
                maxlength: 6
            }
        },
        PT: {
            postalCode: {
                formatterFn: val => {
                    const nuVal = val.replace(getFormattingRegEx('^\\d-', 'g'), '');
                    return nuVal.substring(0, 8);
                },
                format: '9999-999',
                maxlength: 8
            }
        },
        RO: {
            postalCode: createFormatByDigits(6)
        },
        SI: {
            postalCode: {
                format: '9999 or SI-9999',
                maxlength: 7
            }
        },
        SE: {
            postalCode: createFormatByDigits(5)
        },
        SG: {
            postalCode: createFormatByDigits(6)
        },
        SK: {
            postalCode: {
                format: '99999 or SK-99999',
                maxlength: 8
            }
        },
        JP: {
            postalCode: {
                format: '999-9999',
                maxlength: 8
            }
        },
        US: {
            postalCode: {
                formatterFn: val => {
                    const nuVal = val.replace(getFormattingRegEx('^\\d-', 'g'), '');
                    const maxlength = nuVal.indexOf('-') > -1 ? 10 : 5;
                    return nuVal.substring(0, maxlength);
                },
                format: '99999 or 99999-9999'
            }
        }
    };

    const createPatternByDigits = digits => {
        return {
            pattern: new RegExp(`\\d{${digits}}`)
        };
    };
    const validatePostalCode = (val, countryCode, validatorRules) => {
        if (countryCode) {
            // Dynamically create errorMessage
            validatorRules.postalCode.errorMessage = {
                translationKey: 'invalidFormatExpects',
                translationObject: {
                    values: {
                        format: countrySpecificFormatters[countryCode]?.postalCode.format || null
                    }
                }
            };
            if (isEmpty(val)) return null;
            const pattern = postalCodePatterns[countryCode]?.pattern;
            return pattern ? pattern.test(val) : !!val; // No pattern? Accept any, filled, value.
        }
        // Default rule
        return isEmpty(val) ? null : true;
    };
    const postalCodePatterns = {
        AT: createPatternByDigits(4),
        AU: createPatternByDigits(4),
        BE: {
            pattern: /(?:(?:[1-9])(?:\d{3}))/
        },
        BG: createPatternByDigits(4),
        BR: {
            pattern: /^\d{5}-?\d{3}$/
        },
        CA: {
            pattern: /(?:[ABCEGHJ-NPRSTVXY]\d[A-Z][ -]?\d[A-Z]\d)/
        },
        CH: {
            pattern: /[1-9]\d{3}/
        },
        CY: createPatternByDigits(4),
        CZ: {
            pattern: /\d{3}\s?\d{2}/
        },
        DE: createPatternByDigits(5),
        DK: createPatternByDigits(4),
        EE: createPatternByDigits(5),
        ES: {
            pattern: /(?:0[1-9]|[1-4]\d|5[0-2])\d{3}/
        },
        FI: createPatternByDigits(5),
        FR: createPatternByDigits(5),
        GB: {
            pattern: /^([A-Za-z][A-Ha-hK-Yk-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/
        },
        GE: createPatternByDigits(4),
        GR: {
            pattern: /^\d{3}\s{0,1}\d{2}$/
        },
        HR: {
            pattern: /^([1-5])[0-9]{4}$/
        },
        HU: createPatternByDigits(4),
        IE: {
            pattern: /(?:^[AC-FHKNPRTV-Y][0-9]{2}|D6W)[ -]?[0-9AC-FHKNPRTV-Y]{4}/
        },
        IS: createPatternByDigits(3),
        IT: createPatternByDigits(5),
        LI: createPatternByDigits(4),
        LT: {
            pattern: /^(LT-\d{5})$/
        },
        LU: createPatternByDigits(4),
        LV: {
            pattern: /^(LV-)[0-9]{4}$/
        },
        MC: {
            pattern: /^980\d{2}$/
        },
        MT: {
            pattern: /^[A-Za-z]{3}\d{4}$/
        },
        MY: createPatternByDigits(5),
        NL: {
            pattern: /(?:NL-)?(?:[1-9]\d{3} ?(?:[A-EGHJ-NPRTVWXZ][A-EGHJ-NPRSTVWXZ]|S[BCEGHJ-NPRTVWXZ]))/
        },
        NO: createPatternByDigits(4),
        PL: {
            pattern: /^\d{2}[-]{0,1}\d{3}$/
        },
        PT: {
            pattern: /^([1-9]\d{3})([- ]?(\d{3})? *)$/
        },
        RO: createPatternByDigits(6),
        SI: createPatternByDigits(4),
        SE: createPatternByDigits(5),
        SG: createPatternByDigits(6),
        SK: createPatternByDigits(5),
        US: createPatternByDigits(5)
    };
    /**
     * Validates only postalCode property. As the partial address form does not have the country selector, the country value
     * must be informed beforehand and can't be picked up from the form context
     *
     * @param country - Country that will be used to validate postal code
     */ const getPartialAddressValidationRules = country => {
        const validationRules = {
            postalCode: {
                modes: ['blur'],
                validate: val => {
                    return validatePostalCode(val, country, validationRules);
                },
                errorMessage: ERROR_CODES[ERROR_MSG_INCOMPLETE_FIELD]
            }
        };
        return validationRules;
    };
    const getAddressValidationRules = specifications => {
        const addressValidationRules = {
            postalCode: {
                modes: ['blur'],
                validate: (val, context) => {
                    const country = context.state.data.country;
                    return validatePostalCode(val, country, addressValidationRules);
                },
                errorMessage: ERROR_CODES[ERROR_MSG_INCOMPLETE_FIELD]
            },
            houseNumberOrName: {
                validate: (value, context) => {
                    const selectedCountry = context.state?.data?.country;
                    const isOptional = selectedCountry && specifications.countryHasOptionalField(selectedCountry, 'houseNumberOrName');
                    return isOptional || (isEmpty(value) ? null : true);
                },
                modes: ['blur'],
                errorMessage: ERROR_CODES[ERROR_MSG_INCOMPLETE_FIELD]
            },
            default: {
                validate: value => (isEmpty(value) ? null : true),
                modes: ['blur'],
                errorMessage: ERROR_CODES[ERROR_MSG_INCOMPLETE_FIELD]
            }
        };
        return addressValidationRules;
    };

    /* eslint-disable no-prototype-builtins */
    var g =
        (typeof globalThis !== 'undefined' && globalThis) ||
        (typeof self !== 'undefined' && self) ||
        // eslint-disable-next-line no-undef
        (typeof global !== 'undefined' && global) ||
        {};

    var support = {
        searchParams: 'URLSearchParams' in g,
        iterable: 'Symbol' in g && 'iterator' in Symbol,
        blob:
            'FileReader' in g &&
            'Blob' in g &&
            (function () {
                try {
                    new Blob();
                    return true;
                } catch (e) {
                    return false;
                }
            })(),
        formData: 'FormData' in g,
        arrayBuffer: 'ArrayBuffer' in g
    };

    function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
    }

    if (support.arrayBuffer) {
        var viewClasses = [
            '[object Int8Array]',
            '[object Uint8Array]',
            '[object Uint8ClampedArray]',
            '[object Int16Array]',
            '[object Uint16Array]',
            '[object Int32Array]',
            '[object Uint32Array]',
            '[object Float32Array]',
            '[object Float64Array]'
        ];

        var isArrayBufferView =
            ArrayBuffer.isView ||
            function (obj) {
                return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
            };
    }

    function normalizeName(name) {
        if (typeof name !== 'string') {
            name = String(name);
        }
        if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
            throw new TypeError('Invalid character in header field name: "' + name + '"');
        }
        return name.toLowerCase();
    }

    function normalizeValue(value) {
        if (typeof value !== 'string') {
            value = String(value);
        }
        return value;
    }

    // Build a destructive iterator for the value list
    function iteratorFor(items) {
        var iterator = {
            next: function () {
                var value = items.shift();
                return { done: value === undefined, value: value };
            }
        };

        if (support.iterable) {
            iterator[Symbol.iterator] = function () {
                return iterator;
            };
        }

        return iterator;
    }

    function Headers(headers) {
        this.map = {};

        if (headers instanceof Headers) {
            headers.forEach(function (value, name) {
                this.append(name, value);
            }, this);
        } else if (Array.isArray(headers)) {
            headers.forEach(function (header) {
                if (header.length != 2) {
                    throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length);
                }
                this.append(header[0], header[1]);
            }, this);
        } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function (name) {
                this.append(name, headers[name]);
            }, this);
        }
    }

    Headers.prototype.append = function (name, value) {
        name = normalizeName(name);
        value = normalizeValue(value);
        var oldValue = this.map[name];
        this.map[name] = oldValue ? oldValue + ', ' + value : value;
    };

    Headers.prototype['delete'] = function (name) {
        delete this.map[normalizeName(name)];
    };

    Headers.prototype.get = function (name) {
        name = normalizeName(name);
        return this.has(name) ? this.map[name] : null;
    };

    Headers.prototype.has = function (name) {
        return this.map.hasOwnProperty(normalizeName(name));
    };

    Headers.prototype.set = function (name, value) {
        this.map[normalizeName(name)] = normalizeValue(value);
    };

    Headers.prototype.forEach = function (callback, thisArg) {
        for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
                callback.call(thisArg, this.map[name], name, this);
            }
        }
    };

    Headers.prototype.keys = function () {
        var items = [];
        this.forEach(function (value, name) {
            items.push(name);
        });
        return iteratorFor(items);
    };

    Headers.prototype.values = function () {
        var items = [];
        this.forEach(function (value) {
            items.push(value);
        });
        return iteratorFor(items);
    };

    Headers.prototype.entries = function () {
        var items = [];
        this.forEach(function (value, name) {
            items.push([name, value]);
        });
        return iteratorFor(items);
    };

    if (support.iterable) {
        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    }

    function consumed(body) {
        if (body._noBody) return;
        if (body.bodyUsed) {
            return Promise.reject(new TypeError('Already read'));
        }
        body.bodyUsed = true;
    }

    function fileReaderReady(reader) {
        return new Promise(function (resolve, reject) {
            reader.onload = function () {
                resolve(reader.result);
            };
            reader.onerror = function () {
                reject(reader.error);
            };
        });
    }

    function readBlobAsArrayBuffer(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsArrayBuffer(blob);
        return promise;
    }

    function readBlobAsText(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
        var encoding = match ? match[1] : 'utf-8';
        reader.readAsText(blob, encoding);
        return promise;
    }

    function readArrayBufferAsText(buf) {
        var view = new Uint8Array(buf);
        var chars = new Array(view.length);

        for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i]);
        }
        return chars.join('');
    }

    function bufferClone(buf) {
        if (buf.slice) {
            return buf.slice(0);
        } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
        }
    }

    function Body() {
        this.bodyUsed = false;

        this._initBody = function (body) {
            /*
      fetch-mock wraps the Response object in an ES6 Proxy to
      provide useful test harness features such as flush. However, on
      ES5 browsers without fetch or Proxy support pollyfills must be used;
      the proxy-pollyfill is unable to proxy an attribute unless it exists
      on the object before the Proxy is created. This change ensures
      Response.bodyUsed exists on the instance, while maintaining the
      semantic of setting Request.bodyUsed in the constructor before
      _initBody is called.
    */
            // eslint-disable-next-line no-self-assign
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
                this._noBody = true;
                this._bodyText = '';
            } else if (typeof body === 'string') {
                this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                this._bodyArrayBuffer = bufferClone(body.buffer);
                // IE 10-11 can't handle a DataView body.
                this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                this._bodyArrayBuffer = bufferClone(body);
            } else {
                this._bodyText = body = Object.prototype.toString.call(body);
            }

            if (!this.headers.get('content-type')) {
                if (typeof body === 'string') {
                    this.headers.set('content-type', 'text/plain;charset=UTF-8');
                } else if (this._bodyBlob && this._bodyBlob.type) {
                    this.headers.set('content-type', this._bodyBlob.type);
                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                    this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                }
            }
        };

        if (support.blob) {
            this.blob = function () {
                var rejected = consumed(this);
                if (rejected) {
                    return rejected;
                }

                if (this._bodyBlob) {
                    return Promise.resolve(this._bodyBlob);
                } else if (this._bodyArrayBuffer) {
                    return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                } else if (this._bodyFormData) {
                    throw new Error('could not read FormData body as blob');
                } else {
                    return Promise.resolve(new Blob([this._bodyText]));
                }
            };
        }

        this.arrayBuffer = function () {
            if (this._bodyArrayBuffer) {
                var isConsumed = consumed(this);
                if (isConsumed) {
                    return isConsumed;
                } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                    return Promise.resolve(
                        this._bodyArrayBuffer.buffer.slice(
                            this._bodyArrayBuffer.byteOffset,
                            this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                        )
                    );
                } else {
                    return Promise.resolve(this._bodyArrayBuffer);
                }
            } else if (support.blob) {
                return this.blob().then(readBlobAsArrayBuffer);
            } else {
                throw new Error('could not read as ArrayBuffer');
            }
        };

        this.text = function () {
            var rejected = consumed(this);
            if (rejected) {
                return rejected;
            }

            if (this._bodyBlob) {
                return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
                return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
                throw new Error('could not read FormData body as text');
            } else {
                return Promise.resolve(this._bodyText);
            }
        };

        if (support.formData) {
            this.formData = function () {
                return this.text().then(decode);
            };
        }

        this.json = function () {
            return this.text().then(JSON.parse);
        };

        return this;
    }

    // HTTP methods whose capitalization should be normalized
    var methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE'];

    function normalizeMethod(method) {
        var upcased = method.toUpperCase();
        return methods.indexOf(upcased) > -1 ? upcased : method;
    }

    function Request(input, options) {
        if (!(this instanceof Request)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
        }

        options = options || {};
        var body = options.body;

        if (input instanceof Request) {
            if (input.bodyUsed) {
                throw new TypeError('Already read');
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
                this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
                body = input._bodyInit;
                input.bodyUsed = true;
            }
        } else {
            this.url = String(input);
        }

        this.credentials = options.credentials || this.credentials || 'same-origin';
        if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
        }
        this.method = normalizeMethod(options.method || this.method || 'GET');
        this.mode = options.mode || this.mode || null;
        this.signal =
            options.signal ||
            this.signal ||
            (function () {
                if ('AbortController' in g) {
                    var ctrl = new AbortController();
                    return ctrl.signal;
                }
            })();
        this.referrer = null;

        if ((this.method === 'GET' || this.method === 'HEAD') && body) {
            throw new TypeError('Body not allowed for GET or HEAD requests');
        }
        this._initBody(body);

        if (this.method === 'GET' || this.method === 'HEAD') {
            if (options.cache === 'no-store' || options.cache === 'no-cache') {
                // Search for a '_' parameter in the query string
                var reParamSearch = /([?&])_=[^&]*/;
                if (reParamSearch.test(this.url)) {
                    // If it already exists then set the value with the current time
                    this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
                } else {
                    // Otherwise add a new '_' parameter to the end with the current time
                    var reQueryString = /\?/;
                    this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
                }
            }
        }
    }

    Request.prototype.clone = function () {
        return new Request(this, { body: this._bodyInit });
    };

    function decode(body) {
        var form = new FormData();
        body.trim()
            .split('&')
            .forEach(function (bytes) {
                if (bytes) {
                    var split = bytes.split('=');
                    var name = split.shift().replace(/\+/g, ' ');
                    var value = split.join('=').replace(/\+/g, ' ');
                    form.append(decodeURIComponent(name), decodeURIComponent(value));
                }
            });
        return form;
    }

    function parseHeaders(rawHeaders) {
        var headers = new Headers();
        // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
        // https://tools.ietf.org/html/rfc7230#section-3.2
        var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
        // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
        // https://github.com/github/fetch/issues/748
        // https://github.com/zloirock/core-js/issues/751
        preProcessedHeaders
            .split('\r')
            .map(function (header) {
                return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header;
            })
            .forEach(function (line) {
                var parts = line.split(':');
                var key = parts.shift().trim();
                if (key) {
                    var value = parts.join(':').trim();
                    try {
                        headers.append(key, value);
                    } catch (error) {
                        console.warn('Response ' + error.message);
                    }
                }
            });
        return headers;
    }

    Body.call(Request.prototype);

    function Response(bodyInit, options) {
        if (!(this instanceof Response)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
        }
        if (!options) {
            options = {};
        }

        this.type = 'default';
        this.status = options.status === undefined ? 200 : options.status;
        if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
        }
        this.ok = this.status >= 200 && this.status < 300;
        this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
        this.headers = new Headers(options.headers);
        this.url = options.url || '';
        this._initBody(bodyInit);
    }

    Body.call(Response.prototype);

    Response.prototype.clone = function () {
        return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
        });
    };

    Response.error = function () {
        var response = new Response(null, { status: 200, statusText: '' });
        response.status = 0;
        response.type = 'error';
        return response;
    };

    var redirectStatuses = [301, 302, 303, 307, 308];

    Response.redirect = function (url, status) {
        if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError('Invalid status code');
        }

        return new Response(null, { status: status, headers: { location: url } });
    };

    var DOMException = g.DOMException;
    try {
        new DOMException();
    } catch (err) {
        DOMException = function (message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
        };
        DOMException.prototype = Object.create(Error.prototype);
        DOMException.prototype.constructor = DOMException;
    }

    function fetch$1(input, init) {
        return new Promise(function (resolve, reject) {
            var request = new Request(input, init);

            if (request.signal && request.signal.aborted) {
                return reject(new DOMException('Aborted', 'AbortError'));
            }

            var xhr = new XMLHttpRequest();

            function abortXhr() {
                xhr.abort();
            }

            xhr.onload = function () {
                var options = {
                    status: xhr.status,
                    statusText: xhr.statusText,
                    headers: parseHeaders(xhr.getAllResponseHeaders() || '')
                };
                options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
                var body = 'response' in xhr ? xhr.response : xhr.responseText;
                setTimeout(function () {
                    resolve(new Response(body, options));
                }, 0);
            };

            xhr.onerror = function () {
                setTimeout(function () {
                    reject(new TypeError('Network request failed'));
                }, 0);
            };

            xhr.ontimeout = function () {
                setTimeout(function () {
                    reject(new TypeError('Network request failed'));
                }, 0);
            };

            xhr.onabort = function () {
                setTimeout(function () {
                    reject(new DOMException('Aborted', 'AbortError'));
                }, 0);
            };

            function fixUrl(url) {
                try {
                    return url === '' && g.location.href ? g.location.href : url;
                } catch (e) {
                    return url;
                }
            }

            xhr.open(request.method, fixUrl(request.url), true);

            if (request.credentials === 'include') {
                xhr.withCredentials = true;
            } else if (request.credentials === 'omit') {
                xhr.withCredentials = false;
            }

            if ('responseType' in xhr) {
                if (support.blob) {
                    xhr.responseType = 'blob';
                } else if (support.arrayBuffer) {
                    xhr.responseType = 'arraybuffer';
                }
            }

            if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || (g.Headers && init.headers instanceof g.Headers))) {
                var names = [];
                Object.getOwnPropertyNames(init.headers).forEach(function (name) {
                    names.push(normalizeName(name));
                    xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
                });
                request.headers.forEach(function (value, name) {
                    if (names.indexOf(name) === -1) {
                        xhr.setRequestHeader(name, value);
                    }
                });
            } else {
                request.headers.forEach(function (value, name) {
                    xhr.setRequestHeader(name, value);
                });
            }

            if (request.signal) {
                request.signal.addEventListener('abort', abortXhr);

                xhr.onreadystatechange = function () {
                    // DONE (success or failure)
                    if (xhr.readyState === 4) {
                        request.signal.removeEventListener('abort', abortXhr);
                    }
                };
            }

            xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
        });
    }

    fetch$1.polyfill = true;

    if (!g.fetch) {
        g.fetch = fetch$1;
        g.Headers = Headers;
        g.Request = Request;
        g.Response = Response;
    }

    const fetch = typeof window !== 'undefined' && 'fetch' in window ? window.fetch : fetch$1;

    function isAdyenErrorResponse(data) {
        return data && data.errorCode && data.errorType && data.message && data.status;
    }
    function http(options, data) {
        const { headers = [], errorLevel = 'warn', loadingContext = FALLBACK_CONTEXT$1, method = 'GET', path } = options;
        const request = {
            method,
            mode: 'cors',
            cache: 'default',
            credentials: 'same-origin',
            headers: {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': method === 'POST' ? 'application/json' : 'text/plain',
                ...headers
            },
            redirect: 'follow',
            referrerPolicy: 'no-referrer-when-downgrade',
            ...(data && {
                body: JSON.stringify(data)
            })
        };
        const url = `${loadingContext}${path}`;
        return (
            fetch(url, request)
                .then(async response => {
                    const data = await response.json();
                    if (response.ok) {
                        return data;
                    }
                    if (isAdyenErrorResponse(data)) {
                        handleFetchError(data.message, errorLevel);
                        return;
                    }
                    const errorMessage = options.errorMessage || `Service at ${url} is not available`;
                    handleFetchError(errorMessage, errorLevel);
                    return;
                })
                /**
                 * Catch block handles Network error, CORS error, or exception throw by the `handleFetchError`
                 * inside the `then` block
                 */
                .catch(error => {
                    /**
                     * If error is instance of AdyenCheckoutError, which means that it was already
                     * handled by the `handleFetchError` on the `then` block, then we just throw it.
                     * There is no need to create it again
                     */ if (error instanceof AdyenCheckoutError) {
                        throw error;
                    }
                    const errorMessage = options.errorMessage || `Call to ${url} failed. Error= ${error}`;
                    handleFetchError(errorMessage, errorLevel);
                })
        );
    }
    function handleFetchError(message, level) {
        switch (level) {
            case 'silent': {
                break;
            }
            case 'info':
            case 'warn':
            case 'error': {
                console[level](message);
                break;
            }
            default:
                throw new AdyenCheckoutError('NETWORK_ERROR', message);
        }
    }
    function httpGet(options, data) {
        return http(
            {
                ...options,
                method: 'GET'
            },
            data
        );
    }
    function httpPost(options, data) {
        return http(
            {
                ...options,
                method: 'POST'
            },
            data
        );
    }

    function getDataset(name, loadingContext, locale) {
        const options = {
            loadingContext,
            errorLevel: 'warn',
            errorMessage: `Dataset ${name} is not available`,
            path: locale ? `datasets/${name}/${locale}.json` : `datasets/${name}.json`
        };
        return httpGet(options);
    }

    function StateField(props) {
        const { classNameModifiers, label, onDropdownChange, readOnly, selectedCountry, specifications, value } = props;
        const { i18n, loadingContext } = useCoreContext();
        const [states, setStates] = h([]);
        const [loaded, setLoaded] = h(false);
        const placeholderKey = specifications.getPlaceholderKeyForField('stateOrProvince', selectedCountry);
        y(() => {
            if (!selectedCountry || !specifications.countryHasDataset(selectedCountry)) {
                setStates([]);
                setLoaded(true);
                return;
            }
            getDataset(`states/${selectedCountry}`, loadingContext, i18n.locale)
                .then(response => {
                    const newStates = response && response.length ? response : [];
                    setStates(newStates);
                    setLoaded(true);
                })
                .catch(() => {
                    setStates([]);
                    setLoaded(true);
                });
        }, [selectedCountry]);
        if (!loaded || !states.length) return null;
        return /*#__PURE__*/ y$1(
            Field,
            {
                label: label,
                classNameModifiers: classNameModifiers,
                errorMessage: props.errorMessage,
                isValid: !!value,
                showValidIcon: false,
                name: 'stateOrProvince',
                i18n: i18n
            },
            renderFormField('select', {
                name: 'stateOrProvince',
                onChange: onDropdownChange,
                selected: value,
                placeholder: i18n.get(placeholderKey),
                items: states,
                readonly: readOnly && !!value
            })
        );
    }

    function CountryField(props) {
        const { allowedCountries = [], classNameModifiers = [], errorMessage, onDropdownChange, value } = props;
        const { i18n, loadingContext } = useCoreContext();
        const [countries, setCountries] = h([]);
        const [loaded, setLoaded] = h(false);
        const [readOnly, setReadOnly] = h(props.readOnly);
        y(() => {
            getDataset('countries', loadingContext, i18n.locale)
                .then(response => {
                    const countriesFilter = country => allowedCountries.includes(country.id);
                    const newCountries = allowedCountries.length ? response.filter(countriesFilter) : response;
                    setCountries(newCountries || []);
                    setReadOnly(newCountries.length === 1 || readOnly);
                    setLoaded(true);
                })
                .catch(error => {
                    console.error(error);
                    setCountries([]);
                    setLoaded(true);
                });
        }, []);
        if (!loaded) return null;
        return /*#__PURE__*/ y$1(
            Field,
            {
                name: 'country',
                label: i18n.get('country'),
                errorMessage: errorMessage,
                classNameModifiers: classNameModifiers,
                isValid: !!value,
                showValidIcon: false,
                i18n: i18n
            },
            renderFormField('select', {
                onChange: onDropdownChange,
                name: 'country',
                placeholder: i18n.get('select.country'),
                selected: value,
                items: countries,
                readonly: readOnly && !!value
            })
        );
    }

    function getErrorMessage(errors, fieldName, i18n) {
        if (typeof errors[fieldName]?.errorMessage === 'object') {
            const { translationKey, translationObject } = errors[fieldName].errorMessage;
            return i18n.get(translationKey, translationObject);
        }
        return i18n.get(errors[fieldName]?.errorMessage) || !!errors[fieldName];
    }
    /**
     * USAGE: Specifically defined as a util to provide a wrapper for fields created within the Address component
     *
     * NOT TO BE USED: if you just want to add a Country or State dropdown outside of an Address component
     * - then you should implement <CountryField> or <StateField> directly
     */ function FieldContainer(props) {
        const { i18n } = useCoreContext();
        const { classNameModifiers = [], data, errors, valid, fieldName, onInput, onBlur, trimOnBlur, maxlength, disabled } = props;
        const value = data[fieldName];
        const selectedCountry = data.country;
        const isOptional = props.specifications.countryHasOptionalField(selectedCountry, fieldName);
        const labelKey = props.specifications.getKeyForField(fieldName, selectedCountry);
        const optionalLabel = isOptional ? ` ${i18n.get('field.title.optional')}` : '';
        const label = `${i18n.get(labelKey)}${optionalLabel}`;
        const errorMessage = getErrorMessage(errors, fieldName, i18n);
        switch (fieldName) {
            case 'country':
                return /*#__PURE__*/ y$1(CountryField, {
                    allowedCountries: props.allowedCountries,
                    classNameModifiers: classNameModifiers,
                    label: label,
                    errorMessage: errorMessage,
                    onDropdownChange: props.onDropdownChange,
                    value: value
                });
            case 'stateOrProvince':
                return /*#__PURE__*/ y$1(StateField, {
                    classNameModifiers: classNameModifiers,
                    label: label,
                    errorMessage: errorMessage,
                    onDropdownChange: props.onDropdownChange,
                    selectedCountry: selectedCountry,
                    specifications: props.specifications,
                    value: value
                });
            default:
                return /*#__PURE__*/ y$1(
                    Field,
                    {
                        label: label,
                        classNameModifiers: classNameModifiers,
                        errorMessage: errorMessage,
                        isValid: valid[fieldName],
                        name: fieldName,
                        i18n: i18n
                    },
                    renderFormField('text', {
                        classNameModifiers,
                        name: fieldName,
                        value,
                        onInput,
                        onBlur,
                        maxlength,
                        trimOnBlur,
                        disabled,
                        required: isOptional ? false : true
                    })
                );
        }
    }

    const DEFAULT_DEBOUNCE_TIME_MS = 300;
    /**
     * Used by the SRPanel sorting function to tell it whether we need to prepend the field type to the SR panel message, and, if so, we retrieve the correct translation for the field type.
     * (Whether we need to prepend the field type depends on whether we know that the error message correctly reflects the label of the field. Ultimately all error messages should do this
     * and this mapping fn will become redundant)
     */ const mapFieldKey$2 = (key, i18n, countrySpecificLabels) => {
        if (ADDRESS_SCHEMA.includes(key)) {
            return countrySpecificLabels?.[key] ? i18n.get(countrySpecificLabels?.[key]) : i18n.get(key);
        }
        return null;
    };
    const debounce = (fn, ms = DEFAULT_DEBOUNCE_TIME_MS) => {
        let timeoutId;
        return function (...args) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => fn.apply(this, args), ms);
        };
    };

    function AddressSearch({ onAddressLookup, onSelect, onManualAddress, externalErrorMessage, hideManualButton }) {
        const [formattedData, setFormattedData] = h([]);
        const [originalData, setOriginalData] = h([]);
        const [errorMessage, setErrorMessage] = h('');
        const { i18n } = useCoreContext();
        const mapDataToSelect = data =>
            data.map(({ id, name }) => ({
                id,
                name
            }));
        const onInput = T(
            async event => {
                new Promise((resolve, reject) => {
                    onAddressLookup(event, {
                        resolve,
                        reject
                    });
                })
                    .then(data => {
                        setOriginalData(data);
                        setFormattedData(mapDataToSelect(data));
                        setErrorMessage('');
                    })
                    .catch(reason => {
                        setErrorMessage(reason);
                        console.error('error', reason);
                    });
            },
            [onAddressLookup]
        );
        // update error message when there's a new one
        p(() => {
            setErrorMessage(externalErrorMessage);
        }, [externalErrorMessage]);
        const onChange = event => {
            if (!event.target.value) {
                setErrorMessage(i18n.get('address.errors.incomplete'));
                return;
            }
            const value = originalData.find(item => item.id === event.target.value);
            onSelect(value);
            setFormattedData([]);
        };
        const debounceInputHandler = F(() => debounce(onInput), []);
        return /*#__PURE__*/ y$1(
            _$1,
            null,
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__address-search adyen-checkout__field-group'
                },
                /*#__PURE__*/ y$1(
                    Field,
                    {
                        label: i18n.get('address'),
                        classNameModifiers: ['address-search'],
                        errorMessage: errorMessage
                    },
                    renderFormField('select', {
                        name: 'address-search',
                        className: 'adyen-checkout__address-search__dropdown',
                        //placeholder: i18n.get('address.placeholder'),
                        onInput: debounceInputHandler,
                        items: formattedData,
                        onChange: onChange,
                        disableTextFilter: true
                    })
                ),
                !hideManualButton &&
                    /*#__PURE__*/ y$1(
                        'span',
                        {
                            className: 'adyen-checkout__address-search__manual-add'
                        },
                        /*#__PURE__*/ y$1(
                            'button',
                            {
                                type: 'button',
                                className:
                                    'adyen-checkout__button adyen-checkout__button--inline adyen-checkout__button--link adyen-checkout__address-search__manual-add__button',
                                onClick: onManualAddress
                            },
                            i18n.get('address.enterManually')
                        )
                    )
            )
        );
    }

    function Address(props) {
        const { i18n } = useCoreContext();
        const { label = '', requiredFields, visibility, iOSFocusedField = null } = props;
        /** An object by which to expose 'public' members to the parent UIElement */ const addressRef = _({});
        // Just call once
        if (!Object.keys(addressRef.current).length) {
            props.setComponentRef?.(addressRef.current);
        }
        const specifications = F(() => new Specifications(props.specifications), [props.specifications]);
        const requiredFieldsSchema = specifications.getAddressSchemaForCountryFlat(props.countryCode).filter(field => requiredFields.includes(field));
        const [hasSelectedAddress, setHasSelectedAddress] = h(false);
        const [useManualAddress, setUseManualAddress] = h(false);
        const [searchErrorMessage, setSearchErrorMessage] = h('');
        const showAddressSearch = !!props.onAddressLookup;
        const showAddressFields = props.onAddressLookup ? hasSelectedAddress || useManualAddress : true;
        const { data, errors, valid, isValid, handleChangeFor, triggerValidation, setData } = useForm({
            schema: requiredFieldsSchema,
            defaultData: props.data,
            // Ensure any passed validation rules are merged with the default ones
            rules: {
                ...getAddressValidationRules(specifications),
                ...props.validationRules
            },
            formatters: addressFormatters
        });
        const setSearchData = selectedAddress => {
            const propsKeysToProcess = ADDRESS_SCHEMA;
            propsKeysToProcess.forEach(propKey => {
                // Make sure the data provided by the merchant is always strings
                const providedValue = selectedAddress[propKey];
                if (providedValue === null || providedValue === undefined) return;
                // Cast everything to string
                setData(propKey, String(providedValue));
                triggerValidation();
            });
            setHasSelectedAddress(true);
        };
        const onManualAddress = () => {
            setUseManualAddress(true);
        };
        // Expose method expected by (parent) Address.tsx
        addressRef.current.showValidation = () => {
            triggerValidation();
            if (showAddressSearch && !showAddressFields && !isValid) {
                setSearchErrorMessage(i18n.get('address.errors.incomplete'));
            } else {
                setSearchErrorMessage('');
            }
        };
        /**
         * For iOS: iOSFocusedField is the name of the element calling for other elements to be disabled
         * - so if it is set (meaning we are in iOS *and* an input has been focussed) only enable the field that corresponds to this element
         */ const enabledFields = requiredFieldsSchema.filter(item => {
            return !iOSFocusedField ? true : item === iOSFocusedField;
        });
        /**
         * Effect that:
         * - Resets validation for all fields by triggering handleChangeFor(fieldName, 'input')
         * - Applies validation on postalCode field in case it has any value
         */ p(() => {
            const stateOrProvince = specifications.countryHasDataset(data.country) ? '' : FALLBACK_VALUE;
            const newData = {
                ...data,
                stateOrProvince
            };
            requiredFields.forEach(fieldName => {
                handleChangeFor(fieldName, 'input')(newData[fieldName] ?? '');
            });
            if (newData.postalCode) {
                handleChangeFor('postalCode', 'blur')(data.postalCode);
            }
        }, [data.country]);
        /**
         * Set the value of 'stateOrProvince' during the initial render if
         * property is provided during the creation of the payment method
         */ p(() => {
            const stateFieldIsRequired = requiredFields.includes('stateOrProvince');
            const countryHasStatesDataset = data.country && specifications.countryHasDataset(data.country);
            const addressShouldHaveState = stateFieldIsRequired && countryHasStatesDataset;
            const stateOrProvince = data.stateOrProvince || (addressShouldHaveState ? '' : FALLBACK_VALUE);
            handleChangeFor('stateOrProvince', 'input')(stateOrProvince);
        }, []);
        p(() => {
            const optionalFields = specifications.getOptionalFieldsForCountry(data.country);
            const processedData = ADDRESS_SCHEMA.reduce((acc, cur) => {
                const isOptional = optionalFields.includes(cur);
                const isRequired = requiredFields.includes(cur);
                const newValue = data[cur];
                const initialValue = props.data[cur];
                // recover default data values which are not requiredFields, or prefill with 'N/A'
                const fallbackValue = !isRequired && !newValue && !!initialValue ? initialValue : FALLBACK_VALUE;
                const value = (isOptional && !newValue) || !isRequired ? fallbackValue : newValue;
                if (value?.length) acc[cur] = value;
                return acc;
            }, {});
            props.onChange({
                data: processedData,
                valid,
                errors,
                isValid
            });
        }, [data, valid, errors, isValid]);
        if (visibility === 'hidden') return null;
        if (visibility === 'readOnly')
            return /*#__PURE__*/ y$1(ReadOnlyAddress, {
                data: data,
                label: label
            });
        const getComponent = (fieldName, { classNameModifiers = [] }) => {
            if (!requiredFields.includes(fieldName)) return null;
            return /*#__PURE__*/ y$1(FieldContainer, {
                key: fieldName,
                allowedCountries: props.allowedCountries,
                classNameModifiers: [...classNameModifiers, fieldName],
                data: data,
                errors: errors,
                valid: valid,
                fieldName: fieldName,
                onInput: handleChangeFor(fieldName, 'input'),
                onBlur: handleChangeFor(fieldName, 'blur'),
                onDropdownChange: handleChangeFor(fieldName, 'blur'),
                specifications: specifications,
                maxlength: getMaxLengthByFieldAndCountry(countrySpecificFormatters, fieldName, data.country, true),
                trimOnBlur: true,
                disabled: !enabledFields.includes(fieldName)
            });
        };
        const getWrapper = group =>
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__field-group'
                },
                group.map(([field, size]) =>
                    getComponent(field, {
                        classNameModifiers: [`col-${size}`]
                    })
                )
            );
        const addressSchema = specifications.getAddressSchemaForCountry(data.country);
        return /*#__PURE__*/ y$1(
            _$1,
            null,
            /*#__PURE__*/ y$1(
                Fieldset,
                {
                    classNameModifiers: [label || 'address'],
                    label: label
                },
                showAddressSearch &&
                    /*#__PURE__*/ y$1(AddressSearch, {
                        onAddressLookup: props.onAddressLookup,
                        onSelect: setSearchData,
                        onManualAddress: onManualAddress,
                        externalErrorMessage: searchErrorMessage,
                        hideManualButton: showAddressFields
                    }),
                showAddressFields &&
                    /*#__PURE__*/ y$1(
                        _$1,
                        null,
                        addressSchema.map(field => (field instanceof Array ? getWrapper(field) : getComponent(field, {})))
                    )
            ),
            props.showPayButton &&
                props.payButton({
                    label: i18n.get('continue')
                })
        );
    }
    Address.defaultProps = {
        countryCode: null,
        validationRules: null,
        data: {},
        onChange: () => {},
        visibility: 'editable',
        requiredFields: ADDRESS_SCHEMA,
        specifications: {}
    };

    function CardHolderName({ onBlur, onInput, placeholder, value, required, error = false, isValid, disabled }) {
        const { i18n } = useCoreContext();
        return /*#__PURE__*/ y$1(
            Field,
            {
                label: i18n.get('creditCard.holderName'),
                className: 'adyen-checkout__card__holderName',
                errorMessage: error && i18n.get('creditCard.holderName.invalid'),
                isValid: !!isValid,
                name: 'holderName',
                i18n: i18n
            },
            renderFormField('text', {
                name: 'holderName',
                className: `adyen-checkout__card__holderName__input ${styles$4['adyen-checkout__input']}`,
                placeholder: placeholder || i18n.get('creditCard.holderName.placeholder'),
                autocomplete: 'cc-name',
                value,
                required,
                onBlur,
                onInput,
                disabled
            })
        );
    }

    const CardFieldsWrapper = ({
        // vars created in CardInput:
        // base (shared)
        data,
        valid,
        errors,
        handleChangeFor,
        sfpState,
        setFocusOn,
        cvcPolicy,
        focusedElement,
        hasInstallments,
        handleInstallments,
        showAmountsInInstallments, // Card
        brandsIcons,
        formData,
        formErrors,
        formValid,
        expiryDatePolicy,
        dualBrandSelectElements,
        extensions,
        selectedBrandValue, // KCP
        showKCP, // SSN
        showBrazilianSSN,
        socialSecurityNumber, // Store details
        handleOnStoreDetails, // Address
        billingAddress,
        handleAddress,
        setAddressRef,
        partialAddressSchema,
        onAddressLookup, // For this comp (props passed through from CardInput)
        amount,
        billingAddressRequired,
        billingAddressRequiredFields,
        billingAddressAllowedCountries,
        billingAddressValidationRules = null,
        brandsConfiguration,
        enableStoreDetails,
        hasCVC,
        hasHolderName,
        holderNameRequired,
        installmentOptions,
        placeholders,
        positionHolderNameOnTop, // For CardFields > CardNumber
        showBrandIcon,
        showBrandsUnderCardNumber, //
        iOSFocusedField,
        disclaimerMessage
    }) => {
        const cardHolderField = /*#__PURE__*/ y$1(CardHolderName, {
            required: holderNameRequired,
            placeholder: placeholders.holderName,
            value: formData.holderName,
            error: !!formErrors.holderName && holderNameRequired,
            isValid: !!formValid.holderName,
            onBlur: handleChangeFor('holderName', 'blur'),
            onInput: handleChangeFor('holderName', 'input'),
            disabled: iOSFocusedField && iOSFocusedField !== 'holderName'
        });
        return /*#__PURE__*/ y$1(
            LoadingWrapper,
            {
                status: sfpState.status
            },
            hasHolderName && positionHolderNameOnTop && cardHolderField,
            /*#__PURE__*/ y$1(CardFields, {
                showBrandIcon: showBrandIcon,
                showBrandsUnderCardNumber: showBrandsUnderCardNumber,
                brand: sfpState.brand,
                brandsIcons: brandsIcons,
                brandsConfiguration: brandsConfiguration,
                focusedElement: focusedElement,
                onFocusField: setFocusOn,
                hasCVC: hasCVC,
                cvcPolicy: cvcPolicy,
                expiryDatePolicy: expiryDatePolicy,
                errors: sfpState.errors,
                valid: sfpState.valid,
                dualBrandingElements: dualBrandSelectElements.length > 0 && dualBrandSelectElements,
                dualBrandingChangeHandler: extensions.handleDualBrandSelection,
                dualBrandingSelected: selectedBrandValue
            }),
            hasHolderName && !positionHolderNameOnTop && cardHolderField,
            showKCP &&
                /*#__PURE__*/ y$1(KCPAuthentication, {
                    onFocusField: setFocusOn,
                    focusedElement: focusedElement,
                    encryptedPasswordState: {
                        data: sfpState.encryptedPassword,
                        valid: sfpState.valid ? sfpState.valid.encryptedPassword : false,
                        errors: sfpState.errors ? sfpState.errors.encryptedPassword : false
                    },
                    value: data.taxNumber,
                    error: !!errors.taxNumber,
                    isValid: !!valid.taxNumber,
                    onBlur: handleChangeFor('taxNumber', 'blur'),
                    onInput: handleChangeFor('taxNumber', 'input'),
                    disabled: iOSFocusedField && iOSFocusedField !== 'kcpTaxNumberOrDOB'
                }),
            showBrazilianSSN &&
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__card__socialSecurityNumber'
                    },
                    /*#__PURE__*/ y$1(SocialSecurityNumberBrazil, {
                        onBlur: handleChangeFor('socialSecurityNumber', 'blur'),
                        onInput: handleChangeFor('socialSecurityNumber', 'input'),
                        error: errors?.socialSecurityNumber,
                        valid: valid?.socialSecurityNumber,
                        data: socialSecurityNumber,
                        required: true,
                        disabled: iOSFocusedField && iOSFocusedField !== 'socialSecurityNumber'
                    })
                ),
            enableStoreDetails &&
                /*#__PURE__*/ y$1(StoreDetails, {
                    onChange: handleOnStoreDetails
                }),
            hasInstallments &&
                /*#__PURE__*/ y$1(Installments, {
                    amount: amount,
                    brand: sfpState.brand,
                    installmentOptions: installmentOptions,
                    onChange: handleInstallments,
                    type: showAmountsInInstallments ? 'amount' : 'months'
                }),
            billingAddressRequired &&
                /*#__PURE__*/ y$1(Address, {
                    label: 'billingAddress',
                    data: billingAddress,
                    onChange: handleAddress,
                    allowedCountries: billingAddressAllowedCountries,
                    requiredFields: billingAddressRequiredFields,
                    setComponentRef: setAddressRef,
                    validationRules: billingAddressValidationRules,
                    specifications: partialAddressSchema,
                    iOSFocusedField: iOSFocusedField,
                    onAddressLookup: onAddressLookup
                }),
            disclaimerMessage &&
                /*#__PURE__*/ y$1(DisclaimerMessage, {
                    message: disclaimerMessage.message.replace('%{linkText}', `%#${disclaimerMessage.linkText}%#`),
                    urls: [disclaimerMessage.link]
                })
        );
    };

    /**
     * Helper for CardInput - gets a field name and sets focus on it
     */ const setFocusOnFirstField = (isValidating, sfp, fieldToFocus) => {
        if (isValidating) {
            // If not a cardInput related securedField - find field and set focus on it
            // if (!ALL_RELATED_SECURED_FIELDS.includes(who)) {
            if (!CREDIT_CARD_SF_FIELDS.includes(fieldToFocus)) {
                setFocusOnNonSF(fieldToFocus, sfp);
            } else {
                // Is a securedField - so it has its own focus procedures
                sfp.current.setFocusOn(fieldToFocus);
            }
        }
    };
    const getAddressHandler = (setFormData, setFormValid, setFormErrors) => {
        // Return Handler fn:
        return address => {
            setFormData('billingAddress', address.data);
            setFormValid('billingAddress', address.isValid);
            setFormErrors('billingAddress', address.errors);
        };
    };
    const getFocusHandler = (setFocusedElement, onFocus, onBlur) => {
        // Return Handler fn:
        return e => {
            setFocusedElement(e.currentFocusObject);
            e.focus === true ? onFocus(e) : onBlur(e);
        };
    };
    const getAutoJumpHandler = (isAutoJumping, sfp, layout) => {
        return () => {
            if (!isAutoJumping.current) {
                isAutoJumping.current = true;
                // CardInput can call this more than once in quick succession
                // e.g. if field was in error (error + fieldValid) or other SFs are optional (fieldValid + allValid) etc
                // - so make async to avoid double setFocus call
                Promise.resolve().then(() => {
                    const panIndex = layout.findIndex(elem => elem === ENCRYPTED_CARD_NUMBER);
                    const subsequentFields = layout.slice(panIndex + 1);
                    /**
                     * Investigate subsequent fields to see if they can/should accept focus
                     */ for (const field of subsequentFields) {
                        // Is the next field a credit card related securedField?
                        if (CREDIT_CARD_SF_FIELDS.includes(field)) {
                            const isOptionalOrHidden = sfp.current.sfIsOptionalOrHidden(field);
                            if (!isOptionalOrHidden) {
                                sfp.current.setFocusOn(field);
                                break;
                            }
                        } else {
                            // If it isn't an SF - shift focus to it (we're currently not concerned with whether the field is optional)
                            setFocusOnNonSF(field, sfp);
                            break;
                        }
                    }
                    isAutoJumping.current = false;
                });
            }
        };
    };
    const setFocusOnNonSF = (field, sfp) => {
        let nameVal = field;
        // We have an exception with the kcp taxNumber where the name of the field ('kcpTaxNumberOrDOB') doesn't match
        // the value by which the field is referred to internally ('taxNumber')
        if (nameVal === 'taxNumber') nameVal = 'kcpTaxNumberOrDOB';
        if (nameVal === 'country' || nameVal === 'stateOrProvince') {
            // Set focus on dropdown
            const field = selectOne(sfp.current.rootNode, `.adyen-checkout__field--${nameVal} .adyen-checkout__filter-input`);
            field?.focus();
        } else {
            // Set focus on input
            const field = selectOne(sfp.current.rootNode, `[name="${nameVal}"]`);
            field?.focus();
        }
    };

    // Will be needed once PersonalDetails & Address have ability to administer their own SRPanel
    // export const mockSRContext: ISRPanelContext = {
    //     srPanel: null,
    //     setSRMessagesFromObjects: null,
    //     setSRMessagesFromStrings: null,
    //     clearSRPanel: null,
    //     shouldMoveFocusSR: null
    // };
    const SRPanelContext = F$1({
        srPanel: null,
        setSRMessagesFromObjects: null,
        setSRMessagesFromStrings: null,
        clearSRPanel: null,
        shouldMoveFocusSR: null
    });

    function useSRPanelContext() {
        return q(SRPanelContext);
    }

    // Pass 2 arrays of similar objects - and compare for differences
    function getArrayDifferences(currentArray, previousArray, comparisonKey) {
        let difference;
        const compKey = comparisonKey || 'id';
        // If nothing to compare - take the new item...
        if (currentArray.length === 1 && !previousArray) {
            difference = currentArray;
        }
        // .. else, find the difference: what's in the new array that wasn't in the old array?
        if (currentArray.length > previousArray?.length) {
            difference = currentArray.filter(({ [compKey]: id1 }) => !previousArray.some(({ [compKey]: id2 }) => id2 === id1));
        }
        return difference;
    }

    const CardInput = props => {
        const sfp = _(null);
        const isValidating = _(false);
        const getImage = useImage();
        /** SR stuff */ const { setSRMessagesFromObjects, setSRMessagesFromStrings, clearSRPanel, shouldMoveFocusSR } = useSRPanelContext();
        // Generate a setSRMessages function - implemented as a partial, since the initial set of arguments don't change.
        const setSRMessages = setSRMessagesFromObjects?.({
            fieldTypeMappingFn: mapFieldKey$3
        });
        /** end SR stuff */ const billingAddressRef = _(null);
        const setAddressRef = ref => {
            billingAddressRef.current = ref;
        };
        const cardInputRef = _({});
        // Just call once to create the object by which we expose the members expected by the parent Card comp
        if (!Object.keys(cardInputRef.current).length) {
            props.setComponentRef(cardInputRef.current);
        }
        const hasPanLengthRef = _(0);
        const isAutoJumping = _(false);
        const specifications = F(() => new Specifications(props.specifications), [props.specifications]);
        // Store ref to sfp (useful for 'deep' debugging)
        cardInputRef.current.sfp = sfp;
        /**
         * STATE HOOKS
         */ const [status, setStatus] = h('ready');
        const [errors, setErrors] = h({});
        const [valid, setValid] = h({
            ...(props.holderNameRequired && {
                holderName: false
            })
        });
        const [data, setData] = h({
            ...(props.hasHolderName && {
                holderName: props.data.holderName ?? ''
            })
        });
        const [sortedErrorList, setSortedErrorList] = h(null);
        const [focusedElement, setFocusedElement] = h('');
        const [isSfpValid, setIsSfpValid] = h(false);
        const [expiryDatePolicy, setExpiryDatePolicy] = h(DATE_POLICY_REQUIRED);
        const [cvcPolicy, setCvcPolicy] = h(CVC_POLICY_REQUIRED);
        const [issuingCountryCode, setIssuingCountryCode] = h(null);
        const [dualBrandSelectElements, setDualBrandSelectElements] = h([]);
        const [selectedBrandValue, setSelectedBrandValue] = h('');
        const showBillingAddress = props.billingAddressMode !== AddressModeOptions.none && props.billingAddressRequired;
        const partialAddressSchema = handlePartialAddressMode(props.billingAddressMode);
        // Keeps the value of the country set initially by the merchant, before the Address Component mutates it
        const partialAddressCountry = _(partialAddressSchema && props.data?.billingAddress?.country);
        const [storePaymentMethod, setStorePaymentMethod] = h(false);
        const [billingAddress, setBillingAddress] = h(showBillingAddress ? props.data.billingAddress : null);
        const [showSocialSecurityNumber, setShowSocialSecurityNumber] = h(false);
        const [socialSecurityNumber, setSocialSecurityNumber] = h('');
        const [installments, setInstallments] = h({
            value: null
        });
        // re. Disable arrows for iOS: The name of the element calling for other elements to be disabled
        // - either a securedField type (like 'encryptedCardNumber') when call is coming from SF
        // or else the name of an internal, Adyen-web, element (like 'holderName')
        const [iOSFocusedField, setIOSFocusedField] = h(null);
        /**
         * LOCAL VARS
         */ const {
            handleChangeFor,
            triggerValidation,
            data: formData,
            valid: formValid,
            errors: formErrors,
            setSchema,
            setData: setFormData,
            setValid: setFormValid,
            setErrors: setFormErrors
        } = useForm({
            schema: [],
            defaultData: props.data,
            formatters: cardInputFormatters,
            rules: cardInputValidationRules
        });
        const hasInstallments = !!Object.keys(props.installmentOptions).length && props.fundingSource !== 'debit';
        const showAmountsInInstallments = props.showInstallmentAmounts ?? true;
        const cardCountryCode = issuingCountryCode ?? props.countryCode;
        const isKorea = cardCountryCode === 'kr'; // If issuingCountryCode or the merchant defined countryCode is set to 'kr'
        const showKCP = props.configuration.koreanAuthenticationRequired && isKorea;
        const showBrazilianSSN =
            (showSocialSecurityNumber && props.configuration.socialSecurityNumberMode === 'auto') ||
            props.configuration.socialSecurityNumberMode === 'show';
        /**
         * HANDLERS
         */ // SecuredField-only handler
        const handleFocus = getFocusHandler(setFocusedElement, props.onFocus, props.onBlur);
        const retrieveLayout = () => {
            return getLayout({
                props,
                showKCP,
                showBrazilianSSN,
                ...(props.billingAddressRequired && {
                    countrySpecificSchemas: specifications.getAddressSchemaForCountry(billingAddress?.country),
                    billingAddressRequiredFields: props.billingAddressRequiredFields
                })
            });
        };
        /**
         * re. Disabling arrow keys in iOS:
         * Only by disabling all fields in the Card PM except for the active securedField input can we force the iOS soft keyboard arrow keys to disable
         *
         * NOTE: only called if ua.__IS_IOS = true && this.config.disableIOSArrowKeys = true (as referenced in CSF)
         *
         * @param obj - has fieldType prop saying whether this function is being called in response to an securedFields click ('encryptedCardNumber' etc)
         * - in which case we should disable all non-SF fields
         * or,
         * due to an internal action ('webInternalElement') - in which case we can enable all non-SF fields
         */ const handleTouchstartIOS = T(obj => {
            const elementType = obj.fieldType !== 'webInternalElement' ? obj.fieldType : obj.name;
            setIOSFocusedField(elementType);
        }, []);
        const handleAddress = getAddressHandler(setFormData, setFormValid, setFormErrors);
        const doPanAutoJump = getAutoJumpHandler(isAutoJumping, sfp, retrieveLayout());
        const handleSecuredFieldsChange = (sfState, eventDetails) => {
            /**
             * Handling auto complete value for holderName (but only if the component is using a holderName field)
             */ if (sfState.autoCompleteName) {
                if (!props.hasHolderName) return;
                const holderNameValidationFn = getRuleByNameAndMode('holderName', 'blur');
                const acHolderName = holderNameValidationFn(sfState.autoCompleteName) ? sfState.autoCompleteName : null;
                if (acHolderName) {
                    setFormData('holderName', acHolderName);
                    setFormValid('holderName', true); // only if holderName is valid does this fny get called - so we know it's valid and w/o error
                    setFormErrors('holderName', null);
                }
                return;
            }
            /**
             * If PAN has just become valid: decide if we can shift focus to the next field.
             *
             * We can if the config prop, autoFocus, is true AND we have a panLength value from binLookup AND one of the following scenarios is true:
             *  - If encryptedCardNumber was invalid but now is valid
             *      [scenario: shopper has typed in a number and field is now valid]
             *  - If encryptedCardNumber was valid and still is valid and we're handling an onBrand event (triggered by binLookup which has happened after the handleOnFieldValid event)
             *     [scenario: shopper has pasted in a full, valid, number]
             */ if (
                props.autoFocus &&
                hasPanLengthRef.current > 0 &&
                ((!valid.encryptedCardNumber && sfState.valid?.encryptedCardNumber) ||
                    (valid.encryptedCardNumber && sfState.valid.encryptedCardNumber && eventDetails.event === 'handleOnBrand'))
            ) {
                doPanAutoJump();
            }
            /**
             * Process SFP state
             */ setData({
                ...data,
                ...sfState.data
            });
            setErrors({
                ...errors,
                ...sfState.errors
            });
            setValid({
                ...valid,
                ...sfState.valid
            });
            setIsSfpValid(sfState.isSfpValid);
            // Values relating to /binLookup response
            setCvcPolicy(sfState.cvcPolicy);
            setShowSocialSecurityNumber(sfState.showSocialSecurityNumber);
            setExpiryDatePolicy(sfState.expiryDatePolicy);
        };
        // Farm the handlers for binLookup related functionality out to another 'extensions' file
        const extensions$1 = F(
            () =>
                extensions(
                    props,
                    {
                        sfp
                    },
                    {
                        dualBrandSelectElements,
                        setDualBrandSelectElements,
                        setSelectedBrandValue,
                        issuingCountryCode,
                        setIssuingCountryCode
                    },
                    hasPanLengthRef
                ),
            [dualBrandSelectElements, issuingCountryCode]
        );
        /**
         * EXPOSE METHODS expected by Card.tsx
         */ cardInputRef.current.showValidation = () => {
            // set flag
            isValidating.current = true;
            /**
             * Clear errors prior to validating so that the screenreader will read them *all* again, and in the right order
             * - only using aria-atomic on the error panel will read them in the wrong order
             */ clearSRPanel?.(); // TODO - recheck if this is still true
            // Validate SecuredFields
            sfp.current.showValidation();
            // Validate holderName & SSN & KCP (taxNumber) but *not* billingAddress
            triggerValidation(['holderName', 'socialSecurityNumber', 'taxNumber']);
            // Validate Address
            if (billingAddressRef?.current) billingAddressRef.current.showValidation();
        };
        cardInputRef.current.processBinLookupResponse = (binLookupResponse, isReset) => {
            extensions$1.processBinLookup(binLookupResponse, isReset);
        };
        cardInputRef.current.setStatus = setStatus;
        /**
         * EFFECT HOOKS
         */ p(() => {
            // componentDidMount - expose more methods expected by Card.tsx
            cardInputRef.current.setFocusOn = sfp.current.setFocusOn;
            cardInputRef.current.updateStyles = sfp.current.updateStyles;
            cardInputRef.current.handleUnsupportedCard = sfp.current.handleUnsupportedCard;
            // componentWillUnmount
            return () => {
                sfp.current.destroy();
            };
        }, []);
        /**
         * Handle form schema updates
         */ p(() => {
            const newSchema = [
                ...(props.hasHolderName ? ['holderName'] : []),
                ...(showBrazilianSSN ? ['socialSecurityNumber'] : []),
                ...(showKCP ? ['taxNumber'] : []),
                ...(showBillingAddress ? ['billingAddress'] : [])
            ];
            setSchema(newSchema);
        }, [props.hasHolderName, showBrazilianSSN, showKCP]);
        /**
         * Handle updates from useForm
         */ p(() => {
            setData({
                ...data,
                holderName: formData.holderName ?? '',
                taxNumber: formData.taxNumber
            });
            setSocialSecurityNumber(formData.socialSecurityNumber);
            if (showBillingAddress)
                setBillingAddress({
                    ...formData.billingAddress
                });
            setValid({
                ...valid,
                holderName: props.holderNameRequired ? formValid.holderName : true,
                // Setting value to false if it's falsy keeps in line with existing, expected behaviour
                // - but there is an argument to allow 'undefined' as a value to indicate the non-presence of the field
                socialSecurityNumber: formValid.socialSecurityNumber ? formValid.socialSecurityNumber : false,
                taxNumber: formValid.taxNumber ? formValid.taxNumber : false,
                billingAddress: formValid.billingAddress ? formValid.billingAddress : false
            });
            // Check if billingAddress errors object has any properties that aren't null or undefined
            const addressHasErrors = formErrors.billingAddress
                ? Object.entries(formErrors.billingAddress).reduce((acc, [, error]) => acc || error != null, false)
                : false;
            // Errors
            setErrors({
                ...errors,
                holderName: props.holderNameRequired && !!formErrors.holderName ? formErrors.holderName : null,
                socialSecurityNumber: showBrazilianSSN && !!formErrors.socialSecurityNumber ? formErrors.socialSecurityNumber : null,
                taxNumber: showKCP && !!formErrors.taxNumber ? formErrors.taxNumber : null,
                billingAddress: showBillingAddress && addressHasErrors ? formErrors.billingAddress : null
            });
        }, [formData, formValid, formErrors]);
        // Get the previous value
        const previousSortedErrors = usePrevious(sortedErrorList);
        /**
         * Main 'componentDidUpdate' handler
         */ p(() => {
            const holderNameValid = valid.holderName;
            const sfpValid = isSfpValid;
            const addressValid = showBillingAddress ? valid.billingAddress : true;
            const koreanAuthentication = showKCP ? !!valid.taxNumber && !!valid.encryptedPassword : true;
            const socialSecurityNumberValid = showBrazilianSSN ? !!valid.socialSecurityNumber : true;
            const isValid = sfpValid && holderNameValid && addressValid && koreanAuthentication && socialSecurityNumberValid;
            const sfStateErrorsObj = sfp.current.mapErrorsToValidationRuleResult();
            const mergedErrors = {
                ...errors,
                ...sfStateErrorsObj
            }; // maps sfErrors AND solves race condition problems for sfp from showValidation
            // Extract and then flatten billingAddress errors into a new object with *all* the field errors at top level
            const { billingAddress: extractedAddressErrors, ...errorsWithoutAddress } = mergedErrors;
            const errorsForPanel = {
                ...errorsWithoutAddress,
                ...extractedAddressErrors
            };
            // Pass dynamic props (errors, layout etc) to SRPanel via partial
            const srPanelResp = setSRMessages?.({
                errors: errorsForPanel,
                isValidating: isValidating.current,
                layout: retrieveLayout(),
                // If we don't have country specific address labels, we might have a label related to a partialAddressSchema (i.e. zipCode)
                countrySpecificLabels: specifications.getAddressLabelsForCountry(billingAddress?.country) ?? partialAddressSchema?.default?.labels
            });
            /**
             * Need extra actions after setting SRPanel messages in order to focus field (if required) and because we have some errors that are fired onBlur
             */ const currentErrorsSortedByLayout = srPanelResp?.currentErrorsSortedByLayout;
            // Store the array of sorted error objects separately so that we can use it to make comparisons between the old and new arrays
            setSortedErrorList(currentErrorsSortedByLayout);
            switch (srPanelResp?.action) {
                // A call to focus the first field in error will always follow the call to validate the whole form
                case ERROR_ACTION_FOCUS_FIELD:
                    if (shouldMoveFocusSR) setFocusOnFirstField(isValidating.current, sfp, srPanelResp?.fieldToFocus);
                    // Remove 'showValidation' mode - allowing time for collation of all the fields in error whilst it is 'showValidation' mode (some errors come in a second render pass)
                    setTimeout(() => {
                        isValidating.current = false;
                    }, 300);
                    break;
                /** On blur scenario: not validating, i.e. trying to submit form, but there might be an error, either to set or to clear */ case ERROR_ACTION_BLUR_SCENARIO: {
                    const difference = getArrayDifferences(currentErrorsSortedByLayout, previousSortedErrors, 'field');
                    const latestErrorMsg = difference?.[0];
                    if (latestErrorMsg) {
                        // Use the error code to look up whether error is actually a blur based one (most are but some SF ones aren't)
                        const isBlurBasedError = lookupBlurBasedErrors(latestErrorMsg.errorCode);
                        // Only add blur based errors to the error panel - doing this step prevents the non-blur based errors from being read out twice
                        // (once from the aria-live, error panel & once from the aria-describedby element)
                        const latestSRError = isBlurBasedError ? latestErrorMsg.errorMessage : null;
                        // console.log('### CardInput2::componentDidUpdate:: #2 (not validating) single error:: latestSRError', latestSRError);
                        setSRMessagesFromStrings(latestSRError);
                    } else {
                        // called when previousSortedErrors.length >= currentErrorsSortedByLayout.length
                        // console.log('### CardInput2::componentDidUpdate:: #3(not validating) clearing errors:: NO latestErrorMsg');
                        clearSRPanel();
                    }
                    break;
                }
            }
            props.onChange({
                data,
                valid,
                errors: mergedErrors,
                isValid,
                billingAddress,
                selectedBrandValue,
                storePaymentMethod,
                socialSecurityNumber,
                installments
            });
        }, [data, valid, errors, selectedBrandValue, storePaymentMethod, installments]);
        /**
         * RENDER
         */ const FieldToRender = props.storedPaymentMethodId ? StoredCardFieldsWrapper : CardFieldsWrapper;
        return /*#__PURE__*/ y$1(
            _$1,
            null,
            /*#__PURE__*/ y$1(SecuredFieldsProvider, {
                ref: sfp,
                ...extractPropsForSFP$2(props),
                styles: {
                    ...defaultStyles$1,
                    ...props.styles
                },
                koreanAuthenticationRequired: props.configuration.koreanAuthenticationRequired,
                hasKoreanFields: !!(props.configuration.koreanAuthenticationRequired && props.countryCode === 'kr'),
                onChange: handleSecuredFieldsChange,
                onBrand: props.onBrand,
                onFocus: handleFocus,
                type: props.brand,
                disableIOSArrowKeys: props.disableIOSArrowKeys ? handleTouchstartIOS : null,
                render: ({ setRootNode, setFocusOn }, sfpState) =>
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            ref: setRootNode,
                            className: classNames({
                                'adyen-checkout__card-input': true,
                                [styles$4['card-input__wrapper']]: true,
                                [`adyen-checkout__card-input--${props.fundingSource ?? 'credit'}`]: true,
                                'adyen-checkout__card-input--loading': status === 'loading'
                            }),
                            role: 'form'
                        },
                        /*#__PURE__*/ y$1(FieldToRender, {
                            ...extractPropsForCardFields(props),
                            // Pass on vars created in CardInput:
                            // Base (shared w. StoredCard)
                            data: data,
                            valid: valid,
                            errors: errors,
                            handleChangeFor: handleChangeFor,
                            focusedElement: focusedElement,
                            setFocusOn: setFocusOn,
                            sfpState: sfpState,
                            cvcPolicy: cvcPolicy,
                            hasInstallments: hasInstallments,
                            showAmountsInInstallments: showAmountsInInstallments,
                            handleInstallments: setInstallments,
                            // For Card
                            brandsIcons: props.brandsIcons,
                            formData: formData,
                            formErrors: formErrors,
                            formValid: formValid,
                            expiryDatePolicy: expiryDatePolicy,
                            dualBrandSelectElements: dualBrandSelectElements,
                            extensions: extensions$1,
                            selectedBrandValue: selectedBrandValue,
                            // For KCP
                            showKCP: showKCP,
                            // For SSN
                            showBrazilianSSN: showBrazilianSSN,
                            socialSecurityNumber: socialSecurityNumber,
                            // For Store details
                            handleOnStoreDetails: setStorePaymentMethod,
                            // For Address
                            setAddressRef: setAddressRef,
                            billingAddress: billingAddress,
                            billingAddressValidationRules: partialAddressSchema && getPartialAddressValidationRules(partialAddressCountry.current),
                            partialAddressSchema: partialAddressSchema,
                            handleAddress: handleAddress,
                            onAddressLookup: props.onAddressLookup,
                            //
                            iOSFocusedField: iOSFocusedField
                        })
                    )
            }),
            props.showPayButton &&
                props.payButton({
                    status,
                    variant: props.isPayButtonPrimaryVariant ? 'primary' : 'secondary',
                    icon: getImage({
                        imageFolder: 'components/'
                    })('lock')
                })
        );
    };
    CardInput.defaultProps = defaultProps$7;

    /**
     * CoreProvider Component
     * Wraps a component delaying the render until after the i18n module is fully loaded
     */ class CoreProvider extends k$1 {
        state = {
            loaded: false
        };
        componentDidMount() {
            if (this.props.i18n) {
                this.props.i18n.loaded.then(() => {
                    this.setState({
                        loaded: true
                    });
                });
            } else {
                this.setState({
                    loaded: true
                });
            }
            if (!this.props.i18n || !this.props.loadingContext || !this.props.resources) {
                console.error('CoreProvider - WARNING core provider is missing one of the following: i18n, loadingContext or resources');
            }
        }
        render({ children }) {
            if (this.state.loaded) {
                return /*#__PURE__*/ y$1(
                    CoreContext.Provider,
                    {
                        value: {
                            i18n: this.props.i18n,
                            loadingContext: this.props.loadingContext,
                            commonProps: this.props.commonProps || {},
                            resources: this.props.resources
                        }
                    },
                    P(children)
                );
            }
            return null;
        }
    }

    /**
     * Collects available frontend browser info and store it in the properties dictated by the EMVCo spec
     * (3DS_Spec_protocolAndCoreFny_v2-1_Oct2017.pdf)
     *
     * @example
     * ```js
     * const browserInfo = collectBrowserInfo();
     * ```
     *
     * @returns An object containing the retrieved browser properties
     */ function collectBrowserInfo() {
        const colorDepth = getProp(window, 'screen.colorDepth') || '';
        const javaEnabled = getProp(window, 'navigator.javaEnabled') ? window.navigator.javaEnabled() : false;
        const screenHeight = getProp(window, 'screen.height') || ''; // TODO: Shall we set this to null instead?
        const screenWidth = getProp(window, 'screen.width') || ''; // TODO: Shall we set this to null instead?
        const userAgent = getProp(window, 'navigator.userAgent') || '';
        // IE <+ 10 supports navigator.browserLanguage instead of navigator.language
        const language = getProp(window, 'navigator.language') || getProp(window, 'navigator.browserLanguage') || 'en';
        const d = new Date();
        const timeZoneOffset = d.getTimezoneOffset();
        return {
            acceptHeader: '*/*',
            colorDepth,
            language,
            javaEnabled,
            screenHeight,
            screenWidth,
            userAgent,
            timeZoneOffset
        };
    }

    var triggerBinLookUp = parent => {
        let currentRequestId = null;
        return callbackObj => {
            // Allow way for merchant to disallow binLookup by specifically setting the prop to false
            if (parent.props.doBinLookup === false) {
                if (parent.props.onBinValue) parent.props.onBinValue(callbackObj);
                return;
            }
            // Do binLookup when encryptedBin property is present (and only if the merchant is using a clientKey)
            if (callbackObj.encryptedBin && parent.props.clientKey) {
                // Store id of request we're about to make
                currentRequestId = callbackObj.uuid;
                httpPost(
                    {
                        loadingContext: parent.props.loadingContext,
                        path: `v3/bin/binLookup?token=${parent.props.clientKey}`
                    },
                    {
                        type: parent.props.type,
                        supportedBrands: parent.props.brands || DEFAULT_CARD_GROUP_TYPES,
                        encryptedBin: callbackObj.encryptedBin,
                        requestId: callbackObj.uuid // Pass id of request
                    }
                ).then(data => {
                    // If response is the one we were waiting for...
                    if (data?.requestId === currentRequestId) {
                        if (data.brands?.length) {
                            const mappedResponse = data.brands.reduce(
                                (acc, item) => {
                                    // All brand strings end up in the detectedBrands array
                                    acc.detectedBrands.push(item.brand);
                                    // Also add the paymentMethodVariants (more granular description of the txvariant)
                                    acc.paymentMethodVariants.push(item.paymentMethodVariant);
                                    // Add supported brand objects to the supportedBrands array
                                    if (item.supported === true) {
                                        acc.supportedBrands.push(item);
                                        return acc;
                                    }
                                    return acc;
                                },
                                {
                                    supportedBrands: [],
                                    detectedBrands: [],
                                    paymentMethodVariants: []
                                }
                            );
                            /**
                             * supportedBrands = merchant supports this brand(s); we have detected the card number to be of this brand(s); carry on!
                             */ if (mappedResponse.supportedBrands.length) {
                                // ...call processBinLookupResponse with, a simplified, response object if it contains at least one supported brand
                                parent.processBinLookupResponse({
                                    issuingCountryCode: data.issuingCountryCode,
                                    supportedBrands: mappedResponse.supportedBrands,
                                    ...(data.showSocialSecurityNumber
                                        ? {
                                              showSocialSecurityNumber: data.showSocialSecurityNumber
                                          }
                                        : {})
                                });
                                // Inform merchant of the result
                                parent.onBinLookup({
                                    type: callbackObj.type,
                                    detectedBrands: mappedResponse.detectedBrands,
                                    // supportedBrands contains the subset of this.props.brands that matches the card number that the shopper has typed
                                    supportedBrands: mappedResponse.supportedBrands.map(item => item.brand),
                                    paymentMethodVariants: mappedResponse.paymentMethodVariants,
                                    supportedBrandsRaw: mappedResponse.supportedBrands,
                                    brands: parent.props.brands || DEFAULT_CARD_GROUP_TYPES,
                                    issuingCountryCode: data.issuingCountryCode
                                });
                                return;
                            }
                            /**
                             * detectedBrands = no brands the merchant supports were found; what we did detect the shopper to be entering was this brand;
                             * error!
                             */ if (mappedResponse.detectedBrands.length) {
                                const errObj = {
                                    type: 'card',
                                    fieldType: 'encryptedCardNumber',
                                    error: getError(ERROR_MSG_UNSUPPORTED_CARD_ENTERED),
                                    detectedBrands: mappedResponse.detectedBrands
                                };
                                parent.handleUnsupportedCard(errObj);
                                // Inform merchant of the result
                                parent.onBinLookup({
                                    type: callbackObj.type,
                                    detectedBrands: mappedResponse.detectedBrands,
                                    supportedBrands: null,
                                    paymentMethodVariants: mappedResponse.paymentMethodVariants,
                                    brands: parent.props.brands || DEFAULT_CARD_GROUP_TYPES
                                });
                                return;
                            }
                        } else {
                            /**
                             *  BIN not in DB (a failed lookup will just contain a requestId)
                             */ parent.onBinLookup({
                                type: callbackObj.type,
                                detectedBrands: null,
                                supportedBrands: null,
                                paymentMethodVariants: null,
                                brands: parent.props.brands || DEFAULT_CARD_GROUP_TYPES
                            });
                            // Reset the UI and let the native, regex branding happen (for the generic card)
                            // For a single-branded card we need to pass a boolean to prompt resetting the brand logo to the 'base' type
                            parent.processBinLookupResponse({}, true);
                        }
                    } else {
                        if (!data?.requestId) {
                            // Some other kind of error on the backend
                            parent.props.onError(
                                data || {
                                    errorType: 'binLookup',
                                    message: 'unknownError'
                                }
                            );
                        }
                        // Else - response with wrong requestId
                    }
                });
            } else if (currentRequestId) {
                /**
                 * If onBinValue callback is called AND we have been doing binLookup BUT passed object doesn't have an encryptedBin property
                 * - then THE NUMBER OF DIGITS IN NUMBER FIELD HAS DROPPED BELOW THRESHOLD for BIN lookup - so reset the UI
                 */ parent.processBinLookupResponse(null, true);
                currentRequestId = null; // Ignore any pending responses
                // Reset any errors
                const errObj = {
                    type: 'card',
                    fieldType: 'encryptedCardNumber',
                    error: ''
                };
                parent.handleUnsupportedCard(errObj);
                // CustomCard needs this to reset the UI
                parent.onBinLookup({
                    isReset: true
                });
            }
            if (parent.props.onBinValue) parent.props.onBinValue(callbackObj);
        };
    };

    const VISA_SDK_TEST = 'https://sandbox-assets.secure.checkout.visa.com/checkout-widget/resources/js/src-i-adapter/visa-sdk.js?v2';
    const VISA_SDK_PROD = 'https://assets.secure.checkout.visa.com/checkout-widget/resources/js/src-i-adapter/visa-sdk.js?v2';
    const MC_SDK_TEST = 'https://sandbox.src.mastercard.com/sdk/srcsdk.mastercard.js';
    const MC_SDK_PROD = 'https://src.mastercard.com/sdk/srcsdk.mastercard.js';
    const getVisaSetttings = ({ dpaLocale = 'en_US', dpaPresentationName = '' }) => ({
        dpaTransactionOptions: {
            dpaLocale: dpaLocale,
            payloadTypeIndicator: 'NON_PAYMENT',
            customInputData: {
                checkoutOrchestrator: 'merchant'
            }
        },
        dpaData: {
            dpaPresentationName
        }
    });
    const getMastercardSettings = ({ dpaLocale = 'en_US', dpaPresentationName = '' }) => ({
        dpaTransactionOptions: {
            dpaLocale: dpaLocale,
            paymentOptions: {
                dynamicDataType: 'CARD_APPLICATION_CRYPTOGRAM_SHORT_FORM'
            },
            consumerNameRequested: true,
            customInputData: {
                'com.mastercard.dcfExperience': 'PAYMENT_SETTINGS'
            },
            confirmPayment: false
        },
        dpaData: {
            dpaPresentationName
        }
    });

    class SrciError extends Error {
        reason;
        message;
        source;
        scheme;
        constructor(schemeError, source, scheme) {
            super();
            const message = 'error' in schemeError ? schemeError?.error?.message : schemeError?.message;
            const reason = 'error' in schemeError ? schemeError?.error?.reason : schemeError?.reason;
            this.message = message;
            this.reason = reason;
            this.source = source;
            this.scheme = scheme;
        }
        toString() {
            return `Reason: ${this.reason} / Source: ${this.source} / Scheme: ${this.scheme} / Message: ${this.message}`;
        }
    }

    /**
     * Creates a script element from a certain source in the passed node selector.
     * If no selector is passed it will add the script element in the body.
     *
     * @example
     * ```
     * const script = new Script('https://example.com/script.js', '.container');
     * script.load().then(doSomething);
     *
     * // To clean up just call the remove method
     * script.remove();
     * ```
     */ class Script {
        src;
        node;
        attributes;
        dataAttributes;
        isScriptLoadCalled = false;
        script;
        constructor(src, node = 'body', attributes = {}, dataAttributes = {}) {
            this.src = src;
            this.node = node;
            this.attributes = attributes;
            this.dataAttributes = dataAttributes;
        }
        load = () => {
            if (this.isScriptLoadCalled) {
                return;
            }
            return new Promise((resolve, reject) => {
                const handleOnLoad = () => {
                    this.script.setAttribute('data-script-loaded', 'true');
                    resolve();
                };
                const handleOnError = () => {
                    this.remove();
                    reject(new Error(`Unable to load script ${this.src}`));
                };
                this.isScriptLoadCalled = true;
                const scriptContainer = document.querySelector(this.node);
                this.script = scriptContainer.querySelector(`script[src="${this.src}"]`);
                // Script element exists in the browser and is already loaded
                if (this.script && this.script.getAttribute('data-script-loaded')) {
                    resolve();
                    return;
                } else if (this.script) {
                    // Script element exists in the browser, but it is not loaded yet
                    // Use-case:  Multiple PayPal standalone components being loaded in different parts of the screen.
                    this.script.addEventListener('load', handleOnLoad);
                    this.script.addEventListener('error', handleOnError);
                    return;
                }
                // Script element doesn't exist in the browser, so we create it and append to the DOM tree
                this.script = document.createElement('script');
                Object.assign(this.script, this.attributes);
                Object.assign(this.script.dataset, this.dataAttributes);
                this.script.src = this.src;
                this.script.async = true;
                this.script.addEventListener('load', handleOnLoad);
                this.script.addEventListener('error', handleOnError);
                scriptContainer.appendChild(this.script);
            });
        };
        remove = () => {
            return this.script.parentNode && this.script.parentNode.removeChild(this.script);
        };
    }

    class AbstractSrcInitiator {
        schemeSdk;
        customSdkConfiguration;
        sdkUrl;
        scriptElement = null;
        constructor(sdkUrl, customSdkConfiguration) {
            if (!sdkUrl) throw Error('AbstractSrcInitiator: Invalid SDK URL');
            this.sdkUrl = sdkUrl;
            this.customSdkConfiguration = customSdkConfiguration;
        }
        async loadSdkScript() {
            if (!this.isSdkIsAvailableOnWindow()) {
                this.scriptElement = new Script(this.sdkUrl);
                await this.scriptElement.load();
            }
            this.assignSdkReference();
        }
        removeSdkScript() {
            this.scriptElement.remove();
        }
        /**
         * This method performs checkout using the specified card. If successful, the
         * response contains summary checkout information.
         */ async checkout(params) {
            try {
                const checkoutResponse = await this.schemeSdk.checkout(params);
                return checkoutResponse;
            } catch (error) {
                const srciError = new SrciError(error, 'checkout', this.schemeName);
                throw srciError;
            }
        }
        /**
         * This method disassociates the Consumer application / Consumer Device from the Consumer’s SRC Profile.
         */ async unbindAppInstance() {
            try {
                await this.schemeSdk.unbindAppInstance();
            } catch (error) {
                const srciError = new SrciError(error, 'unbindAppInstance', this.schemeName);
                throw srciError;
            }
        }
        /**
         * Determines whether the consumer is recognized, e.g. by detecting the presence of a local cookie in
         * the browser environment.
         */ async isRecognized() {
            try {
                const isRecognizedResponse = await this.schemeSdk.isRecognized();
                return isRecognizedResponse;
            } catch (error) {
                const srciError = new SrciError(error, 'isRecognized', this.schemeName);
                throw srciError;
            }
        }
        /**
         * Sends a validation code to the specified consumer.
         * This method sends a one-time password (OTP) to the consumer to start validation
         */ async initiateIdentityValidation() {
            try {
                const identityValidationResponse = await this.schemeSdk.initiateIdentityValidation();
                return identityValidationResponse;
            } catch (error) {
                const srciError = new SrciError(error, 'initiateIdentityValidation', this.schemeName);
                throw srciError;
            }
        }
        /**
         * Obtains the masked card and other account profile data associated with the userId.
         */ async getSrcProfile(idTokens) {
            try {
                const getSrcProfileResponse = await this.schemeSdk.getSrcProfile({
                    idTokens
                });
                return getSrcProfileResponse;
            } catch (error) {
                const srciError = new SrciError(error, 'getSrcProfile', this.schemeName);
                throw srciError;
            }
        }
    }

    const IdentityTypeMap$1 = {
        email: 'EMAIL',
        telephoneNumber: 'MOBILE_NUMBER'
    };
    class VisaSdk extends AbstractSrcInitiator {
        schemeName = 'visa';
        constructor(environment, customSdkConfig) {
            super(environment.toLowerCase().includes('live') ? VISA_SDK_PROD : VISA_SDK_TEST, customSdkConfig);
        }
        isSdkIsAvailableOnWindow() {
            // @ts-ignore vAdapters is created by the VISA sdk
            if (window.vAdapters?.VisaSRCI) return true;
            return false;
        }
        assignSdkReference() {
            // @ts-ignore vAdapters is created by the VISA sdk
            this.schemeSdk = new window.vAdapters.VisaSRCI();
        }
        async init(params, srciTransactionId) {
            const sdkProps = {
                ...params,
                ...getVisaSetttings(this.customSdkConfiguration),
                srciTransactionId
            };
            await this.schemeSdk.init(sdkProps);
        }
        async identityLookup({ identityValue, type }) {
            try {
                const consumerIdentity = {
                    identityValue,
                    type: IdentityTypeMap$1[type]
                };
                const response = await this.schemeSdk.identityLookup(consumerIdentity);
                return response;
            } catch (err) {
                const srciError = new SrciError(err, 'identityLookup', this.schemeName);
                throw srciError;
            }
        }
        async completeIdentityValidation(otp) {
            try {
                const response = await this.schemeSdk.completeIdentityValidation(otp);
                return response;
            } catch (err) {
                const srciError = new SrciError(err, 'completeIdentityValidation', this.schemeName);
                throw srciError;
            }
        }
    }

    const IdentityTypeMap = {
        email: 'EMAIL_ADDRESS',
        telephoneNumber: 'MOBILE_PHONE_NUMBER'
    };
    class MastercardSdk extends AbstractSrcInitiator {
        schemeName = 'mc';
        constructor(environment, customSdkConfig) {
            super(environment.toLowerCase().includes('live') ? MC_SDK_PROD : MC_SDK_TEST, customSdkConfig);
        }
        isSdkIsAvailableOnWindow() {
            // @ts-ignore SRCSDK_MASTERCARD is created by the MC sdk
            if (window.SRCSDK_MASTERCARD) return true;
            return false;
        }
        assignSdkReference() {
            // @ts-ignore SRCSDK_MASTERCARD is created by the MC sdk
            this.schemeSdk = window.SRCSDK_MASTERCARD;
        }
        async init(params, srciTransactionId) {
            const sdkProps = {
                ...params,
                ...getMastercardSettings(this.customSdkConfiguration),
                srciTransactionId
            };
            await this.schemeSdk.init(sdkProps);
        }
        async identityLookup({ identityValue, type }) {
            try {
                const consumerIdentity = {
                    identityValue,
                    identityType: IdentityTypeMap[type]
                };
                const response = await this.schemeSdk.identityLookup({
                    consumerIdentity
                });
                return response;
            } catch (err) {
                const srciError = new SrciError(err, 'identityLookup', this.schemeName);
                throw srciError;
            }
        }
        async completeIdentityValidation(otp) {
            try {
                const response = await this.schemeSdk.completeIdentityValidation({
                    validationData: otp
                });
                return response;
            } catch (err) {
                const srciError = new SrciError(err, 'completeIdentityValidation', this.schemeName);
                throw srciError;
            }
        }
    }

    /**
     * Type guard used on Promise.allSettled to define is Promise is fulfilled
     */ const isFulfilled = p => p.status === 'fulfilled';
    /**
     * Type guard used on Promise.allSettled to define is Promise is rejected
     */ const isRejected = p => p.status === 'rejected';

    const sdkMap = {
        visa: VisaSdk,
        mc: MastercardSdk,
        default: null
    };
    const getSchemeSdk = (scheme, environment, customConfig) => {
        const SchemeSdkClass = sdkMap[scheme] || sdkMap.default;
        return SchemeSdkClass ? new SchemeSdkClass(environment, customConfig) : null;
    };
    class SrcSdkLoader {
        schemes;
        customSdkConfiguration;
        constructor(schemes, { dpaLocale = 'en_US', dpaPresentationName = '' }) {
            this.schemes = schemes;
            this.customSdkConfiguration = {
                dpaLocale,
                dpaPresentationName
            };
        }
        async load(environment) {
            if (!this.schemes) {
                throw new AdyenCheckoutError('ERROR', 'ClickToPay -> SrcSdkLoader: There are no schemes set to be loaded');
            }
            return new Promise((resolve, reject) => {
                const sdks = this.schemes.map(scheme => getSchemeSdk(scheme, environment, this.customSdkConfiguration));
                const loadScriptPromises = sdks.map(sdk => sdk.loadSdkScript());
                Promise.allSettled(loadScriptPromises).then(loadScriptResponses => {
                    if (loadScriptResponses.every(isRejected)) {
                        reject(
                            new AdyenCheckoutError('ERROR', `ClickToPay -> SrcSdkLoader # Unable to load network schemes: ${this.schemes.toString()}`)
                        );
                    }
                    const sdksLoaded = sdks.filter((sdk, index) => isFulfilled(loadScriptResponses[index]));
                    resolve(sdksLoaded);
                });
            });
        }
    }

    const SchemeNames = {
        mc: 'Mastercard',
        visa: 'Visa'
    };

    class ShopperCard {
        dateOfCardLastUsed;
        panLastFour;
        srcDigitalCardId;
        scheme;
        artUri;
        srcCorrelationId;
        tokenId;
        isExpired;
        panExpirationMonth;
        panExpirationYear;
        descriptorName;
        status = null;
        constructor(maskedCard, scheme, srcCorrelationId) {
            this.dateOfCardLastUsed = maskedCard.dateOfCardLastUsed;
            this.panLastFour = maskedCard.panLastFour;
            this.srcDigitalCardId = maskedCard.srcDigitalCardId;
            this.descriptorName = maskedCard.digitalCardData.descriptorName;
            this.tokenId = maskedCard.tokenId;
            this.scheme = scheme;
            this.artUri = maskedCard.digitalCardData.artUri;
            this.srcCorrelationId = srcCorrelationId;
            this.panExpirationMonth = maskedCard.panExpirationMonth;
            this.panExpirationYear = maskedCard.panExpirationYear;
            this.status = maskedCard.digitalCardData.status;
            this.isExpired = this.confirmCardIsExpired();
        }
        get title() {
            return this.scheme === 'visa' ? SchemeNames[this.scheme] : this.descriptorName || SchemeNames[this.scheme];
        }
        get isDcfPopupEmbedded() {
            return this.scheme === 'mc';
        }
        confirmCardIsExpired() {
            if (this.status !== 'ACTIVE') return true;
            if (!this.panExpirationYear && !this.panExpirationMonth) return false;
            const [currentMonth, currentYear] = [new Date().getMonth() + 1, new Date().getFullYear()];
            if (Number(this.panExpirationYear) > currentYear) return false;
            if (Number(this.panExpirationYear) === currentYear && Number(this.panExpirationMonth) >= currentMonth) return false;
            return true;
        }
    }

    const CTP_IFRAME_NAME = 'ctpIframe';
    /**
     * Creates the payload for the /payments call
     */ function createCheckoutPayloadBasedOnScheme(card, srciCheckoutResponse, environment) {
        const { scheme, tokenId, srcDigitalCardId, srcCorrelationId } = card;
        switch (scheme) {
            case 'visa':
                /**
                 * For test environment, we are using hardcoded tokenId
                 */ return tokenId
                    ? {
                          srcScheme: scheme,
                          srcCorrelationId,
                          srcTokenReference: environment.toLowerCase().includes('live') ? tokenId : '987654321'
                      }
                    : {
                          srcScheme: scheme,
                          srcCheckoutPayload: srciCheckoutResponse.checkoutResponse,
                          srcCorrelationId
                      };
            case 'mc':
            default:
                return {
                    srcScheme: scheme,
                    srcDigitalCardId,
                    srcCorrelationId
                };
        }
    }
    function createShopperMaskedCardsData(memo, srcProfile) {
        const { profiles, srcCorrelationId } = srcProfile;
        const cards = profiles.reduce((memo, profile) => {
            const profileCards = profile.maskedCards.map(maskedCard => new ShopperCard(maskedCard, srcProfile.scheme, srcCorrelationId));
            return [...memo, ...profileCards];
        }, []);
        return [...memo, ...cards];
    }
    function sortCardByLastTimeUsed(card1, card2) {
        return new Date(card2.dateOfCardLastUsed).getTime() - new Date(card1.dateOfCardLastUsed).getTime();
    }
    function splitAvailableAndExpiredCards(memo, card) {
        if (card.isExpired) memo.expiredCards.push(card);
        else memo.availableCards.push(card);
        return memo;
    }
    /**
     * Creates the Shopper card list. The available cards are placed before the expired cards
     */ function createShopperCardsList(srcProfiles) {
        const { availableCards, expiredCards } = srcProfiles.reduce(createShopperMaskedCardsData, []).reduce(splitAvailableAndExpiredCards, {
            availableCards: [],
            expiredCards: []
        });
        return [...availableCards.sort(sortCardByLastTimeUsed), ...expiredCards.sort(sortCardByLastTimeUsed)];
    }

    var CtpState;
    (function (CtpState) {
        CtpState['Idle'] = 'Idle';
        CtpState['Loading'] = 'Loading';
        CtpState['ShopperIdentified'] = 'ShopperIdentified';
        CtpState['OneTimePassword'] = 'OneTimePassword';
        CtpState['Ready'] = 'Ready';
        CtpState['Login'] = 'Login';
        CtpState['NotAvailable'] = 'NotAvailable';
    })(CtpState || (CtpState = {}));
    class ClickToPayService {
        sdkLoader;
        schemesConfig;
        shopperIdentity;
        environment;
        /**
         * Mandatory unique ID passed to all the networks (Click to Pay systems), used to track user journey
         */ srciTransactionId = uuidv4();
        sdks;
        validationSchemeSdk = null;
        stateSubscriber;
        state = CtpState.Idle;
        shopperCards = null;
        identityValidationData = null;
        constructor(schemesConfig, sdkLoader, environment, shopperIdentity) {
            this.sdkLoader = sdkLoader;
            this.schemesConfig = schemesConfig;
            this.shopperIdentity = shopperIdentity;
            this.environment = environment;
        }
        get shopperAccountFound() {
            return [CtpState.Ready, CtpState.ShopperIdentified].includes(this.state);
        }
        get schemes() {
            return this.sdkLoader.schemes;
        }
        async initialize() {
            this.setState(CtpState.Loading);
            try {
                this.sdks = await this.sdkLoader.load(this.environment);
                await this.initiateSdks();
                const { recognized = false, idTokens = null } = await this.verifyIfShopperIsRecognized();
                if (recognized) {
                    await this.getShopperProfile(idTokens);
                    this.setState(CtpState.Ready);
                    return;
                }
                if (!this.shopperIdentity) {
                    this.setState(CtpState.NotAvailable);
                    return;
                }
                const { isEnrolled } = await this.verifyIfShopperIsEnrolled(this.shopperIdentity);
                if (isEnrolled) {
                    this.setState(CtpState.ShopperIdentified);
                    return;
                }
                this.setState(CtpState.NotAvailable);
            } catch (error) {
                if (error instanceof SrciError) console.warn(`Error at ClickToPayService # init: ${error.toString()}`);
                else console.warn(error);
                this.setState(CtpState.NotAvailable);
            }
        }
        /**
         * Set the callback for notifying when the CtPState changes
         */ subscribeOnStateChange(callback) {
            this.stateSubscriber = callback;
        }
        /**
         * Initiates Consumer Identity validation with one Click to Pay System.
         * The Click to Pay System sends a one-time-password (OTP) to the registered email address or mobile number.
         **/ async startIdentityValidation() {
            if (!this.validationSchemeSdk) {
                throw Error('startIdentityValidation: No ValidationSDK set for the validation process');
            }
            const { maskedValidationChannel } = await this.validationSchemeSdk.initiateIdentityValidation();
            this.identityValidationData = {
                maskedShopperContact: maskedValidationChannel.replace(/\*/g, '•'),
                selectedNetwork: SchemeNames[this.validationSchemeSdk.schemeName]
            };
            this.setState(CtpState.OneTimePassword);
        }
        /**
         * Completes the  validation of the Shopper by evaluating the supplied OTP.
         */ async finishIdentityValidation(otpCode) {
            if (!this.validationSchemeSdk) {
                throw Error('finishIdentityValidation: No ValidationSDK set for the validation process');
            }
            const validationToken = await this.validationSchemeSdk.completeIdentityValidation(otpCode);
            await this.getShopperProfile([validationToken.idToken]);
            this.setState(CtpState.Ready);
            this.validationSchemeSdk = null;
        }
        /**
         * This method performs checkout using the selected card
         */ async checkout(card) {
            if (!card) {
                throw Error('ClickToPayService # checkout: Missing card data');
            }
            const checkoutSdk = this.sdks.find(sdk => sdk.schemeName === card.scheme);
            const checkoutResponse = await checkoutSdk.checkout({
                srcDigitalCardId: card.srcDigitalCardId,
                srcCorrelationId: card.srcCorrelationId,
                ...(card.isDcfPopupEmbedded && {
                    windowRef: window.frames[CTP_IFRAME_NAME]
                })
            });
            if (checkoutResponse.dcfActionCode !== 'COMPLETE') {
                throw new AdyenCheckoutError(
                    'ERROR',
                    `Checkout through Scheme DCF did not complete. DCF Action code received: ${checkoutResponse.dcfActionCode}`
                );
            }
            return createCheckoutPayloadBasedOnScheme(card, checkoutResponse, this.environment);
        }
        /**
         * Call the 'unbindAppInstance()' method of each SRC SDK in order to remove the shopper cookies.
         * Besides, it deletes all information stored about the shopper.
         */ async logout() {
            if (!this.sdks) {
                throw new AdyenCheckoutError('ERROR', 'ClickToPayService is not initialized');
            }
            try {
                const logoutPromises = this.sdks.map(sdk => sdk.unbindAppInstance());
                await Promise.all(logoutPromises);
            } catch (error) {
                if (error instanceof SrciError) console.warn(`Error at ClickToPayService # logout: ${error.toString()}`);
                else console.warn(error);
            }
            this.shopperCards = null;
            this.identityValidationData = null;
            this.validationSchemeSdk = null;
            this.setState(CtpState.Login);
        }
        /**
         * Call the 'identityLookup()' method of each SRC SDK in order to verify if the shopper has an account.
         *
         * Based on the responses from the Click to Pay Systems, we should do the validation process using the SDK that
         * that responds faster with 'consumerPresent=true'
         */ async verifyIfShopperIsEnrolled(shopperIdentity) {
            const { shopperEmail } = shopperIdentity;
            return new Promise((resolve, reject) => {
                const lookupPromises = this.sdks.map(sdk => {
                    const identityLookupPromise = sdk.identityLookup({
                        identityValue: shopperEmail,
                        type: 'email'
                    });
                    identityLookupPromise
                        .then(response => {
                            if (response.consumerPresent && !this.validationSchemeSdk) {
                                this.setSdkForPerformingShopperIdentityValidation(sdk);
                                resolve({
                                    isEnrolled: true
                                });
                            }
                        })
                        .catch(error => {
                            reject(error);
                        });
                    return identityLookupPromise;
                });
                Promise.allSettled(lookupPromises).then(() => {
                    resolve({
                        isEnrolled: false
                    });
                });
            });
        }
        setState(state) {
            this.state = state;
            this.stateSubscriber?.(this.state);
        }
        setSdkForPerformingShopperIdentityValidation(sdk) {
            this.validationSchemeSdk = sdk;
        }
        /**
         * Based on the given 'idToken', this method goes through each SRCi SDK and fetches the shopper
         * profile with his cards.
         */ async getShopperProfile(idTokens) {
            return new Promise((resolve, reject) => {
                const srcProfilesPromises = this.sdks.map(sdk => sdk.getSrcProfile(idTokens));
                Promise.allSettled(srcProfilesPromises).then(srcProfilesResponses => {
                    if (srcProfilesResponses.every(isRejected)) {
                        reject(srcProfilesResponses[0].reason);
                    }
                    const createProfileWithScheme = (promiseResult, index) =>
                        isFulfilled(promiseResult) && {
                            ...promiseResult.value,
                            scheme: this.sdks[index].schemeName
                        };
                    const profilesWithScheme = srcProfilesResponses.map(createProfileWithScheme).filter(profile => !!profile);
                    this.shopperCards = createShopperCardsList(profilesWithScheme);
                    resolve();
                });
            });
        }
        /**
         * Calls the 'isRecognized()' method of each SRC SDK in order to verify if the shopper is
         * recognized on the device. The shopper is recognized if he/she has the Cookies stored
         * on their browser
         */ async verifyIfShopperIsRecognized() {
            return new Promise((resolve, reject) => {
                const promises = this.sdks.map(sdk => {
                    const isRecognizedPromise = sdk.isRecognized();
                    isRecognizedPromise.then(response => response.recognized && resolve(response)).catch(error => reject(error));
                    return isRecognizedPromise;
                });
                Promise.allSettled(promises).then(() =>
                    resolve({
                        recognized: false
                    })
                );
            });
        }
        async initiateSdks() {
            const initPromises = this.sdks.map(sdk => {
                const cfg = this.schemesConfig[sdk.schemeName];
                return sdk.init(cfg, this.srciTransactionId);
            });
            await Promise.all(initPromises);
        }
    }

    /**
     * Creates the Click to Pay service in case the required configuration is provided
     */ function createClickToPayService(configuration, clickToPayConfiguration, environment) {
        const schemesConfig = createSchemesInitConfiguration(configuration);
        if (!schemesConfig) {
            return null;
        }
        const shopperIdentity = createShopperIdentityObject(clickToPayConfiguration?.shopperEmail, clickToPayConfiguration?.telephoneNumber);
        const schemeNames = Object.keys(schemesConfig);
        const srcSdkLoader = new SrcSdkLoader(schemeNames, {
            dpaLocale: clickToPayConfiguration?.locale,
            dpaPresentationName: clickToPayConfiguration?.merchantDisplayName
        });
        return new ClickToPayService(schemesConfig, srcSdkLoader, environment, shopperIdentity);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const createShopperIdentityObject = (shopperEmail, telephoneNumber) => {
        const identityLookup = {
            ...(shopperEmail && {
                shopperEmail
            })
        };
        return Object.keys(identityLookup).length > 0 ? identityLookup : null;
    };
    /**
     * Parses 'configuration' object that comes from the Card payment method config, and try to create the Click to Pay
     * initialization object in case the values are provided.
     */ const createSchemesInitConfiguration = configuration => {
        if (!configuration) {
            return null;
        }
        const { visaSrciDpaId, visaSrcInitiatorId, mcDpaId, mcSrcClientId } = configuration;
        const schemesConfig = {
            ...(mcDpaId &&
                mcSrcClientId && {
                    mc: {
                        srciDpaId: mcDpaId,
                        srcInitiatorId: mcSrcClientId
                    }
                }),
            ...(visaSrciDpaId &&
                visaSrcInitiatorId && {
                    visa: {
                        srciDpaId: visaSrciDpaId,
                        srcInitiatorId: visaSrcInitiatorId
                    }
                })
        };
        return Object.keys(schemesConfig).length === 0 ? null : schemesConfig;
    };

    const ClickToPayContext = F$1({
        status: null,
        onSubmit: null,
        onSetStatus: null,
        onError: null,
        onReady: null,
        amount: null,
        configuration: null,
        isStandaloneComponent: null,
        isCtpPrimaryPaymentMethod: null,
        setIsCtpPrimaryPaymentMethod: null,
        logoutShopper: null,
        ctpState: null,
        cards: [],
        schemes: [],
        otpMaskedContact: null,
        otpNetwork: null,
        checkout: null,
        verifyIfShopperIsEnrolled: null,
        startIdentityValidation: null,
        finishIdentityValidation: null
    });

    const ClickToPayProvider = ({
        isStandaloneComponent = false,
        clickToPayService,
        amount,
        configuration,
        children,
        setClickToPayRef,
        onSubmit,
        onSetStatus,
        onError
    }) => {
        const [ctpService] = h(clickToPayService);
        const [ctpState, setCtpState] = h(clickToPayService?.state || CtpState.NotAvailable);
        const [isCtpPrimaryPaymentMethod, setIsCtpPrimaryPaymentMethod] = h(true);
        const [status, setStatus] = h('ready');
        const clickToPayRef = _({});
        const isOnReadyInvoked = _(false);
        p(() => {
            setClickToPayRef(clickToPayRef.current);
            clickToPayRef.current.setStatus = setStatus;
        }, []);
        p(() => {
            ctpService?.subscribeOnStateChange(status => setCtpState(status));
        }, [ctpService]);
        const onReady = T(() => {
            if (isOnReadyInvoked.current) {
                return;
            }
            configuration.onReady?.();
            isOnReadyInvoked.current = true;
        }, [configuration.onReady]);
        const finishIdentityValidation = T(
            async otpValue => {
                await ctpService?.finishIdentityValidation(otpValue);
            },
            [ctpService]
        );
        const startIdentityValidation = T(async () => {
            const data = await ctpService?.startIdentityValidation();
            return data;
        }, [ctpService]);
        const checkout = T(
            async card => {
                return await ctpService?.checkout(card);
            },
            [ctpService]
        );
        const verifyIfShopperIsEnrolled = T(
            async shopperIdentity => {
                return await ctpService?.verifyIfShopperIsEnrolled(shopperIdentity);
            },
            [ctpService]
        );
        const logoutShopper = T(async () => {
            await ctpService?.logout();
        }, [ctpService]);
        return /*#__PURE__*/ y$1(
            ClickToPayContext.Provider,
            {
                value: {
                    status,
                    onSubmit,
                    onError,
                    onSetStatus,
                    amount,
                    configuration,
                    isStandaloneComponent,
                    isCtpPrimaryPaymentMethod,
                    setIsCtpPrimaryPaymentMethod,
                    ctpState,
                    verifyIfShopperIsEnrolled,
                    cards: ctpService?.shopperCards,
                    schemes: ctpService?.schemes,
                    otpMaskedContact: ctpService?.identityValidationData?.maskedShopperContact,
                    otpNetwork: ctpService?.identityValidationData?.selectedNetwork,
                    checkout,
                    logoutShopper,
                    startIdentityValidation,
                    finishIdentityValidation,
                    onReady
                }
            },
            children
        );
    };

    function useClickToPayContext() {
        return q(ClickToPayContext);
    }

    const otpValidationRules = {
        otp: {
            validate: value => !!value && value.length > 0,
            errorMessage: '',
            modes: ['blur']
        },
        default: {
            validate: value => !!value && value.length > 0,
            errorMessage: '',
            modes: ['blur']
        }
    };

    const CONFIRMATION_SHOWING_TIME = 2000;
    const CtPResendOtpLink = ({ onError, onResendCode, disabled }) => {
        const [counter, setCounter] = h(null);
        const [showConfirmation, setShowConfirmation] = h(false);
        const { i18n } = useCoreContext();
        const { startIdentityValidation } = useClickToPayContext();
        p(() => {
            let timeout = null;
            if (counter > 0) {
                timeout = setTimeout(() => setCounter(counter - 1), 1000);
            }
            return () => clearTimeout(timeout);
        }, [counter]);
        p(() => {
            let timeout = null;
            if (showConfirmation) {
                timeout = setTimeout(() => {
                    setShowConfirmation(false);
                    setCounter(60);
                }, CONFIRMATION_SHOWING_TIME);
            }
            return () => clearTimeout(timeout);
        }, [showConfirmation]);
        const handleResendCodeClick = T(
            async event => {
                event.preventDefault();
                try {
                    onResendCode();
                    setShowConfirmation(true);
                    await startIdentityValidation();
                } catch (error) {
                    onError(error.reason);
                    setCounter(0);
                    setShowConfirmation(false);
                }
            },
            [startIdentityValidation, onError, onResendCode]
        );
        if (showConfirmation) {
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout-ctp__otp-resend-code--confirmation'
                },
                i18n.get('ctp.otp.codeResent'),
                /*#__PURE__*/ y$1(Icon, {
                    type: 'checkmark',
                    height: 14,
                    width: 14
                })
            );
        }
        if (counter > 0) {
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout-ctp__otp-resend-code--disabled'
                },
                i18n.get('ctp.otp.resendCode'),
                ' -',
                ' ',
                /*#__PURE__*/ y$1(
                    'span',
                    {
                        className: 'adyen-checkout-ctp__otp-resend-code-counter'
                    },
                    ' ',
                    counter > 0 && `${counter}s`,
                    ' '
                )
            );
        }
        return /*#__PURE__*/ y$1(
            'div',
            {
                role: 'link',
                tabIndex: 0,
                className: classNames('adyen-checkout-ctp__otp-resend-code', {
                    'adyen-checkout-ctp__otp-resend-code--disabled': disabled
                }),
                onClick: handleResendCodeClick
            },
            i18n.get('ctp.otp.resendCode')
        );
    };

    const CtPOneTimePasswordInput = props => {
        const { i18n } = useCoreContext();
        const {
            configuration: { disableOtpAutoFocus }
        } = useClickToPayContext();
        const formSchema = ['otp'];
        const [resendOtpError, setResendOtpError] = h(null);
        const { handleChangeFor, data, triggerValidation, valid, errors, isValid, setData } = useForm({
            schema: formSchema,
            rules: otpValidationRules
        });
        const otpInputHandlersRef = _({
            validateInput: null
        });
        const [inputRef, setInputRef] = h(null);
        const [isOtpFielDirty, setIsOtpFieldDirty] = h(false);
        const validateInput = T(() => {
            setIsOtpFieldDirty(true);
            triggerValidation();
        }, [triggerValidation]);
        /**
         * If shopper changes the value of the OTP fields, input becomes dirty
         */ p(() => {
            if (data.otp) setIsOtpFieldDirty(true);
        }, [data.otp]);
        p(() => {
            if (!disableOtpAutoFocus && inputRef) {
                inputRef.focus();
            }
        }, [inputRef, disableOtpAutoFocus]);
        p(() => {
            otpInputHandlersRef.current.validateInput = validateInput;
            props.onSetInputHandlers(otpInputHandlersRef.current);
        }, [validateInput, props.onSetInputHandlers]);
        const handleOnResendOtp = T(() => {
            setData('otp', '');
            setResendOtpError(null);
            if (!disableOtpAutoFocus) {
                inputRef.focus();
            }
            props.onResendCode();
        }, [props.onResendCode, inputRef, disableOtpAutoFocus]);
        const handleOnResendOtpError = T(
            errorCode => {
                const message = i18n.get(`ctp.errors.${errorCode}`);
                if (message) setResendOtpError(message);
            },
            [i18n]
        );
        const handleOnKeyUp = T(
            event => {
                if (event.key === 'Enter') {
                    props.onPressEnter();
                }
            },
            [props.onPressEnter]
        );
        const handleOnKeyPress = T(event => {
            // Prevent <form> submission if Component is placed inside an form
            if (event.key === 'Enter') event.preventDefault();
        }, []);
        p(() => {
            props.onChange({
                data,
                valid,
                errors,
                isValid
            });
        }, [data, valid, errors]);
        return /*#__PURE__*/ y$1(
            Field,
            {
                name: 'oneTimePassword',
                label: i18n.get('ctp.otp.fieldLabel'),
                labelEndAdornment:
                    !props.hideResendOtpButton &&
                    /*#__PURE__*/ y$1(CtPResendOtpLink, {
                        disabled: props.isValidatingOtp,
                        onError: handleOnResendOtpError,
                        onResendCode: handleOnResendOtp
                    }),
                errorMessage: isOtpFielDirty ? resendOtpError || props.errorMessage || !!errors.otp : null,
                classNameModifiers: ['otp']
            },
            renderFormField('text', {
                name: 'otp',
                autocorrect: 'off',
                spellcheck: false,
                value: data.otp,
                disabled: props.disabled,
                onInput: handleChangeFor('otp', 'input'),
                onBlur: handleChangeFor('otp', 'blur'),
                onKeyUp: handleOnKeyUp,
                onKeyPress: handleOnKeyPress,
                onCreateRef: setInputRef
            })
        );
    };

    const CtPBrand = ({ classNameModifiers = [] }) => {
        const getImage = useImage();
        const { schemes } = useClickToPayContext();
        const ctpImageUrl = getImage({})('ctp');
        const pipeImageUrl = getImage({
            imageFolder: 'components/'
        })('pipe');
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: classNames(
                    'adyen_checkout-ctp__brand-wrapper',
                    classNameModifiers.map(m => `adyen_checkout-ctp__brand-wrapper--${m}`)
                )
            },
            /*#__PURE__*/ y$1(Img, {
                className: 'adyen_checkout-ctp__brand-logo',
                src: ctpImageUrl,
                alt: 'Logo of Click to Pay'
            }),
            /*#__PURE__*/ y$1(Img, {
                className: 'adyen_checkout-ctp__brand-pipe',
                src: pipeImageUrl,
                alt: ''
            }),
            schemes.map(brand =>
                /*#__PURE__*/ y$1(Img, {
                    key: brand,
                    className: classNames('adyen_checkout-ctp__brand-scheme', `adyen_checkout-ctp__brand-scheme-${brand}`),
                    src: getImage({})(brand),
                    alt: `Logo of ${SchemeNames[brand]}`
                })
            )
        );
    };

    const KEYCODE_TAB = 9;
    const FOCUSABLE_ELEMENTS =
        'a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type="text"]:not([disabled]), input[type="radio"]:not([disabled]), input[type="checkbox"]:not([disabled]), select:not([disabled])';
    /**
     * Hook used to trap the focus within the specific element and its child nodes.
     */ const useTrapFocus = ({ rootElement, focusFirst, shouldTrap = true }) => {
        const [firstFocusableEl, setFirstFocusableEl] = h(focusFirst);
        p(() => {
            if (!shouldTrap) return;
            firstFocusableEl?.focus();
        }, [firstFocusableEl, shouldTrap]);
        p(() => {
            if (!shouldTrap) return;
            const focusableEl = rootElement.querySelectorAll(FOCUSABLE_ELEMENTS);
            const firstFocusableEl = focusableEl[0];
            const lastFocusableEl = focusableEl[focusableEl.length - 1];
            setFirstFocusableEl(focusFirst || firstFocusableEl);
            const trapFocus = event => {
                const isTabPressed = event.key === 'Tab' || event.keyCode === KEYCODE_TAB;
                if (!isTabPressed) return;
                if (event.shiftKey && document.activeElement === firstFocusableEl) {
                    lastFocusableEl.focus();
                    event.preventDefault();
                    return;
                }
                if (document.activeElement === lastFocusableEl) {
                    firstFocusableEl.focus();
                    event.preventDefault();
                    return;
                }
            };
            rootElement.addEventListener('keydown', trapFocus);
            return () => {
                setFirstFocusableEl(null);
                rootElement.removeEventListener('keydown', trapFocus);
            };
        }, [rootElement, focusFirst, shouldTrap]);
    };

    const KEYCODE_ESC = 27;
    const useModal = ({ modalElement, isOpen, isDismissible, focusFirst, focusAfterClose, onClose }) => {
        useTrapFocus({
            rootElement: modalElement,
            shouldTrap: isOpen,
            focusFirst
        });
        const closeModal = T(() => {
            focusAfterClose.focus();
            onClose();
        }, [onClose, focusAfterClose]);
        const handleClickOutside = T(
            event => {
                if (isDismissible && event.target instanceof HTMLElement && !modalElement.contains(event.target)) {
                    closeModal();
                }
            },
            [closeModal, isDismissible, modalElement]
        );
        p(() => {
            if (!isOpen || !modalElement) return;
            const closeOnPressingEscape = event => {
                const isEscapePressed = event.key === 'Escape' || event.key === 'Esc' || event.keyCode === KEYCODE_ESC;
                if (isEscapePressed) {
                    closeModal();
                }
            };
            modalElement.addEventListener('keydown', closeOnPressingEscape);
            return () => modalElement.removeEventListener('keydown', closeOnPressingEscape);
        }, [isOpen, modalElement, closeModal]);
        return {
            closeModal,
            handleClickOutside
        };
    };

    const Modal = ({
        children,
        classNameModifiers = [],
        isOpen,
        onClose,
        isDismissible = true,
        labelledBy,
        describedBy,
        focusFirst,
        focusAfterClose,
        ...props
    }) => {
        const modalContainerRef = _();
        const { closeModal, handleClickOutside } = useModal({
            modalElement: modalContainerRef.current,
            isOpen,
            isDismissible,
            focusFirst,
            focusAfterClose,
            onClose
        });
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: classNames(
                    'adyen-checkout__modal-wrapper',
                    classNameModifiers.map(m => `adyen-checkout__modal-wrapper--${m}`),
                    {
                        'adyen-checkout__modal-wrapper--open': isOpen
                    }
                ),
                role: 'dialog',
                'aria-labelledby': labelledBy,
                'aria-describedby': describedBy,
                'aria-modal': 'true',
                'aria-hidden': !isOpen,
                onClick: handleClickOutside,
                ...props
            },
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__modal',
                    ref: modalContainerRef
                },
                children({
                    onCloseModal: closeModal
                })
            )
        );
    };

    let idGenerator = Date.now();
    function getUniqueId() {
        idGenerator += 1;
        return `adyen-${idGenerator}`;
    }
    const CtPInfoModal = ({ isOpen, onClose, focusAfterClose }) => {
        const focusFirstElement = _();
        const { i18n } = useCoreContext();
        const getImage = useImage();
        const labelledBy = getUniqueId();
        const describedBy = getUniqueId();
        return /*#__PURE__*/ y$1(
            Modal,
            {
                onClose: onClose,
                isOpen: isOpen,
                classNameModifiers: ['ctp'],
                labelledBy: labelledBy,
                describedBy: describedBy,
                focusFirst: focusFirstElement.current,
                focusAfterClose: focusAfterClose
            },
            ({ onCloseModal }) =>
                /*#__PURE__*/ y$1(
                    _$1,
                    null,
                    /*#__PURE__*/ y$1(Img, {
                        className: 'adyen-checkout__ctp-modal-header-image',
                        src: getImage({
                            imageFolder: 'components/'
                        })('ctp_landscape'),
                        alt: ''
                    }),
                    /*#__PURE__*/ y$1(
                        'h1',
                        {
                            id: labelledBy,
                            className: 'adyen-checkout__ctp-modal-title'
                        },
                        i18n.get('ctp.infoPopup.title')
                    ),
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            id: describedBy
                        },
                        /*#__PURE__*/ y$1(
                            'p',
                            {
                                tabIndex: -1,
                                ref: focusFirstElement,
                                className: 'adyen-checkout__ctp-modal-text'
                            },
                            i18n.get('ctp.infoPopup.subtitle')
                        ),
                        /*#__PURE__*/ y$1(
                            'ul',
                            {
                                className: 'adyen-checkout__ctp-modal-text adyen-checkout__ctp-modal-benefits',
                                type: 'disc'
                            },
                            /*#__PURE__*/ y$1('li', null, i18n.get('ctp.infoPopup.benefit1')),
                            /*#__PURE__*/ y$1('li', null, i18n.get('ctp.infoPopup.benefit2')),
                            /*#__PURE__*/ y$1('li', null, i18n.get('ctp.infoPopup.benefit3'))
                        ),
                        /*#__PURE__*/ y$1(CtPBrand, {
                            classNameModifiers: ['popup']
                        })
                    ),
                    /*#__PURE__*/ y$1(Button, {
                        onClick: onCloseModal,
                        label: i18n.get('close')
                    })
                )
        );
    };

    const CtPInfo = () => {
        const [isInfoModalOpen, setIsInfoModalOpen] = h(false);
        const buttonRef = _();
        const { i18n } = useCoreContext();
        const getImage = useImage();
        const url = getImage({
            imageFolder: 'components/'
        })('info');
        const handleOnClose = T(() => {
            setIsInfoModalOpen(false);
        }, []);
        const handleOnIconClick = T(() => {
            setIsInfoModalOpen(true);
        }, []);
        return /*#__PURE__*/ y$1(
            _$1,
            null,
            /*#__PURE__*/ y$1(
                'button',
                {
                    ref: buttonRef,
                    onClick: handleOnIconClick,
                    className: 'adyen-web__ctp-info-button',
                    'aria-label': i18n.get('ctp.aria.infoModalButton'),
                    type: 'button'
                },
                /*#__PURE__*/ y$1(Img, {
                    height: '15',
                    src: url,
                    ariaHidden: true
                })
            ),
            /*#__PURE__*/ y$1(CtPInfoModal, {
                isOpen: isInfoModalOpen,
                onClose: handleOnClose,
                focusAfterClose: buttonRef.current
            })
        );
    };

    const CtPLogoutLink = () => {
        const { ctpState, logoutShopper, status, cards } = useClickToPayContext();
        const { i18n } = useCoreContext();
        if ([CtpState.Ready, CtpState.OneTimePassword].includes(ctpState) === false) {
            return null;
        }
        const label = F(() => {
            if (ctpState === CtpState.Ready && cards.length > 1) return i18n.get('ctp.logout.notYourCards');
            if (ctpState === CtpState.Ready && cards.length === 1) return i18n.get('ctp.logout.notYourCard');
            if (ctpState === CtpState.Ready && cards.length === 0) return i18n.get('ctp.logout.notYourProfile');
            return i18n.get('ctp.logout.notYou');
        }, [i18n, ctpState]);
        return /*#__PURE__*/ y$1(
            'span',
            {
                role: 'button',
                tabIndex: 0,
                className: classNames('adyen-checkout-ctp__section-logout-button', {
                    'adyen-checkout-ctp__section-logout-button--disabled': status === 'loading'
                }),
                onClick: logoutShopper
            },
            label
        );
    };

    const CtPSection = ({ children }) => {
        const { isStandaloneComponent } = useClickToPayContext();
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: classNames('adyen-checkout-ctp__section', {
                    'adyen-checkout-ctp__section--standalone': isStandaloneComponent
                })
            },
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout-ctp__section-brand'
                },
                /*#__PURE__*/ y$1(CtPBrand, null),
                /*#__PURE__*/ y$1(CtPLogoutLink, null)
            ),
            children
        );
    };
    const Title = ({ endAdornment, children }) =>
        /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout-ctp__section-header'
            },
            /*#__PURE__*/ y$1(
                'h1',
                {
                    className: 'adyen-checkout-ctp__section-header-title'
                },
                children
            ),
            endAdornment &&
                /*#__PURE__*/ y$1(
                    'span',
                    {
                        className: 'adyen-checkout-ctp__section-header-adornment'
                    },
                    endAdornment
                )
        );
    const Text = ({ children }) =>
        /*#__PURE__*/ y$1(
            'p',
            {
                className: 'adyen-checkout-ctp__section-text'
            },
            children
        );
    CtPSection.Title = Title;
    CtPSection.Text = Text;

    const CtPOneTimePassword = ({ onDisplayCardComponent }) => {
        const { i18n } = useCoreContext();
        const { finishIdentityValidation, otpMaskedContact, otpNetwork, isCtpPrimaryPaymentMethod } = useClickToPayContext();
        const [otp, setOtp] = h(null);
        const [isValid, setIsValid] = h(false);
        const [isValidatingOtp, setIsValidatingOtp] = h(false);
        const [errorCode, setErrorCode] = h(null);
        const [otpInputHandlers, setOtpInputHandlers] = h(null);
        const [isAccountLocked, setIsAccountLocked] = h(false);
        const onSetOtpInputHandlers = T(handlers => {
            setOtpInputHandlers(handlers);
        }, []);
        const onChangeOtpInput = T(({ data, isValid }) => {
            setOtp(data.otp);
            setIsValid(isValid);
        }, []);
        const onResendCode = T(() => {
            setErrorCode(null);
        }, []);
        const onSubmitPassword = T(async () => {
            setErrorCode(null);
            if (!isValid) {
                otpInputHandlers.validateInput();
                return;
            }
            setIsValidatingOtp(true);
            try {
                await finishIdentityValidation(otp);
            } catch (error) {
                setErrorCode(error?.reason);
                setIsValidatingOtp(false);
                if (error?.reason === 'ACCT_INACCESSIBLE') {
                    setIsAccountLocked(true);
                    onDisplayCardComponent?.();
                }
            }
        }, [otp, isValid, otpInputHandlers, onDisplayCardComponent]);
        const subtitleParts = i18n.get('ctp.otp.subtitle').split('%@');
        return /*#__PURE__*/ y$1(
            _$1,
            null,
            /*#__PURE__*/ y$1(
                CtPSection.Title,
                {
                    endAdornment: /*#__PURE__*/ y$1(CtPInfo, null)
                },
                i18n.get('ctp.otp.title')
            ),
            /*#__PURE__*/ y$1(
                CtPSection.Text,
                null,
                subtitleParts[0],
                ' ',
                otpNetwork,
                ' ',
                subtitleParts[1],
                /*#__PURE__*/ y$1(
                    'span',
                    {
                        className: 'adyen-checkout-ctp__otp-subtitle--highlighted'
                    },
                    otpMaskedContact
                ),
                subtitleParts[2]
            ),
            /*#__PURE__*/ y$1(CtPOneTimePasswordInput, {
                hideResendOtpButton: isAccountLocked,
                onChange: onChangeOtpInput,
                onSetInputHandlers: onSetOtpInputHandlers,
                disabled: isValidatingOtp,
                errorMessage: errorCode && i18n.get(`ctp.errors.${errorCode}`),
                onPressEnter: onSubmitPassword,
                onResendCode: onResendCode,
                isValidatingOtp: isValidatingOtp
            }),
            /*#__PURE__*/ y$1(Button, {
                disabled: isAccountLocked,
                label: i18n.get('continue'),
                variant: isCtpPrimaryPaymentMethod ? 'primary' : 'secondary',
                onClick: onSubmitPassword,
                status: isValidatingOtp && 'loading'
            })
        );
    };

    const CtPSingleCard = ({ card, errorMessage }) => {
        const { i18n } = useCoreContext();
        const getImage = useImage();
        const cardImage = card.artUri || getImage({})(card.scheme);
        return /*#__PURE__*/ y$1(
            _$1,
            null,
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout-ctp__card-list-single-card'
                },
                /*#__PURE__*/ y$1(Img, {
                    src: cardImage,
                    height: 24,
                    className: 'adyen-checkout-ctp__card-image'
                }),
                /*#__PURE__*/ y$1(
                    'span',
                    {
                        className: classNames({
                            'adyen-checkout-ctp__card-list-single-card-expired': card.isExpired
                        })
                    },
                    card.title,
                    ' ',
                    `•••• ${card.panLastFour}`
                ),
                card.isExpired &&
                    /*#__PURE__*/ y$1(
                        'span',
                        {
                            className: 'adyen-checkout-ctp__expired-label'
                        },
                        i18n.get('ctp.cards.expiredCard')
                    )
            ),
            errorMessage &&
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__error-text'
                    },
                    errorMessage
                )
        );
    };

    const isMobile = () => window.matchMedia('(max-width: 768px)').matches && /Android|iPhone|iPod/.test(navigator.userAgent);

    const schema$1 = ['srcDigitalCardId'];
    const CtPCardsList = ({ cardSelected, cards, errorMessage, onChangeCard }) => {
        const { i18n, loadingContext } = useCoreContext();
        const getImage = useImage();
        const { status } = useClickToPayContext();
        const { handleChangeFor, data } = useForm({
            schema: schema$1,
            defaultData: {
                srcDigitalCardId: cardSelected.srcDigitalCardId
            }
        });
        const items = F(() => {
            return cards.map(card => ({
                icon:
                    card.artUri ||
                    getImage({
                        loadingContext
                    })(card.scheme),
                name: `${isMobile() ? '' : card.title} •••• ${card.panLastFour} `,
                secondaryText: card.isExpired && i18n.get('ctp.cards.expiredCard'),
                id: card.srcDigitalCardId,
                disabled: card.isExpired
            }));
        }, [cards]);
        p(() => {
            const { srcDigitalCardId } = data;
            const card = cards.find(card => card.srcDigitalCardId === srcDigitalCardId);
            onChangeCard(card);
        }, [data, onChangeCard]);
        return /*#__PURE__*/ y$1(
            Field,
            {
                name: 'clickToPayCards',
                errorMessage: errorMessage
            },
            renderFormField('select', {
                items,
                selected: data['srcDigitalCardId'],
                name: 'cards',
                filterable: false,
                className: 'adyen-checkout-ctp__cards-list-dropdown',
                readonly: status === 'loading',
                onChange: handleChangeFor('srcDigitalCardId')
            })
        );
    };

    class Iframe extends k$1 {
        static defaultProps = {
            width: '0',
            height: '0',
            minWidth: '0',
            minHeight: '0',
            src: null,
            allow: null,
            title: 'components iframe',
            classNameModifiers: []
        };
        iframeEl;
        iframeOnLoad() {
            if (this.props.callback && typeof this.props.callback === 'function') {
                this.props.callback(this.iframeEl.contentWindow);
            }
        }
        componentDidMount() {
            if (this.iframeEl.addEventListener) {
                this.iframeEl.addEventListener('load', this.iframeOnLoad.bind(this), false);
            } else if (this.iframeEl.attachEvent) {
                // IE fallback
                this.iframeEl.attachEvent('onload', this.iframeOnLoad.bind(this));
            } else {
                this.iframeEl.onload = this.iframeOnLoad.bind(this);
            }
        }
        componentWillUnmount() {
            if (this.iframeEl.removeEventListener) {
                this.iframeEl.removeEventListener('load', this.iframeOnLoad.bind(this), false);
            } else if (this.iframeEl.detachEvent) {
                // IE fallback
                this.iframeEl.detachEvent('onload', this.iframeOnLoad.bind(this));
            } else {
                this.iframeEl.onload = null;
            }
        }
        render({ name, src, width, height, minWidth, minHeight, allow, title, classNameModifiers }) {
            const validClassNameModifiers = classNameModifiers.filter(m => !!m);
            return /*#__PURE__*/ y$1('iframe', {
                ref: ref => {
                    this.iframeEl = ref;
                },
                allow: allow,
                className: classNames(
                    'adyen-checkout__iframe',
                    `adyen-checkout__iframe--${name}`,
                    validClassNameModifiers.length && classNameModifiers.map(m => `adyen-checkout__iframe--${name}-${m}`)
                ),
                name: name,
                src: src,
                width: width,
                height: height,
                style: {
                    border: 0
                },
                frameBorder: '0',
                title: title,
                /* eslint-disable react/no-unknown-property */ referrerpolicy: 'origin',
                'min-width': minWidth,
                'min-height': minHeight
            });
        }
    }

    function getErrorLabel(errorCode, i18n) {
        if (!errorCode) return null;
        const errorLabel = i18n.get(`ctp.errors.${errorCode}`);
        if (errorLabel.includes('ctp.errors')) return i18n.get(`ctp.errors.UNKNOWN_ERROR`);
        return errorLabel;
    }
    function getPayButtonLabel(i18n, amount, checkoutCard) {
        if (!checkoutCard) return i18n.get('payButton');
        if (!isMobile())
            return i18n.get('payButton.with', {
                values: {
                    value: amountLabel(i18n, amount),
                    maskedData: `•••• ${checkoutCard?.panLastFour}`
                }
            });
        return null;
    }
    const CtPCards = ({ onDisplayCardComponent }) => {
        const { loadingContext, i18n } = useCoreContext();
        const getImage = useImage();
        const { amount, cards, checkout, isCtpPrimaryPaymentMethod, status, onSubmit, onSetStatus, onError } = useClickToPayContext();
        const [checkoutCard, setCheckoutCard] = h(cards.find(card => !card.isExpired) || cards[0]);
        const [errorCode, setErrorCode] = h(null);
        const isEveryCardExpired = cards.every(card => card.isExpired);
        const [isShopperCheckingOutWithCtp, setIsShopperCheckingOutWithCtp] = h(false);
        p(() => {
            if (cards.length === 0 || isEveryCardExpired) {
                onDisplayCardComponent?.();
            }
        }, [onDisplayCardComponent, isEveryCardExpired, cards]);
        const doCheckout = T(async () => {
            if (!checkoutCard) return;
            try {
                setIsShopperCheckingOutWithCtp(true);
                setErrorCode(null);
                onSetStatus('loading');
                const payload = await checkout(checkoutCard);
                onSubmit(payload);
            } catch (error) {
                if (error instanceof SrciError) {
                    setErrorCode(error?.reason);
                    console.warn(`CtP - Checkout: Reason: ${error?.reason} / Source: ${error?.source} / Scheme: ${error?.scheme}`);
                }
                setIsShopperCheckingOutWithCtp(false);
                onError(error);
            }
        }, [checkout, checkoutCard]);
        const handleOnChangeCard = T(card => {
            setCheckoutCard(card);
        }, []);
        /**
         * If shopper submits the payment using the default Card component while CtP is rendered, the status here will be updated
         * and that can potentially display an iframe.
         *
         * Therefore, we use the flag 'isShopperCheckingOutWithCtp' to flag that the iframe should be displayed only in case the
         * Shopper is checking out with Click to Pay.
         */ const displayNetworkDcf = isShopperCheckingOutWithCtp && status === 'loading' && checkoutCard?.isDcfPopupEmbedded;
        const displayCardCheckoutView = status !== 'loading' || !displayNetworkDcf;
        return /*#__PURE__*/ y$1(
            _$1,
            null,
            /*#__PURE__*/ y$1(Iframe, {
                name: CTP_IFRAME_NAME,
                height: '380',
                width: '100%',
                classNameModifiers: [displayNetworkDcf ? '' : 'hidden']
            }),
            displayCardCheckoutView &&
                /*#__PURE__*/ y$1(
                    _$1,
                    null,
                    /*#__PURE__*/ y$1(CtPSection.Title, null, i18n.get('ctp.cards.title')),
                    /*#__PURE__*/ y$1(CtPSection.Text, null, i18n.get('ctp.cards.subtitle')),
                    cards.length === 0 &&
                        /*#__PURE__*/ y$1(
                            'div',
                            {
                                className: 'adyen-checkout-ctp__empty-cards'
                            },
                            i18n.get('ctp.emptyProfile.message')
                        ),
                    cards.length === 1 &&
                        /*#__PURE__*/ y$1(CtPSingleCard, {
                            card: cards[0],
                            errorMessage: getErrorLabel(errorCode, i18n)
                        }),
                    cards.length > 1 &&
                        /*#__PURE__*/ y$1(CtPCardsList, {
                            cardSelected: checkoutCard,
                            cards: cards,
                            onChangeCard: handleOnChangeCard,
                            errorMessage: getErrorLabel(errorCode, i18n)
                        }),
                    /*#__PURE__*/ y$1(PayButton, {
                        disabled: isEveryCardExpired,
                        amount: amount,
                        label: getPayButtonLabel(i18n, amount, checkoutCard),
                        status: status,
                        variant: isCtpPrimaryPaymentMethod ? 'primary' : 'secondary',
                        icon:
                            cards.length !== 0 &&
                            getImage({
                                loadingContext: loadingContext,
                                imageFolder: 'components/'
                            })(isCtpPrimaryPaymentMethod ? 'lock' : 'lock_black'),
                        onClick: doCheckout
                    })
                )
        );
    };

    const CtPLoader = () => {
        const { i18n } = useCoreContext();
        const getImage = useImage();
        return /*#__PURE__*/ y$1(
            _$1,
            null,
            /*#__PURE__*/ y$1(Img, {
                className: 'adyen-checkout-ctp__loading-image',
                src: getImage({
                    extension: 'gif',
                    imageFolder: 'components/'
                })('ctp_loader'),
                alt: '',
                height: 120
            }),
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout-ctp__loading-subtitle'
                },
                i18n.get('ctp.loading.intro')
            )
        );
    };

    const loginValidationRules = {
        shopperLogin: {
            validate: value => !!value && value.length > 0,
            errorMessage: '',
            modes: ['blur']
        },
        default: {
            validate: value => !!value && value.length > 0,
            errorMessage: '',
            modes: ['blur']
        }
    };

    const CtPLoginInput = props => {
        const { i18n } = useCoreContext();
        const formSchema = ['shopperLogin'];
        const { handleChangeFor, data, triggerValidation, valid, errors, isValid } = useForm({
            schema: formSchema,
            rules: loginValidationRules
        });
        const loginInputHandlersRef = _({
            validateInput: null
        });
        const [isLoginInputDirty, setIsLoginInputDirty] = h(false);
        const validateInput = T(() => {
            setIsLoginInputDirty(true);
            triggerValidation();
        }, [triggerValidation]);
        p(() => {
            if (data.shopperLogin) setIsLoginInputDirty(true);
        }, [data.shopperLogin]);
        p(() => {
            loginInputHandlersRef.current.validateInput = validateInput;
            props.onSetInputHandlers(loginInputHandlersRef.current);
        }, [validateInput, props.onSetInputHandlers]);
        const handleOnKeyUp = T(
            event => {
                if (event.key === 'Enter') {
                    void props.onPressEnter();
                }
            },
            [props.onPressEnter]
        );
        const handleOnKeyPress = T(event => {
            // Prevent <form> submission if Component is placed inside an form
            if (event.key === 'Enter') event.preventDefault();
        }, []);
        p(() => {
            props.onChange({
                data,
                valid,
                errors,
                isValid
            });
        }, [data, valid, errors]);
        return /*#__PURE__*/ y$1(
            Field,
            {
                name: 'shopperLogin',
                label: i18n.get('ctp.login.inputLabel'),
                errorMessage: isLoginInputDirty ? props.errorMessage || !!errors.shopperLogin : null,
                classNameModifiers: ['shopperLogin']
            },
            renderFormField('text', {
                name: 'shopperLogin',
                autocorrect: 'off',
                spellcheck: false,
                value: data.shopperLogin,
                disabled: props.disabled,
                onInput: handleChangeFor('shopperLogin', 'input'),
                onBlur: handleChangeFor('shopperLogin', 'blur'),
                onKeyPress: handleOnKeyPress,
                onKeyUp: handleOnKeyUp
            })
        );
    };

    const CtPLogin = () => {
        const { i18n } = useCoreContext();
        const { isCtpPrimaryPaymentMethod, setIsCtpPrimaryPaymentMethod, verifyIfShopperIsEnrolled, startIdentityValidation } =
            useClickToPayContext();
        const [shopperLogin, setShopperLogin] = h(null);
        const [isValid, setIsValid] = h(false);
        const [errorCode, setErrorCode] = h(null);
        const [isLoggingIn, setIsLoggingIn] = h(false);
        const [loginInputHandlers, setLoginInputHandlers] = h(null);
        const onSetLoginInputHandlers = T(handlers => {
            setLoginInputHandlers(handlers);
        }, []);
        const handleOnLoginChange = T(({ data, isValid }) => {
            setShopperLogin(data.shopperLogin);
            setIsValid(isValid);
            // As soon as the Shopper interacts with input, the CtP becomes the primary PM
            if (data?.shopperLogin?.length > 0) {
                setIsCtpPrimaryPaymentMethod(true);
            }
        }, []);
        const handleOnLoginButtonClick = T(async () => {
            setErrorCode(null);
            if (!isValid) {
                loginInputHandlers.validateInput();
                return;
            }
            setIsLoggingIn(true);
            try {
                const { isEnrolled } = await verifyIfShopperIsEnrolled({
                    shopperEmail: shopperLogin
                });
                if (isEnrolled) {
                    await startIdentityValidation();
                } else {
                    setErrorCode('NOT_FOUND');
                    setIsLoggingIn(false);
                }
            } catch (error) {
                if (error instanceof SrciError) console.warn(`CtP - Login error: ${error.toString()}`);
                setErrorCode(error?.reason);
                setIsLoggingIn(false);
            }
        }, [verifyIfShopperIsEnrolled, startIdentityValidation, shopperLogin, isValid, loginInputHandlers]);
        return /*#__PURE__*/ y$1(
            _$1,
            null,
            /*#__PURE__*/ y$1(
                CtPSection.Title,
                {
                    endAdornment: /*#__PURE__*/ y$1(CtPInfo, null)
                },
                i18n.get('ctp.login.title')
            ),
            /*#__PURE__*/ y$1(CtPSection.Text, null, i18n.get('ctp.login.subtitle')),
            /*#__PURE__*/ y$1(CtPLoginInput, {
                onChange: handleOnLoginChange,
                onSetInputHandlers: onSetLoginInputHandlers,
                disabled: isLoggingIn,
                errorMessage: errorCode && i18n.get(`ctp.errors.${errorCode}`),
                onPressEnter: handleOnLoginButtonClick
            }),
            /*#__PURE__*/ y$1(Button, {
                label: i18n.get('continue'),
                variant: isCtpPrimaryPaymentMethod ? 'primary' : 'secondary',
                status: isLoggingIn && 'loading',
                onClick: () => {
                    void handleOnLoginButtonClick();
                }
            })
        );
    };

    const ClickToPayComponent = ({ onDisplayCardComponent }) => {
        const { ctpState, onReady, startIdentityValidation, logoutShopper } = useClickToPayContext();
        p(() => {
            if ([CtpState.OneTimePassword, CtpState.Login, CtpState.Ready].includes(ctpState)) {
                onReady();
            }
        }, [ctpState, onReady]);
        p(() => {
            async function sendOneTimePassword() {
                try {
                    await startIdentityValidation();
                } catch (error) {
                    if (error instanceof SrciError) console.warn(`CtP - Identity Validation error: ${error.toString()}`);
                    await logoutShopper();
                }
            }
            if (ctpState === CtpState.ShopperIdentified) {
                sendOneTimePassword();
            }
        }, [ctpState]);
        if (ctpState === CtpState.NotAvailable) {
            return null;
        }
        return /*#__PURE__*/ y$1(
            CtPSection,
            null,
            [CtpState.Loading, CtpState.ShopperIdentified].includes(ctpState) && /*#__PURE__*/ y$1(CtPLoader, null),
            ctpState === CtpState.OneTimePassword &&
                /*#__PURE__*/ y$1(CtPOneTimePassword, {
                    onDisplayCardComponent: onDisplayCardComponent
                }),
            ctpState === CtpState.Ready &&
                /*#__PURE__*/ y$1(CtPCards, {
                    onDisplayCardComponent: onDisplayCardComponent
                }),
            ctpState === CtpState.Login && /*#__PURE__*/ y$1(CtPLogin, null)
        );
    };

    function ContentSeparator({ label = 'qrCodeOrApp', classNames: classNames$1 = [] }) {
        const { i18n } = useCoreContext();
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: classNames('adyen-checkout__content-separator', ...classNames$1)
            },
            i18n.get(label)
        );
    }

    const ClickToPayHolder = ({ children }) => {
        const { i18n } = useCoreContext();
        const [isCardInputVisible, setIsCardInputVisible] = h(null);
        const { ctpState, isCtpPrimaryPaymentMethod, setIsCtpPrimaryPaymentMethod, status } = useClickToPayContext();
        const areFieldsNotSet = isCardInputVisible === null && isCtpPrimaryPaymentMethod === null;
        p(() => {
            if (areFieldsNotSet) {
                if (ctpState === CtpState.ShopperIdentified || ctpState === CtpState.Ready) {
                    setIsCardInputVisible(false);
                    setIsCtpPrimaryPaymentMethod(true);
                    return;
                }
                if (ctpState === CtpState.NotAvailable) {
                    setIsCardInputVisible(true);
                    setIsCtpPrimaryPaymentMethod(false);
                }
            }
        }, [ctpState, areFieldsNotSet]);
        const handleOnShowCardButtonClick = T(() => {
            setIsCardInputVisible(true);
            setIsCtpPrimaryPaymentMethod(false);
        }, []);
        if (ctpState === CtpState.NotAvailable) {
            return children();
        }
        if (ctpState === CtpState.Loading || ctpState === CtpState.ShopperIdentified) {
            return /*#__PURE__*/ y$1(ClickToPayComponent, null);
        }
        return /*#__PURE__*/ y$1(
            _$1,
            null,
            /*#__PURE__*/ y$1(ClickToPayComponent, {
                onDisplayCardComponent: handleOnShowCardButtonClick
            }),
            /*#__PURE__*/ y$1(ContentSeparator, {
                classNames: ['adyen-checkout-ctp__separator'],
                label: i18n.get('ctp.separatorText')
            }),
            isCardInputVisible
                ? children(!isCtpPrimaryPaymentMethod)
                : /*#__PURE__*/ y$1(Button, {
                      variant: 'secondary',
                      disabled: status === 'loading',
                      label: i18n.get('ctp.manualCardEntry'),
                      onClick: handleOnShowCardButtonClick
                  })
        );
    };

    const ClickToPayWrapper = ({
        amount,
        configuration,
        clickToPayService,
        setClickToPayRef,
        onSetStatus,
        onSubmit,
        onError,
        isStandaloneComponent,
        ...props
    }) => {
        return /*#__PURE__*/ y$1(
            ClickToPayProvider,
            {
                isStandaloneComponent: isStandaloneComponent,
                configuration: configuration,
                amount: amount,
                clickToPayService: clickToPayService,
                setClickToPayRef: setClickToPayRef,
                onSetStatus: onSetStatus,
                onSubmit: onSubmit,
                onError: onError
            },
            /*#__PURE__*/ y$1(ClickToPayHolder, null, props.children)
        );
    };

    const SRPanelProvider = ({ srPanel, children }) => {
        const { i18n } = useCoreContext();
        // Helper fns
        const setSRMessagesFromObjects = ({ fieldTypeMappingFn }) => {
            return partial(setSRMessagesFromErrors, {
                SRPanelRef: srPanel,
                i18n,
                fieldTypeMappingFn
            });
        };
        const setSRMessagesFromStrings = strs => {
            srPanel.setMessages(strs);
        };
        const clearSRPanel = () => {
            srPanel.setMessages(null);
        };
        const shouldMoveFocusSR = srPanel.moveFocus;
        return /*#__PURE__*/ y$1(
            SRPanelContext.Provider,
            {
                value: {
                    srPanel,
                    setSRMessagesFromObjects,
                    setSRMessagesFromStrings,
                    clearSRPanel,
                    shouldMoveFocusSR
                }
            },
            children
        );
    };

    class ThreeDS2Form extends k$1 {
        formEl;
        componentDidMount() {
            this.formEl.submit();
        }
        render({ name, action, target, inputName, inputValue }) {
            return /*#__PURE__*/ y$1(
                'form',
                {
                    ref: ref => {
                        this.formEl = ref;
                    },
                    method: 'POST',
                    className: classNames(['adyen-checkout__threeds2__form', `adyen-checkout__threeds2__form--${name}`]),
                    name: name,
                    action: action,
                    target: target,
                    style: {
                        display: 'none'
                    }
                },
                /*#__PURE__*/ y$1('input', {
                    name: inputName,
                    value: inputValue
                })
            );
        }
    }

    const getProcessMessageHandler = (domain, resolve, reject, expectedType) => event => {
        const parseErrorObj = {};
        const origin = event.origin || event.originalEvent.origin;
        if (origin !== domain) {
            return 'Message was not sent from the expected domain';
        }
        if (typeof event.data !== 'string') {
            return 'Event data was not of type string';
        }
        if (!event.data.length) {
            return 'Invalid event data string';
        }
        // Try to parse the data
        try {
            const feedbackObj = JSON.parse(event.data);
            if (hasOwnProperty(feedbackObj, 'type') && feedbackObj.type === expectedType) {
                resolve(feedbackObj);
            } else {
                // Silent fail - applies when RiskModule device fingerprinting is ongoing and this handler is picking up securedFields traffic
                return 'Event data was not of expected type';
            }
        } catch (e) {
            parseErrorObj.type = `${expectedType}-JSON-parse-error`;
            parseErrorObj.comment = 'failed to JSON parse event.data';
            parseErrorObj.extraInfo = `event.data = ${event.data}`;
            parseErrorObj.eventDataRaw = event.data;
            // TODO - decide whether to console.log/debug/error &/or call the merchant defined onError callback
            console.debug('get-process-message-handler::CATCH::Un-parseable JSON:: parseErrorObj=', parseErrorObj);
            return false;
        }
        return true;
    };

    const DEFAULT_CHALLENGE_WINDOW_SIZE = '02';
    const THREEDS_METHOD_TIMEOUT = 10000;
    const CHALLENGE_TIMEOUT = 600000;
    const CHALLENGE_TIMEOUT_REJECT_OBJECT = {
        result: {
            transStatus: 'U'
        },
        type: 'challengeResult',
        errorCode: 'timeout'
    };
    const FAILED_METHOD_STATUS_RESOLVE_OBJECT_TIMEOUT = {
        result: {
            threeDSCompInd: 'N'
        },
        type: 'fingerPrintResult',
        errorCode: 'timeout'
    };
    const ERRORS$2 = {
        TIME_OUT: 'timeout',
        WRONG_ORIGIN: 'wrongOrigin',
        HTML_ELEMENT: 'HTMLElementError',
        WRONG_DATA_TYPE: 'wrongDataType',
        MISSING_PROPERTY: 'missingProperty',
        UNKNOWN: 'unknownError'
    };
    const ERROR_MESSAGES$1 = {
        timeout: 'ThreeDS2 timed out',
        wrongOrigin: 'Result came in the right format but not from the expected origin',
        HTMLElementError: 'No proper HTML element was passed',
        wrongDataType: 'Result data was not of the expected type',
        missingProperty: 'Result data did not contain the expected properties',
        unknownError: 'An unknown error occurred'
    };
    // Re. EMV 3-D Specification: EMVCo_3DS_Spec_210_1017.pdf
    const CHALLENGE_WINDOW_SIZES = {
        '01': ['250px', '400px'],
        '02': ['390px', '400px'],
        '03': ['500px', '600px'],
        '04': ['600px', '400px'],
        '05': ['100%', '100%']
    };

    /**
     *  Used to retrieve the origin from a url
     *
     *  @remarks
     *  Uses a regex to get origin (can't handle localhost origins)
     *
     *  @param url - URL
     *  @returns The origin of the url
     */ const getOrigin = url => {
        const originRegex = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/;
        const matches = originRegex.exec(url);
        if (!matches) return null;
        const [, protocol, separator, host, port] = matches;
        if (!protocol || !separator || !host) return null;
        return `${protocol}:${separator}${host}${port ? `:${port}` : ''}`;
    };

    const b64DecodeUnicode = str =>
        /**
         * The "Unicode Problem" Since DOMStrings are 16-bit-encoded strings:
         * In most browsers calling window.btoa on a Unicode string will cause
         * a Character Out Of Range exception if a character exceeds the range
         * of a 8-bit ASCII-encoded character.
         * This method solves the problem
         */ decodeURIComponent(Array.prototype.map.call(window.atob(str), c => `%${`00${c.charCodeAt(0).toString(16)}`.slice(-2)}`).join(''));
    /**
     * @internal
     */ const base64 = {
        decode: pData => {
            if (!base64.isBase64(pData)) {
                return false;
            }
            if (base64.isBase64(pData)) {
                return b64DecodeUnicode(pData);
            }
            return false;
        },
        encode: pData => window.btoa(pData),
        isBase64: pDataStr => {
            if (!pDataStr) {
                return false;
            }
            if (pDataStr.length % 4) {
                return false;
            }
            return window.btoa(window.atob(pDataStr)) === pDataStr;
        }
    };

    const decodeAndParseToken = token => {
        const decodedToken = base64.decode(token);
        try {
            return decodedToken && JSON.parse(decodedToken);
        } catch (e) {
            throw new Error('Could not decode token');
        }
    };
    /**
     * Performs JSON.stringify on passed object & and base64 encodes result
     * @param obj -
     * @returns encoded result
     */ const encodeObject = obj => {
        if (!obj || !Object.keys(obj).length) {
            throw new Error('No (populated) data object to encode');
        }
        return base64.encode(JSON.stringify(obj));
    };
    /**
     * Accepts a size string for the challenge window & returns it if it is valid else returns a default value
     * @param sizeStr - the size string to check the validity of
     * @returns a valid size string
     */ const validateChallengeWindowSize = sizeStr => {
        const sizeString = sizeStr.length === 1 ? `0${sizeStr}` : sizeStr;
        const hasSize = Object.prototype.hasOwnProperty.call(CHALLENGE_WINDOW_SIZES, sizeString);
        return hasSize ? sizeString : DEFAULT_CHALLENGE_WINDOW_SIZE;
    };
    /**
     * Accepts a size string for the challenge window & returns the corresponding array of w/h values
     * @param sizeStr -
     */ const getChallengeWindowSize = sizeStr => CHALLENGE_WINDOW_SIZES[validateChallengeWindowSize(sizeStr)];
    /**
     *  prepareChallengeData
     *
     *  Requires an object containing the challenge parameters:
     *  @param token - challengeToken string received from /submitThreeDS2Fingerprint, /details or /payments call: contains acsTransID, acsURL, messageVersion,
     *     threeDSNotificationURL and threeDSServerTransID
     *  @param size - one of five possible challenge window sizes
     */ const prepareChallengeData = ({ token, size }) => {
        const decodedChallengeToken = decodeAndParseToken(token);
        const { acsTransID, acsURL, messageVersion, threeDSNotificationURL, threeDSServerTransID } = decodedChallengeToken;
        const notificationURLOrigin = getOrigin(threeDSNotificationURL);
        return {
            acsURL,
            cReqData: {
                acsTransID,
                messageVersion,
                threeDSServerTransID,
                messageType: 'CReq',
                challengeWindowSize: validateChallengeWindowSize(size)
            },
            iframeSizeArr: getChallengeWindowSize(size),
            postMessageDomain: notificationURLOrigin
        };
    };
    /**
     *  prepareFingerPrintData
     *
     *  Requires an object containing the fingerprint parameters:
     *  @param token - fingerprintToken string received from /payments call: contains threeDSMethodNotificationURL, threeDSMethodUrl and
     *     threeDSServerTransID
     *  @param notificationURL - the URL that the final notification is expected to be postMessaged from.
     *
     *  NOTE: we don't expect merchants to alter the default by passing in a notificationURL of their own via props;
     *  and if 3DS2 is being done via createFromAction or handleAction we won't accept it.
     *  But if the merchant is using checkout.create('threeDS2DeviceFingerprint') we still support the fact that they might want to set their own
     *  notificationURL (aka threeDSMethodNotificationURL)
     */ const prepareFingerPrintData = ({ token, notificationURL }) => {
        const decodedFingerPrintToken = decodeAndParseToken(token);
        const { threeDSMethodNotificationURL, threeDSMethodUrl: threeDSMethodURL, threeDSServerTransID } = decodedFingerPrintToken;
        const receivedNotificationURL = notificationURL || threeDSMethodNotificationURL;
        const notificationURLOrigin = getOrigin(receivedNotificationURL);
        return {
            threeDSServerTransID,
            threeDSMethodURL,
            threeDSMethodNotificationURL: receivedNotificationURL,
            postMessageDomain: notificationURLOrigin
        };
    };
    const createFingerprintResolveData = (dataKey, resultObj, paymentData) => ({
        data: {
            [dataKey]: encodeObject({
                threeDSCompInd: resultObj.threeDSCompInd
            }),
            paymentData
        }
    });
    // Old 3DS2 flow
    const createOldFingerprintResolveData = (dataKey, resultObj, paymentData) => ({
        data: {
            details: {
                'threeds2.fingerprint': encodeObject(resultObj)
            },
            paymentData
        }
    });
    const createChallengeResolveData = (dataKey, transStatus, authorisationToken) => ({
        data: {
            details: {
                [dataKey]: encodeObject({
                    transStatus,
                    authorisationToken
                })
            }
        }
    });
    // Needed for old 3DS2 flow & threeds2InMDFlow
    const createOldChallengeResolveData = (dataKey, transStatus, authorisationToken) => ({
        data: {
            details: {
                'threeds2.challengeResult': encodeObject({
                    transStatus
                })
            },
            paymentData: authorisationToken
        }
    });
    const handleErrorCode$1 = (errorCode, errorDescription) => {
        const unknownMessage = ERROR_MESSAGES$1[ERRORS$2.UNKNOWN];
        const message = ERROR_MESSAGES$1[errorCode] || errorDescription || unknownMessage;
        return {
            errorCode,
            message
        };
    };
    /**
     *
     * Takes a string and encodes it as a base64url string
     * (https://en.wikipedia.org/wiki/Base64#URL_applications)
     * (See also https://tools.ietf.org/html/rfc7515)
     *
     * @example
     * ```
     * const jsonStr = JSON.stringify( {name:'john', surname:'smith'} );
     * const base64url = encodeBase64URL(jsonStr);
     * ```
     *
     * @param dataStr - data, as a string, to be encoded
     *
     * @returns base64URL - a base64url encoded string
     */ const encodeBase64URL = dataStr => {
        const base64Data = window.btoa(dataStr);
        let base64url = base64Data.split('=')[0]; // Remove any trailing '='s
        base64url = base64url.replace(/\+/g, '-'); // 62nd char of encoding
        base64url = base64url.replace(/\//g, '_'); // 63rd char of encoding
        return base64url;
    };
    const fingerprintFlowPropsDropin = ['elementRef'];
    /**
     *  Must contain all props needed for the challenge stage since, in the new 3DS2 flow, the fingerprint component will be the "component" reference
     *  if the /submitThreeDS2Fingerprint response dictates we "handleAction" to create a challenge
     */ const fingerprintFlowProps = ['createFromAction', 'onAdditionalDetails'];
    /**
     * Add props specifically needed for the type of 3DS2 flow: fingerprint or challenge
     *
     * @param actionSubtype - 3DS2 flow type: fingerprint or challenge
     * @param props - object from which to extract particular properties
     */ const get3DS2FlowProps = (actionSubtype, props) => {
        if (actionSubtype === 'fingerprint') {
            // elementRef exists when the fingerprint component is created from the Dropin
            const fingerprintProps = props.elementRef ? fingerprintFlowPropsDropin : fingerprintFlowProps;
            const rtnObj = pick(fingerprintProps).from(props);
            rtnObj.showSpinner = !props.isDropin;
            rtnObj.statusType = 'loading';
            return rtnObj;
        }
        // Challenge
        return {
            statusType: 'custom',
            i18n: props.i18n
        };
    };

    /**
     * Tests if a passed promise settles before a certain amount of time has elapsed
     *
     * @param ms - number of milliseconds the passed promise has to settle
     * @param promise - the passed promise
     * @param timeOutObject - the object that the promiseTimeout will reject with if the passed promise doesn't settle in time
     */ const promiseTimeout = (ms, promise, timeOutObject) => {
        let timer;
        const promiseTimer = new Promise((resolve, reject) => {
            // Create a timeout to reject promise if not resolved
            /* eslint-disable-next-line */ timer = setTimeout(() => {
                reject(timeOutObject);
            }, ms);
            promise
                .then(res => {
                    clearTimeout(timer);
                    resolve(res);
                })
                .catch(err => {
                    clearTimeout(timer);
                    reject(err);
                });
        });
        const cancelTimer = () => {
            clearTimeout(timer);
        };
        return {
            promise: promiseTimer,
            cancel: cancelTimer
        };
    };

    const iframeName$2 = 'threeDSIframe';
    class DoChallenge3DS2 extends k$1 {
        processMessageHandler;
        challengePromise;
        constructor(props) {
            super(props);
            /**
             * Create and Base64Url encode a JSON object containing the serverTransactionID & threeDSMethodNotificationURL
             */ const jsonStr = JSON.stringify(this.props.cReqData);
            const base64URLencodedData = encodeBase64URL(jsonStr);
            this.state = {
                base64URLencodedData
            };
        }
        iframeCallback = () => {
            this.setState({
                status: 'iframeLoaded'
            });
            this.props.onActionHandled({
                componentType: '3DS2Challenge',
                actionDescription: 'challenge-iframe-loaded'
            });
        };
        get3DS2ChallengePromise() {
            return new Promise((resolve, reject) => {
                /**
                 * Listen for postMessage responses from the notification url
                 */ this.processMessageHandler = getProcessMessageHandler(this.props.postMessageDomain, resolve, reject, 'challengeResult');
                /* eslint-disable-next-line */ window.addEventListener('message', this.processMessageHandler);
            });
        }
        componentDidMount() {
            // Render challenge
            this.challengePromise = promiseTimeout(CHALLENGE_TIMEOUT, this.get3DS2ChallengePromise(), CHALLENGE_TIMEOUT_REJECT_OBJECT);
            this.challengePromise.promise
                .then(resolveObject => {
                    window.removeEventListener('message', this.processMessageHandler);
                    this.props.onCompleteChallenge(resolveObject);
                }) /** Catch, for when Challenge times-out */
                .catch(rejectObject => {
                    window.removeEventListener('message', this.processMessageHandler);
                    this.props.onErrorChallenge(rejectObject);
                });
        }
        componentWillUnmount() {
            if (this.challengePromise) this.challengePromise.cancel();
            window.removeEventListener('message', this.processMessageHandler);
        }
        render({ acsURL, cReqData, iframeSizeArr }, { base64URLencodedData, status }) {
            const [width, height] = iframeSizeArr;
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: classNames([
                        'adyen-checkout__threeds2__challenge',
                        `adyen-checkout__threeds2__challenge--${cReqData.challengeWindowSize}`
                    ])
                },
                status !== 'iframeLoaded' && /*#__PURE__*/ y$1(Spinner, null),
                /*#__PURE__*/ y$1(Iframe, {
                    name: iframeName$2,
                    width: width,
                    height: height,
                    callback: this.iframeCallback
                }),
                /*#__PURE__*/ y$1(ThreeDS2Form, {
                    name: 'cReqForm',
                    action: acsURL,
                    target: iframeName$2,
                    inputName: 'creq',
                    inputValue: base64URLencodedData
                })
            );
        }
    }

    class PrepareChallenge3DS2 extends k$1 {
        static defaultProps = {
            onComplete: () => {},
            onError: () => {},
            onActionHandled: () => {}
        };
        constructor(props) {
            super(props);
            if (this.props.token) {
                const challengeData = prepareChallengeData({
                    token: this.props.token,
                    size: this.props.challengeWindowSize || this.props.size
                });
                /**
                 * Check the structure of the created challengeData
                 */ const { acsTransID, messageVersion, threeDSServerTransID } = challengeData.cReqData;
                /** Missing props */ if (!challengeData.acsURL || !acsTransID || !messageVersion || !threeDSServerTransID) {
                    this.setStatusError({
                        errorInfo:
                            'Challenge Data missing one or more of the following properties (acsURL | acsTransID | messageVersion | threeDSServerTransID)',
                        errorObj: challengeData
                    });
                    return;
                }
                /** All good */ this.state = {
                    status: 'retrievingChallengeToken',
                    challengeData,
                    errorInfo: null
                };
            } else {
                this.setStatusError({
                    errorInfo: 'Missing challengeToken parameter'
                });
            }
        }
        setStatusComplete(resultObj) {
            this.setState(
                {
                    status: 'complete'
                },
                () => {
                    /**
                     * Create the data in the way that the /details endpoint expects.
                     *  This is different for the 'old',v66, flow triggered by a 'threeDS2Challenge' action (which includes the threeds2InMDFlow)
                     *  than for the new, v67, 'threeDS2' action
                     */ const resolveDataFunction = this.props.useOriginalFlow ? createOldChallengeResolveData : createChallengeResolveData;
                    const data = resolveDataFunction(this.props.dataKey, resultObj.transStatus, this.props.paymentData);
                    this.props.onComplete(data); // (equals onAdditionalDetails - except for 3DS2InMDFlow)
                }
            );
        }
        setStatusError(errorInfoObj) {
            this.setState({
                status: 'error',
                errorInfo: errorInfoObj.errorInfo
            });
            this.props.onError(errorInfoObj); // For some reason this doesn't fire if it's in a callback passed to the setState function
        }
        render({ onActionHandled }, { challengeData }) {
            const getImage = useImage();
            if (this.state.status === 'retrievingChallengeToken') {
                return /*#__PURE__*/ y$1(DoChallenge3DS2, {
                    onCompleteChallenge: challenge => {
                        // Challenge has resulted in an error (no transStatus could be retrieved) - but we still treat this as a valid scenario
                        if (hasOwnProperty(challenge.result, 'errorCode') && challenge.result.errorCode.length) {
                            // Tell the merchant there's been an error
                            const errorCodeObject = handleErrorCode$1(challenge.result.errorCode, challenge.result.errorDescription);
                            this.props.onError(errorCodeObject);
                        }
                        // This is the response we were looking for
                        if (challenge.threeDSServerTransID === challengeData.cReqData.threeDSServerTransID) {
                            // Proceed with call to onAdditionalDetails
                            this.setStatusComplete(challenge.result);
                        } else {
                            /**
                             * We suspect there is a scenario where the cRes is empty the first time causing the shopper to try to pay again, from the same
                             * browser window. But due to a suboptimal implementation by the merchant - the first set of 3DS2 components has not been properly removed.
                             * This means that for the second, successful challenge, there are a double set of listeners, leading to double callbacks, leading to
                             * double /details calls (one that will fail, one that will succeed).
                             *
                             * So here we detect that this is not the response we are looking for, and this time round, unmount this set of 3DS2 comps
                             */ console.debug('### PrepareChallenge3DS2::threeDSServerTransID:: ids do not match');
                            this.props.onComplete(null); // Send null so parent will unmount without calling onComplete
                        }
                    },
                    onErrorChallenge: challenge => {
                        /**
                         * Called when challenge times-out (which is still a valid scenario)...
                         */ if (hasOwnProperty(challenge, 'errorCode')) {
                            const errorCodeObject = handleErrorCode$1(challenge.errorCode);
                            this.props.onError(errorCodeObject);
                            this.setStatusComplete(challenge.result);
                            return;
                        }
                    },
                    ...challengeData,
                    onActionHandled: onActionHandled
                });
            }
            if (this.state.status === 'error') {
                return /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__threeds2-challenge-error'
                    },
                    /*#__PURE__*/ y$1(Img, {
                        className: 'adyen-checkout__status__icon adyen-checkout__status__icon--error',
                        src: getImage({
                            imageFolder: 'components/'
                        })('error'),
                        alt: ''
                    }),
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            className: 'adyen-checkout__status__text'
                        },
                        this.state.errorInfo ? this.state.errorInfo : this.props.i18n.get('error.message.unknown')
                    )
                );
            }
            return null;
        }
    }

    class ThreeDS2Challenge extends UIElement {
        static type = 'threeDS2Challenge';
        static defaultProps = {
            dataKey: 'threeDSResult',
            size: DEFAULT_CHALLENGE_WINDOW_SIZE,
            type: 'ChallengeShopper'
        };
        onComplete(state) {
            if (state) super.onComplete(state);
            this.unmount(); // re. fixing issue around back to back challenge calls
        }
        render() {
            // existy used because threeds2InMDFlow will send empty string for paymentData and we should be allowed to proceed with this
            if (!existy(this.props.paymentData)) {
                /**
                 *  One component is used for both old and new 3DS2 challenge flows
                 *   - The presence of useOriginalFlow indicates the old flow which used paymentData from the 3DS2 action
                 *   - The new flow uses authorisationToken from the 3DS2 action, passed internally in a prop called paymentData
                 */ const dataTypeForError = hasOwnProperty(this.props, 'useOriginalFlow') ? 'paymentData' : 'authorisationToken';
                this.props.onError({
                    errorCode: 'threeds2.challenge',
                    message: `No ${dataTypeForError} received. Challenge cannot proceed`
                });
                return null;
            }
            return /*#__PURE__*/ y$1(PrepareChallenge3DS2, {
                ...this.props,
                onComplete: this.onComplete
            });
        }
    }

    const iframeName$1 = 'threeDSMethodIframe';
    /**
     * Create and Base64URL encode a JSON object containing the serverTransactionID & threeDSMethodNotificationURL.
     * This Base64URL string will be added to the <form> in the ThreeDS2Form component.
     * The ThreeDS2Form component will submit the <form> when it mounts, using the ThreeDS2Iframe as the <form> target.
     * getProcessMessageHandler will listen for the postMessage response from the notificationURL and will settle the
     * promise accordingly causing this component to call the appropriate callback.
     * The callbacks exist in the parent component: ThreeDS2DeviceFingerprint where they ultimately call the onComplete
     * function passed as a prop when checkout.create('threeDS2DeviceFingerprint') is called.
     */ class DoFingerprint3DS2 extends k$1 {
        processMessageHandler;
        fingerPrintPromise;
        static defaultProps = {
            showSpinner: true
        };
        constructor(props) {
            super(props);
            /**
             * Create and Base64URL encode a JSON object
             */ const { threeDSServerTransID, threeDSMethodNotificationURL } = this.props;
            const jsonStr = JSON.stringify({
                threeDSServerTransID,
                threeDSMethodNotificationURL
            });
            const base64URLencodedData = encodeBase64URL(jsonStr);
            this.state = {
                base64URLencodedData
            };
        }
        get3DS2MethodPromise() {
            return new Promise((resolve, reject) => {
                /**
                 * Listen for postMessage responses from the notification url
                 */ this.processMessageHandler = getProcessMessageHandler(this.props.postMessageDomain, resolve, reject, 'fingerPrintResult');
                /* eslint-disable-next-line */ window.addEventListener('message', this.processMessageHandler);
            });
        }
        componentDidMount() {
            // Check 3DS2 Device fingerprint
            this.fingerPrintPromise = promiseTimeout(
                THREEDS_METHOD_TIMEOUT,
                this.get3DS2MethodPromise(),
                FAILED_METHOD_STATUS_RESOLVE_OBJECT_TIMEOUT
            );
            this.fingerPrintPromise.promise
                .then(resolveObject => {
                    window.removeEventListener('message', this.processMessageHandler);
                    this.props.onCompleteFingerprint(resolveObject);
                })
                .catch(rejectObject => {
                    window.removeEventListener('message', this.processMessageHandler);
                    this.props.onErrorFingerprint(rejectObject);
                });
        }
        componentWillUnmount() {
            if (this.fingerPrintPromise) this.fingerPrintPromise.cancel();
            window.removeEventListener('message', this.processMessageHandler);
        }
        render({ threeDSMethodURL, onActionHandled }, { base64URLencodedData }) {
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__3ds2-device-fingerprint'
                },
                this.props.showSpinner && /*#__PURE__*/ y$1(Spinner, null),
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        style: {
                            display: 'none'
                        }
                    },
                    /*#__PURE__*/ y$1(Iframe, {
                        name: iframeName$1,
                        callback: () => {
                            onActionHandled({
                                componentType: '3DS2Fingerprint',
                                actionDescription: 'fingerprint-iframe-loaded'
                            });
                        }
                    }),
                    /*#__PURE__*/ y$1(ThreeDS2Form, {
                        name: 'threeDSMethodForm',
                        action: threeDSMethodURL,
                        target: iframeName$1,
                        inputName: 'threeDSMethodData',
                        inputValue: base64URLencodedData
                    })
                )
            );
        }
    }

    class PrepareFingerprint3DS2 extends k$1 {
        static type = 'scheme';
        constructor(props) {
            super(props);
            const { token, notificationURL } = this.props; // See comments on prepareFingerPrintData regarding notificationURL
            if (token) {
                const fingerPrintData = prepareFingerPrintData({
                    token,
                    notificationURL
                });
                this.state = {
                    status: 'init',
                    fingerPrintData
                };
            } else {
                this.state = {
                    status: 'error'
                };
                // TODO - confirm that we should do this, or is it possible to proceed to the challenge anyway?
                //  ...in which case we should console.debug the error object and then call: this.setStatusComplete({ threeDSCompInd: 'N' });
                this.props.onError({
                    errorCode: this.props.dataKey,
                    message: 'Missing fingerprintToken parameter'
                });
            }
        }
        static defaultProps = {
            onComplete: () => {},
            onError: () => {},
            paymentData: '',
            showSpinner: true,
            onActionHandled: () => {}
        };
        componentDidMount() {
            // If no fingerPrintData or no threeDSMethodURL - don't render component. Instead exit with threeDSCompInd: 'U'
            if (!this.state.fingerPrintData || !this.state.fingerPrintData.threeDSMethodURL) {
                this.setStatusComplete({
                    threeDSCompInd: 'U'
                });
                console.debug('### PrepareFingerprint3DS2::exiting:: no fingerPrintData or no threeDSMethodURL');
                return;
            }
            // Render
            this.setState({
                status: 'retrievingFingerPrint'
            });
        }
        setStatusComplete(resultObj) {
            this.setState(
                {
                    status: 'complete'
                },
                () => {
                    /**
                     * Create the data in the way that the endpoint expects:
                     *  - this will be the /details endpoint for the 'old', v66, flow triggered by a 'threeDS2Fingerprint' action
                     *  - and will be the /submitThreeDS2Fingerprint endpoint for the new, v67, 'threeDS2' action
                     */ const resolveDataFunction = this.props.useOriginalFlow ? createOldFingerprintResolveData : createFingerprintResolveData;
                    const data = resolveDataFunction(this.props.dataKey, resultObj, this.props.paymentData);
                    /**
                     * For 'threeDS2' action = call to callSubmit3DS2Fingerprint
                     * For 'threeDS2Fingerprint' action = equals call to onAdditionalDetails (except for in 3DS2InMDFlow)
                     */ this.props.onComplete(data);
                }
            );
        }
        render({ showSpinner, onActionHandled }, { fingerPrintData }) {
            if (this.state.status === 'retrievingFingerPrint') {
                return /*#__PURE__*/ y$1(DoFingerprint3DS2, {
                    onCompleteFingerprint: fingerprint => {
                        this.setStatusComplete(fingerprint.result);
                    },
                    onErrorFingerprint: fingerprint => {
                        /**
                         * Called when fingerprint times-out (which is still a valid scenario)...
                         */ const errorCodeObject = handleErrorCode$1(fingerprint.errorCode);
                        console.debug('### PrepareFingerprint3DS2::fingerprint timed-out:: errorCodeObject=', errorCodeObject);
                        this.setStatusComplete(fingerprint.result);
                    },
                    showSpinner: showSpinner,
                    ...fingerPrintData,
                    onActionHandled: onActionHandled
                });
            }
            return null;
        }
    }

    /**
     * ThreeDS2DeviceFingerprint, onComplete, calls a new, internal, endpoint which
     * behaves like the /details endpoint but doesn't require the same credentials
     */ function callSubmit3DS2Fingerprint({ data }) {
        httpPost(
            {
                path: `v1/submitThreeDS2Fingerprint?token=${this.props.clientKey}`,
                loadingContext: this.props.loadingContext,
                errorLevel: 'fatal'
            },
            {
                ...data
            }
        )
            .then(resData => {
                // elementRef exists when the fingerprint component is created from the Dropin
                const actionHandler = this.props.elementRef ?? this;
                if (!actionHandler) {
                    console.error('Handled Error::callSubmit3DS2Fingerprint::FAILED:: actionHandler=', actionHandler);
                    return;
                }
                if (!resData.action && !resData.details) {
                    console.error('Handled Error::callSubmit3DS2Fingerprint::FAILED:: resData=', resData);
                    return;
                }
                /**
                 * Frictionless (no challenge) flow OR "refused" flow
                 */ if (resData.type === 'completed') {
                    const { details } = resData;
                    return this.onComplete({
                        data: {
                            details
                        }
                    });
                }
                /**
                 * Challenge flow
                 */ if (resData.action?.type === 'threeDS2') {
                    // Ensure challengeWindowSize is propagated if there was a (merchant defined) handleAction call proceeding this one that had it set as an option
                    return actionHandler.handleAction(resData.action, pick('challengeWindowSize').from(this.props));
                }
                /**
                 * Redirect (usecase: we thought we could do 3DS2 but it turns out we can't)
                 */ if (resData.action?.type === 'redirect') {
                    return actionHandler.handleAction(resData.action);
                }
            })
            .catch(error => {
                this.handleError(error);
            });
    }

    class ThreeDS2DeviceFingerprint extends UIElement {
        // TODO: Check this type if it can be threeDS2DeviceFingerprint
        static type = 'threeDS2DeviceFingerprint';
        static defaultProps = {
            dataKey: 'fingerprintResult',
            type: 'IdentifyShopper'
        };
        callSubmit3DS2Fingerprint = callSubmit3DS2Fingerprint.bind(this);
        onComplete(state) {
            super.onComplete(state);
            this.unmount(); // re. fixing issue around back to back fingerprinting calls
        }
        render() {
            /**
             * In the regular components (aka "native") flow we can't proceed because something has gone wrong with the payment if paymentData is missing from the threeDS2 action.
             * In the MDFlow the paymentData is always present (albeit an empty string, which is why we use 'existy' since we should be allowed to proceed with this)
             */ if (!existy(this.props.paymentData)) {
                this.props.onError({
                    errorCode: ThreeDS2DeviceFingerprint.defaultProps.dataKey,
                    message: 'No paymentData received. Fingerprinting cannot proceed'
                });
                return null;
            }
            /**
             * this.props.useOriginalFlow indicates the old 3DS2 flow.
             * It means the call to create this component came from the old 'threeDS2Fingerprint' action and upon completion should call the /details endpoint
             * instead of the new /submitThreeDS2Fingerprint endpoint
             */ return /*#__PURE__*/ y$1(PrepareFingerprint3DS2, {
                ...this.props,
                onComplete: this.props.useOriginalFlow ? this.onComplete : this.callSubmit3DS2Fingerprint
            });
        }
    }

    class CardElement extends UIElement {
        static type = 'scheme';
        // public static txVariants = ['amex', 'card', 'diners', 'discover', 'jcb', 'kcp', 'maestro', 'mc', 'scheme', 'storedCard', 'visa'];
        static txVariants = ['card'];
        static dependencies = [ThreeDS2DeviceFingerprint, ThreeDS2Challenge];
        clickToPayService;
        /**
         * Reference to the 'ClickToPayComponent'
         */ clickToPayRef = null;
        constructor(props) {
            super(props);
            if (props && !props._disableClickToPay) {
                this.clickToPayService = createClickToPayService(
                    this.props.configuration,
                    this.props.clickToPayConfiguration,
                    this.props.environment
                );
                this.clickToPayService?.initialize();
            }
        }
        static defaultProps = {
            onBinLookup: () => {},
            showBrandsUnderCardNumber: true,
            _disableClickToPay: false
        };
        setStatus(status, props) {
            if (this.componentRef?.setStatus) {
                this.componentRef.setStatus(status, props);
            }
            if (this.clickToPayRef?.setStatus) {
                this.clickToPayRef.setStatus(status, props);
            }
            return this;
        }
        setClickToPayRef = ref => {
            this.clickToPayRef = ref;
        };
        formatProps(props) {
            return {
                ...props,
                // Mismatch between hasHolderName & holderNameRequired which can mean card can never be valid
                holderNameRequired: !props.hasHolderName ? false : props.holderNameRequired,
                // False for *stored* BCMC cards & if merchant explicitly wants to hide the CVC field
                hasCVC: !((props.brand && props.brand === 'bcmc') || props.hideCVC),
                // billingAddressRequired only available for non-stored cards
                billingAddressRequired: props.storedPaymentMethodId ? false : props.billingAddressRequired,
                // ...(props.brands && !props.groupTypes && { groupTypes: props.brands }),
                type: props.type === 'scheme' ? 'card' : props.type,
                countryCode: props.countryCode ? props.countryCode.toLowerCase() : null,
                // Required for transition period (until configuration object becomes the norm)
                // - if merchant has defined value directly in props, use this instead
                configuration: {
                    ...props.configuration,
                    socialSecurityNumberMode: props.configuration?.socialSecurityNumberMode ?? 'auto'
                },
                brandsConfiguration: props.brandsConfiguration || props.configuration?.brandsConfiguration || {},
                icon: props.icon || props.configuration?.icon,
                // installmentOptions of a session should be used before falling back to the merchant configuration
                installmentOptions: props.session?.configuration?.installmentOptions || props.installmentOptions,
                enableStoreDetails: props.session?.configuration?.enableStoreDetails || props.enableStoreDetails,
                /**
                 * Click to Pay configuration
                 * - If email is set explicitly in the configuration, then it can override the one used in the session creation
                 */ clickToPayConfiguration: {
                    ...props.clickToPayConfiguration,
                    disableOtpAutoFocus: props.clickToPayConfiguration?.disableOtpAutoFocus || false,
                    shopperEmail: props.clickToPayConfiguration?.shopperEmail || props?._parentInstance?.options?.session?.shopperEmail,
                    telephoneNumber: props.clickToPayConfiguration?.telephoneNumber || props?._parentInstance?.options?.session?.telephoneNumber,
                    locale: props.clickToPayConfiguration?.locale || props.i18n?.locale?.replace('-', '_')
                }
            };
        }
        /**
         * Formats the component data output
         */ formatData() {
            /**
             * this.props.brand is never set for the generic card only for a 'dedicated' single-branded card e.g. bcmc
             * this.state.selectedBrandValue will be set when /binLookup detects a single brand &/or when /binLookup detects a dual-branded card and
             *  the shopper makes a brand selection
             */ const cardBrand = this.state.selectedBrandValue || this.props.brand;
            const includeStorePaymentMethod = this.props.enableStoreDetails && typeof this.state.storePaymentMethod !== 'undefined';
            return {
                paymentMethod: {
                    type: CardElement.type,
                    ...this.state.data,
                    ...(this.props.storedPaymentMethodId && {
                        storedPaymentMethodId: this.props.storedPaymentMethodId
                    }),
                    ...(cardBrand && {
                        brand: cardBrand
                    }),
                    ...(this.props.fundingSource && {
                        fundingSource: this.props.fundingSource
                    })
                },
                ...(this.state.billingAddress && {
                    billingAddress: this.state.billingAddress
                }),
                ...(this.state.socialSecurityNumber && {
                    socialSecurityNumber: this.state.socialSecurityNumber
                }),
                ...(includeStorePaymentMethod && {
                    storePaymentMethod: Boolean(this.state.storePaymentMethod)
                }),
                ...(hasValidInstallmentsObject(this.state.installments) && {
                    installments: this.state.installments
                }),
                browserInfo: this.browserInfo,
                origin: !!window && window.location.origin
            };
        }
        updateStyles(stylesObj) {
            if (this.componentRef?.updateStyles) this.componentRef.updateStyles(stylesObj);
            return this;
        }
        setFocusOn(fieldName) {
            if (this.componentRef?.setFocusOn) this.componentRef.setFocusOn(fieldName);
            return this;
        }
        onBrand = event => {
            this.eventEmitter.emit('brand', {
                ...event,
                brand: event.brand === 'card' ? null : event.brand
            });
            if (this.props.onBrand) this.props.onBrand(event);
        };
        processBinLookupResponse(binLookupResponse, isReset = false) {
            if (this.componentRef?.processBinLookupResponse) this.componentRef.processBinLookupResponse(binLookupResponse, isReset);
            return this;
        }
        handleUnsupportedCard(errObj) {
            if (this.componentRef?.handleUnsupportedCard) this.componentRef.handleUnsupportedCard(errObj);
            return this;
        }
        handleClickToPaySubmit = payload => {
            this.setState({
                data: {
                    ...payload
                },
                valid: {},
                errors: {},
                isValid: true
            });
            this.submit();
        };
        onBinLookup(obj) {
            // Handler for regular card comp doesn't need this 'raw' data or to know about 'resets'
            if (!obj.isReset) {
                const nuObj = reject('supportedBrandsRaw').from(obj);
                this.props.onBinLookup(nuObj);
            }
        }
        onBinValue = triggerBinLookUp(this);
        get isValid() {
            return !!this.state.isValid;
        }
        get icon() {
            return (
                this.props.icon ??
                this.resources.getImage({
                    loadingContext: this.props.loadingContext
                })(this.brand)
            );
        }
        get brands() {
            const { brands, loadingContext, brandsConfiguration } = this.props;
            if (brands) {
                return brands.map(brand => {
                    const brandIcon =
                        brandsConfiguration[brand]?.icon ??
                        this.props.modules.resources.getImage({
                            loadingContext
                        })(brand);
                    return {
                        icon: brandIcon,
                        name: brand
                    };
                });
            }
            return [];
        }
        get brand() {
            return this.props.brand || this.props.type;
        }
        get displayName() {
            if (this.props.storedPaymentMethodId) {
                return `•••• ${this.props.lastFour}`;
            }
            return this.props.name || CardElement.type;
        }
        get accessibleName() {
            // Use display name, unless it's a stored payment method, there inform user
            return (
                (this.props.name || CardElement.type) +
                (this.props.storedPaymentMethodId
                    ? ' ' + this.props.i18n.get('creditCard.storedCard.description.ariaLabel').replace('%@', this.props.lastFour)
                    : '')
            );
        }
        get browserInfo() {
            return collectBrowserInfo();
        }
        renderCardInput(isCardPrimaryInput = true) {
            return /*#__PURE__*/ y$1(CardInput, {
                setComponentRef: this.setComponentRef,
                ...this.props,
                ...this.state,
                onChange: this.setState,
                onSubmit: this.submit,
                payButton: this.payButton,
                onBrand: this.onBrand,
                onBinValue: this.onBinValue,
                brand: this.brand,
                brandsIcons: this.brands,
                isPayButtonPrimaryVariant: isCardPrimaryInput,
                resources: this.resources
            });
        }
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(
                    SRPanelProvider,
                    {
                        srPanel: this.props.modules.srPanel
                    },
                    /*#__PURE__*/ y$1(
                        ClickToPayWrapper,
                        {
                            amount: this.props.amount,
                            configuration: this.props.clickToPayConfiguration,
                            clickToPayService: this.clickToPayService,
                            isStandaloneComponent: false,
                            setClickToPayRef: this.setClickToPayRef,
                            onSetStatus: this.setElementStatus,
                            onSubmit: this.handleClickToPaySubmit,
                            onError: this.handleError
                        },
                        isCardPrimaryInput => this.renderCardInput(isCardPrimaryInput)
                    )
                )
            );
        }
    }

    class BancontactElement extends CardElement {
        static type = 'bcmc';
        static txVariants = ['bcmc'];
        constructor(props) {
            super(props);
        }
        static defaultProps = {
            ...CardElement.defaultProps,
            brands: ['bcmc', 'maestro', 'visa']
        };
        /**
         * Now that the Bancontact (BCMC) Card component can accept a number dual branded with Visa (which requires a CVC) it has to be handled differently
         * at creation time (no automatic removing of the CVC securedField).
         * At the same time we can't treat it as a regular 'card' component - because it needs to hide the CVC field at at startup,
         * as well as show the BCMC logo in the number field and ignore any of the internal, regEx driven, brand detection.
         */ formatProps(props) {
            return {
                ...super.formatProps(props),
                type: 'bcmc',
                cvcPolicy: CVC_POLICY_HIDDEN
            };
        }
        // Disable internal event.emit() for Bancontact
        onBrand = event => {
            if (this.props.onBrand) this.props.onBrand(event);
        };
    }

    const defaultProps$6 = {
        onChange: () => {},
        onError: () => {}
    };
    function SecuredFieldsInput(props) {
        const sfp = _(null);
        const [errors, setErrors] = h({});
        const [valid, setValid] = h({});
        const [data, setData] = h({});
        const [isSfpValid, setIsSfpValid] = h(false);
        const [issuingCountryCode, setIssuingCountryCode] = h(null);
        const [dualBrandSelectElements, setDualBrandSelectElements] = h([]);
        const [selectedBrandValue, setSelectedBrandValue] = h('');
        const handleSecuredFieldsChange = sfState => {
            setData({
                ...data,
                ...sfState.data
            });
            setErrors({
                ...errors,
                ...sfState.errors
            });
            setValid({
                ...valid,
                ...sfState.valid
            });
            setIsSfpValid(sfState.isSfpValid);
        };
        // Farm the handlers for binLookup related functionality out to another 'extensions' file
        const extensions$1 = F(
            () =>
                extensions(
                    props,
                    {
                        sfp
                    },
                    {
                        dualBrandSelectElements,
                        setDualBrandSelectElements,
                        setSelectedBrandValue,
                        issuingCountryCode,
                        setIssuingCountryCode
                    }
                ),
            [dualBrandSelectElements, issuingCountryCode]
        );
        /**
         * EXPECTED METHODS ON SecuredFields.this
         */ this.processBinLookupResponse = (binLookupResponse, isReset) => {
            extensions$1.processBinLookup(binLookupResponse, isReset);
        };
        this.dualBrandingChangeHandler = extensions$1.handleDualBrandSelection;
        /**
         * EFFECT HOOKS
         */ p(() => {
            // componentDidMount
            this.setFocusOn = sfp.current.setFocusOn;
            this.updateStyles = sfp.current.updateStyles;
            this.showValidation = sfp.current.showValidation;
            this.handleUnsupportedCard = sfp.current.handleUnsupportedCard;
            // componentWillUnmount
            return () => {
                sfp.current.destroy();
            };
        }, []);
        /**
         * Main 'componentDidUpdate' handler
         */ p(() => {
            const sfStateErrorsObj = sfp.current.mapErrorsToValidationRuleResult();
            props.onChange({
                data,
                valid,
                errors: {
                    ...errors,
                    ...sfStateErrorsObj
                },
                isValid: isSfpValid,
                selectedBrandValue
            });
        }, [data, valid, errors, selectedBrandValue]);
        /**
         * RENDER
         */ return /*#__PURE__*/ y$1(SecuredFieldsProvider, {
            ref: sfp,
            ...extractPropsForSFP$1(props),
            onChange: handleSecuredFieldsChange,
            render: () => null
        });
    }
    SecuredFieldsInput.defaultProps = defaultProps$6;
    const extractPropsForSFP$1 = props => {
        return {
            allowedDOMAccess: props.allowedDOMAccess,
            autoFocus: props.autoFocus,
            brands: props.brands,
            brandsConfiguration: props.brandsConfiguration,
            clientKey: props.clientKey,
            // countryCode: props.countryCode, // only used for korean cards when koreanAuthenticationRequired is true
            i18n: props.i18n,
            implementationType: props.implementationType,
            keypadFix: props.keypadFix,
            legacyInputMode: props.legacyInputMode,
            loadingContext: props.loadingContext,
            minimumExpiryDate: props.minimumExpiryDate,
            onAdditionalSFConfig: props.onAdditionalSFConfig,
            onAdditionalSFRemoved: props.onAdditionalSFRemoved,
            onAllValid: props.onAllValid,
            onAutoComplete: props.onAutoComplete,
            onBinValue: props.onBinValue,
            onBrand: props.onBrand,
            // onChange // set directly
            onConfigSuccess: props.onConfigSuccess,
            onError: props.onError,
            onFieldValid: props.onFieldValid,
            onFocus: props.onFocus,
            onLoad: props.onLoad,
            // render // set directly
            rootNode: props.rootNode,
            showWarnings: props.showWarnings,
            styles: props.styles,
            trimTrailingSeparator: props.trimTrailingSeparator,
            type: props.type,
            resources: props.resources
        };
    };

    class SecuredFieldsElement extends UIElement {
        static type = 'securedfields';
        static analyticsType = 'custom-scheme';
        static defaultProps = {
            onBinLookup: () => {},
            brandsConfiguration: {}
        };
        formatProps(props) {
            return {
                ...props,
                type: props.type === 'scheme' || props.type === 'securedfields' ? 'card' : props.type
            };
        }
        /**
         * Formats the component data output
         */ formatData() {
            const sfBrand = this.state.selectedBrandValue || this.props.brand;
            return {
                paymentMethod: {
                    type: 'scheme',
                    ...this.state.data,
                    ...(sfBrand && {
                        brand: sfBrand
                    })
                },
                browserInfo: this.browserInfo
            };
        }
        updateStyles(stylesObj) {
            if (this.componentRef?.updateStyles) this.componentRef.updateStyles(stylesObj);
            return this;
        }
        setFocusOn(frame) {
            if (this.componentRef?.setFocusOn) this.componentRef.setFocusOn(frame);
            return this;
        }
        processBinLookupResponse(binLookupResponse) {
            if (this.componentRef?.processBinLookupResponse) this.componentRef.processBinLookupResponse(binLookupResponse);
            return this;
        }
        dualBrandingChangeHandler(e) {
            if (this.componentRef?.dualBrandingChangeHandler) this.componentRef.dualBrandingChangeHandler(e);
            return this;
        }
        handleUnsupportedCard(errObj) {
            if (this.componentRef?.handleUnsupportedCard) this.componentRef.handleUnsupportedCard(errObj);
            return this;
        }
        onBinLookup(obj) {
            const nuObj = {
                ...obj
            };
            nuObj.rootNode = this._node;
            if (!nuObj.isReset) {
                // Add brandImage urls, first checking if the merchant has configured their own one for the brand
                nuObj.supportedBrandsRaw = obj.supportedBrandsRaw?.map(item => {
                    item.brandImageUrl = this.props.brandsConfiguration[item.brand]?.icon ?? getCardImageUrl$1(item.brand, this.resources);
                    return item;
                });
            }
            this.props.onBinLookup(nuObj);
        }
        onBinValue = triggerBinLookUp(this);
        get isValid() {
            return !!this.state.isValid;
        }
        get icon() {
            return this.resources.getImage({
                loadingContext: this.props.loadingContext
            })(this.props.type);
        }
        get browserInfo() {
            return collectBrowserInfo();
        }
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(SecuredFieldsInput, {
                    ref: ref => {
                        this.componentRef = ref;
                    },
                    ...this.props,
                    ...this.state,
                    rootNode: this._node,
                    onChange: this.setState,
                    onBinValue: this.onBinValue,
                    implementationType: 'custom',
                    resources: this.resources
                })
            );
        }
    }

    var styles$2 = {
        'sf-input__wrapper': 'AchInput-module_sf-input__wrapper__lfdiv',
        'adyen-checkout__input': 'AchInput-module_adyen-checkout__input__8WwCR'
    };

    const AchSFInput = ({ id, dataInfo, className = '', label, focused, filled, errorMessage = '', isValid = false, onFocusField, dir }) => {
        const capitalisedId = id.charAt(0).toUpperCase() + id.slice(1);
        const encryptedIdStr = `encrypted${capitalisedId}`;
        return /*#__PURE__*/ y$1(
            Field,
            {
                label: label,
                focused: focused,
                filled: filled,
                classNameModifiers: [id],
                onFocusField: () => onFocusField(encryptedIdStr),
                errorMessage: errorMessage,
                isValid: isValid,
                className: className,
                dir: dir,
                name: id,
                errorVisibleToScreenReader: false
            },
            /*#__PURE__*/ y$1(DataSfSpan, {
                encryptedFieldType: encryptedIdStr,
                'data-info': dataInfo,
                className: classNames({
                    'adyen-checkout__input': true,
                    'adyen-checkout__input--large': true,
                    [styles$2['adyen-checkout__input']]: true,
                    'adyen-checkout__input--error': errorMessage.length,
                    'adyen-checkout__input--focus': focused,
                    'adyen-checkout__input--valid': isValid
                })
            })
        );
    };

    const AchSecuredFields = ({ focusedElement, onFocusField, errors, valid }) => {
        const { i18n } = useCoreContext();
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__ach-sf__form adyen-checkout__field-wrapper'
            },
            /*#__PURE__*/ y$1(AchSFInput, {
                id: 'bankAccountNumber',
                focused: focusedElement === 'encryptedBankAccountNumber',
                isValid: !!valid.encryptedBankAccountNumber,
                label: i18n.get('ach.accountNumberField.title'),
                onFocusField: onFocusField,
                filled: !!errors.encryptedBankAccountNumber || !!valid.encryptedBankAccountNumber,
                errorMessage: !!errors.encryptedBankAccountNumber && i18n.get(errors.encryptedBankAccountNumber),
                dataInfo: '{"length":"4-17"}',
                className: 'adyen-checkout__field--50',
                dir: 'ltr'
            }),
            /*#__PURE__*/ y$1(AchSFInput, {
                id: 'bankLocationId',
                focused: focusedElement === 'encryptedBankLocationId',
                isValid: !!valid.encryptedBankLocationId,
                label: i18n.get('ach.accountLocationField.title'),
                onFocusField: onFocusField,
                filled: !!errors.encryptedBankLocationId || !!valid.encryptedBankLocationId,
                errorMessage: !!errors.encryptedBankLocationId && i18n.get(errors.encryptedBankLocationId),
                dataInfo: '{"length":9}',
                className: 'adyen-checkout__field--50',
                dir: 'ltr'
            })
        );
    };

    var defaultProps$5 = {
        type: 'ach',
        // Settings
        hasHolderName: true,
        holderNameRequired: true,
        billingAddressRequired: true,
        billingAddressAllowedCountries: ['US', 'PR'],
        // Events
        onLoad: () => {},
        onConfigSuccess: () => {},
        onAllValid: () => {},
        onFieldValid: () => {},
        onError: () => {},
        onBlur: () => {},
        onFocus: () => {},
        onChange: () => {},
        // Values
        holderName: '',
        data: {
            holderName: '',
            billingAddress: {}
        },
        // Customization
        styles: {},
        placeholders: {}
    };

    var defaultStyles = {
        base: {
            caretColor: '#0075FF'
        }
    };

    function validateHolderName(holderName, holderNameRequired = false) {
        if (holderNameRequired) {
            return !!holderName && typeof holderName === 'string' && holderName.trim().length > 0;
        }
        return true;
    }
    function AchInput(props) {
        const { i18n } = useCoreContext();
        const holderNameIsValid = props.hasHolderName && (!!props.holderName || !!props.data.holderName);
        const [errors, setErrors] = h({});
        const [valid, setValid] = h({
            ...(props.holderNameRequired && {
                holderName: holderNameIsValid
            })
        });
        const [data, setData] = h({
            ...(props.hasHolderName && {
                holderName: props.holderName || props.data.holderName
            })
        });
        const [billingAddress, setBillingAddress] = h(props.billingAddressRequired ? props.data.billingAddress : null);
        const [isSfpValid, setIsSfpValid] = h(false);
        const [focusedElement, setFocusedElement] = h('');
        const [storePaymentMethod, setStorePaymentMethod] = h(false);
        const handleFocus = e => {
            const isFocused = e.focus === true;
            setFocusedElement(e.currentFocusObject);
            if (isFocused) {
                props.onFocus(e);
            } else {
                props.onBlur(e);
            }
        };
        const handleAddress = address => {
            setBillingAddress({
                ...billingAddress,
                ...address.data
            });
            setValid({
                ...valid,
                billingAddress: address.isValid
            });
        };
        const handleHolderName = e => {
            const holderName = e.target.value;
            setData({
                ...data,
                holderName
            });
            setErrors({
                ...errors,
                holderName: props.holderNameRequired ? !validateHolderName(holderName) : false
            });
            setValid({
                ...valid,
                holderName: props.holderNameRequired ? validateHolderName(holderName, props.holderNameRequired) : true
            });
        };
        const handleSecuredFieldsChange = newState => {
            const sfState = newState;
            const tempHolderName = sfState.autoCompleteName ? sfState.autoCompleteName : data.holderName;
            setData({
                ...data,
                ...sfState.data,
                holderName: tempHolderName
            });
            setErrors({
                ...errors,
                ...sfState.errors
            });
            setValid({
                ...valid,
                ...sfState.valid,
                holderName: props.holderNameRequired ? validateHolderName(tempHolderName, props.holderNameRequired) : true
            });
            setIsSfpValid(sfState.isSfpValid);
        };
        // Refs
        const sfp = _(null);
        const billingAddressRef = _(null);
        const setAddressRef = ref => {
            billingAddressRef.current = ref;
        };
        const [status, setStatus] = h('ready');
        /** An object by which to expose 'public' members to the parent UIElement */ const achRef = _({});
        // Just call once
        if (!Object.keys(achRef.current).length) {
            props.setComponentRef?.(achRef.current);
        }
        achRef.current.showValidation = () => {
            // Validate SecuredFields
            sfp.current.showValidation();
            // Validate holderName
            if (props.holderNameRequired && !valid.holderName) {
                setErrors({
                    ...errors,
                    holderName: true
                });
            }
            // Validate Address
            if (billingAddressRef.current) billingAddressRef.current.showValidation();
        };
        achRef.current.setStatus = setStatus;
        p(() => {
            this.setFocusOn = sfp.current.setFocusOn;
            this.updateStyles = sfp.current.updateStyles;
            return () => {
                sfp.current.destroy();
            };
        }, []);
        // Run when state.data, -errors or -valid change
        p(() => {
            // Validate whole component i.e holderName + securedFields + address
            const holderNameValid = validateHolderName(data.holderName, props.holderNameRequired);
            const sfpValid = isSfpValid;
            const billingAddressValid = props.billingAddressRequired ? Boolean(valid.billingAddress) : true;
            const isValid = sfpValid && holderNameValid && billingAddressValid;
            props.onChange({
                data,
                isValid,
                billingAddress,
                storePaymentMethod
            });
        }, [data, valid, errors, storePaymentMethod]);
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__ach'
            },
            /*#__PURE__*/ y$1(SecuredFieldsProvider, {
                ref: sfp,
                ...extractPropsForSFP(props),
                styles: {
                    ...defaultStyles,
                    ...props.styles
                },
                onChange: handleSecuredFieldsChange,
                onFocus: handleFocus,
                render: ({ setRootNode, setFocusOn }, sfpState) =>
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            ref: setRootNode,
                            className: `adyen-checkout__ach-input ${styles$2['sf-input__wrapper']}`
                        },
                        /*#__PURE__*/ y$1(
                            LoadingWrapper,
                            {
                                status: sfpState.status
                            },
                            /*#__PURE__*/ y$1(
                                'div',
                                {
                                    className: classNames(['adyen-checkout__fieldset', 'adyen-checkout__fieldset--ach'])
                                },
                                /*#__PURE__*/ y$1(
                                    'div',
                                    {
                                        className: 'adyen-checkout__fieldset__title'
                                    },
                                    i18n.get('ach.bankAccount')
                                ),
                                props.hasHolderName &&
                                    /*#__PURE__*/ y$1(
                                        Field,
                                        {
                                            label: i18n.get('ach.accountHolderNameField.title'),
                                            className: 'adyen-checkout__pm__holderName',
                                            errorMessage: !!errors.holderName && i18n.get('ach.accountHolderNameField.invalid'),
                                            isValid: !!valid.holderName,
                                            name: 'holderName'
                                        },
                                        renderFormField('text', {
                                            className: `adyen-checkout__pm__holderName__input ${styles$2['adyen-checkout__input']}`,
                                            placeholder: props.placeholders.holderName || i18n.get('ach.accountHolderNameField.placeholder'),
                                            value: data.holderName,
                                            required: props.holderNameRequired,
                                            onInput: handleHolderName
                                        })
                                    ),
                                /*#__PURE__*/ y$1(AchSecuredFields, {
                                    focusedElement: focusedElement,
                                    onFocusField: setFocusOn,
                                    errors: sfpState.errors,
                                    valid: sfpState.valid
                                })
                            ),
                            props.billingAddressRequired &&
                                /*#__PURE__*/ y$1(Address, {
                                    label: 'billingAddress',
                                    data: billingAddress,
                                    onChange: handleAddress,
                                    allowedCountries: props.billingAddressAllowedCountries,
                                    requiredFields: props.billingAddressRequiredFields,
                                    setComponentRef: setAddressRef
                                }),
                            props.enableStoreDetails &&
                                /*#__PURE__*/ y$1(StoreDetails, {
                                    onChange: setStorePaymentMethod
                                })
                        )
                    )
            }),
            props.showPayButton &&
                props.payButton({
                    status,
                    label: i18n.get('confirmPurchase')
                })
        );
    }
    AchInput.defaultProps = defaultProps$5;
    const extractPropsForSFP = props => {
        return {
            allowedDOMAccess: props.allowedDOMAccess,
            autoFocus: props.autoFocus,
            clientKey: props.clientKey,
            i18n: props.i18n,
            keypadFix: props.keypadFix,
            legacyInputMode: props.legacyInputMode,
            loadingContext: props.loadingContext,
            onAllValid: props.onAllValid,
            onConfigSuccess: props.onConfigSuccess,
            onError: props.onError,
            onFieldValid: props.onFieldValid,
            onFocus: props.onFocus,
            onLoad: props.onLoad,
            showWarnings: props.showWarnings,
            styles: props.styles,
            type: props.type,
            forceCompat: props.forceCompat,
            resources: props.resources
        };
    };

    function RedirectButton({ label = null, icon = null, payButton, onSubmit, amount = null, name, ...props }) {
        const { i18n } = useCoreContext();
        const [status, setStatus] = h('ready');
        this.setStatus = newStatus => {
            setStatus(newStatus);
        };
        const payButtonLabel = () => {
            const isZeroAuth = amount && {}.hasOwnProperty.call(amount, 'value') && amount.value === 0;
            if (isZeroAuth) return `${i18n.get('preauthorizeWith')} ${name}`;
            return `${i18n.get('continueTo')} ${name}`;
        };
        return /*#__PURE__*/ y$1(
            _$1,
            null,
            payButton({
                ...props,
                status,
                icon,
                classNameModifiers: ['standalone'],
                label: label || payButtonLabel(),
                onClick: onSubmit
            })
        );
    }

    class AchElement extends UIElement {
        static type = 'ach';
        formatProps(props) {
            return {
                ...props,
                // Fix mismatch between passed hasHolderName & holderNameRequired props
                // (when holderNameRequired = true, but hasHolderName = false - which means component will never be valid)
                holderNameRequired: props.hasHolderName ?? props.holderNameRequired
            };
        }
        /**
         * Formats the component data output
         */ formatData() {
            const recurringPayment = !!this.props.storedPaymentMethodId;
            // Map holderName to ownerName
            const paymentMethod = {
                type: AchElement.type,
                ...this.state.data,
                ownerName: this.state.data?.holderName,
                ...(recurringPayment && {
                    storedPaymentMethodId: this.props.storedPaymentMethodId
                })
            };
            delete paymentMethod.holderName;
            return {
                paymentMethod,
                ...(this.state.billingAddress && {
                    billingAddress: this.state.billingAddress
                }),
                ...(this.state.storePaymentMethod && {
                    storePaymentMethod: this.state.storePaymentMethod
                })
            };
        }
        updateStyles(stylesObj) {
            if (this.componentRef && this.componentRef.updateStyles) this.componentRef.updateStyles(stylesObj);
            return this;
        }
        setFocusOn(fieldName) {
            if (this.componentRef && this.componentRef.setFocusOn) this.componentRef.setFocusOn(fieldName);
            return this;
        }
        get isValid() {
            if (this.props.storedPaymentMethodId) {
                return true;
            }
            return !!this.state.isValid;
        }
        get displayName() {
            if (this.props.storedPaymentMethodId && this.props.bankAccountNumber) {
                // get lastFour from bankAccountNumber, value comes from storedPaymentMethods
                return `•••• ${this.props.bankAccountNumber.slice(-4)}`;
            }
            return this.props.name;
        }
        get additionalInfo() {
            return this.props.storedPaymentMethodId ? this.props.i18n.get('ach.savedBankAccount') : '';
        }
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                this.props.storedPaymentMethodId
                    ? /*#__PURE__*/ y$1(RedirectButton, {
                          name: this.displayName,
                          amount: this.props.amount,
                          payButton: this.payButton,
                          onSubmit: this.submit,
                          ref: ref => {
                              this.componentRef = ref;
                          }
                      })
                    : /*#__PURE__*/ y$1(AchInput, {
                          setComponentRef: this.setComponentRef,
                          ...this.props,
                          onChange: this.setState,
                          onSubmit: this.submit,
                          payButton: this.payButton,
                          resources: this.resources
                      })
            );
        }
    }

    function ConsentCheckbox({ errorMessage, label, onChange, i18n, ...props }) {
        return /*#__PURE__*/ y$1(
            Field,
            {
                classNameModifiers: ['consentCheckbox'],
                errorMessage: errorMessage,
                i18n: i18n
            },
            /*#__PURE__*/ y$1(Checkbox, {
                name: 'consentCheckbox',
                classNameModifiers: [...(props.classNameModifiers ??= []), 'consentCheckbox'],
                onInput: onChange,
                value: props?.data?.consentCheckbox,
                label: label,
                checked: props.checked
            })
        );
    }

    // Removes all non-digits
    const digitsOnlyFormatter = value => {
        return value.replace(/[^0-9]/g, '');
    };

    /**
     * Email regex follows https://en.wikipedia.org/wiki/Email_address.
     * It checks that the email address starts with a local part that includes letters, digits, and some special characters, optionally separated by periods.
     * Alternatively, the local part can be enclosed in quotes and include any characters except a new line.
     * This is followed by an `@` symbol and a domain name or an IP address enclosed in square brackets.
     * The domain name consists of one or more words separated by periods, where each word can include letters, digits, and hyphens. The top-level domain must consist of two or more letters.
     */ const email = // eslint-disable-next-line max-len
        /^(([a-z0-9!#$%&'*+\-/=?^_`{|}~]+(\.[a-z0-9!#$%&'*+\-/=?^_`{|}~]+)*)|(".+"))@((\[((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}])|([a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?(\.[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*\.([a-z]{2,})))$/i;
    /**
     * Telephone number regex
     */ const telephoneNumber = /^[+]*[(]{0,1}[0-9]{1,3}[)]{0,1}[-\s./0-9]*$/;

    const isDateOfBirthValid = value => {
        if (!value) return false;
        const rawValue = unformatDate(value);
        const ageDiff = Date.now() - Date.parse(rawValue);
        const age = new Date(ageDiff).getFullYear() - 1970;
        return age >= 18;
    };
    const isEmailValid = value => {
        if (isEmpty(value)) return null;
        return value.length >= 6 && value.length <= 320 && email.test(value);
    };
    const personalDetailsValidationRules = {
        default: {
            validate: value => {
                return value && value.length > 0;
            },
            errorMessage: 'error.va.gen.02',
            modes: ['blur']
        },
        gender: {
            validate: value => value && value.length > 0,
            errorMessage: 'gender.notselected',
            modes: ['blur']
        },
        firstName: {
            validate: value => (isEmpty(value) ? null : true),
            errorMessage: 'firstName.invalid',
            modes: ['blur']
        },
        lastName: {
            validate: value => (isEmpty(value) ? null : true),
            errorMessage: 'lastName.invalid',
            modes: ['blur']
        },
        dateOfBirth: {
            validate: value => (isEmpty(value) ? null : isDateOfBirthValid(value)),
            errorMessage: 'dateOfBirth.invalid',
            modes: ['blur']
        },
        telephoneNumber: {
            validate: value => (isEmpty(value) ? null : telephoneNumber.test(value)),
            errorMessage: 'telephoneNumber.invalid',
            modes: ['blur']
        },
        shopperEmail: {
            // If it's empty it's not in error, else, is it a valid email?
            validate: value => isEmailValid(value),
            errorMessage: 'shopperEmail.invalid',
            modes: ['blur']
        }
    };

    const bankAccountNumberRegEx = /^(\d){1,8}$/;
    const bankLocationIdRegEx = /^(\d){6}$/;
    const bacsValidationRules = {
        bankAccountNumber: {
            modes: ['blur', 'input'],
            validate: value => !!value && bankAccountNumberRegEx.test(value)
        },
        bankLocationId: [
            {
                modes: ['input'],
                validate: value => !!value && /^(\d){1,6}$/.test(value)
            },
            {
                modes: ['blur'],
                validate: value => !!value && bankLocationIdRegEx.test(value)
            }
        ],
        amountConsentCheckbox: {
            modes: ['blur'],
            validate: value => !!value
        },
        accountConsentCheckbox: {
            modes: ['blur'],
            validate: value => !!value
        },
        shopperEmail: personalDetailsValidationRules.shopperEmail,
        default: {
            modes: ['blur'],
            validate: value => !!value && value.length > 0
        }
    };
    const bacsFormatters = {
        bankAccountNumber: digitsOnlyFormatter,
        bankLocationId: digitsOnlyFormatter
    };

    const ENTER_STATE = 'enter-data';
    const CONFIRM_STATE = 'confirm-data';
    function BacsInput(props) {
        const { i18n } = useCoreContext();
        const getImage = useImage();
        const { handleChangeFor, triggerValidation, data, valid, errors, isValid } = useForm({
            schema: ['holderName', 'bankAccountNumber', 'bankLocationId', 'shopperEmail', 'amountConsentCheckbox', 'accountConsentCheckbox'],
            defaultData: props.data,
            formatters: bacsFormatters,
            rules: bacsValidationRules
        });
        const [status, setStatus] = h(ENTER_STATE);
        this.setStatus = setStatus;
        this.showValidation = triggerValidation;
        const handlePayButton = () => {
            if (!isValid) return this.showValidation();
            if (status === ENTER_STATE) {
                return this.setStatus(CONFIRM_STATE);
            } else if (status === CONFIRM_STATE) {
                return props.onSubmit();
            }
        };
        const handleEdit = () => {
            return this.setStatus(ENTER_STATE);
        };
        p(() => {
            props.onChange({
                data,
                valid,
                errors,
                isValid
            });
        }, [data, valid, errors, isValid]);
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: classNames({
                    'adyen-checkout__bacs': true,
                    'adyen-checkout__bacs--confirm': status === CONFIRM_STATE || status === 'loading'
                })
            },
            status == CONFIRM_STATE &&
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: classNames({
                            'adyen-checkout__bacs--edit': true,
                            'adyen-checkout__bacs--edit-dropin': props.isDropin
                        })
                    },
                    renderFormField('text', {
                        name: 'bacsEdit',
                        className: 'adyen-checkout__bacs--edit-button',
                        value: i18n.get('edit'),
                        'aria-label': i18n.get('edit'),
                        readonly: true,
                        onClick: handleEdit
                    })
                ),
            /*#__PURE__*/ y$1(
                Field,
                {
                    className: classNames({
                        'adyen-checkout__bacs--holder-name': true,
                        'adyen-checkout__field--inactive': status === CONFIRM_STATE || status === 'loading'
                    }),
                    label: i18n.get('bacs.accountHolderName'),
                    errorMessage: errors.holderName ? i18n.get('bacs.accountHolderName.invalid') : false,
                    isValid: valid.holderName,
                    name: 'accountHolderName',
                    i18n: i18n
                },
                renderFormField('text', {
                    name: 'bacs.accountHolderName',
                    className: 'adyen-checkout__bacs-input--holder-name',
                    placeholder: props.placeholders.holderName,
                    value: data.holderName,
                    'aria-invalid': !valid.holderName,
                    'aria-label': i18n.get('bacs.accountHolderName'),
                    'aria-required': 'true',
                    required: true,
                    readonly: status === CONFIRM_STATE || status === 'loading',
                    autocorrect: 'off',
                    onBlur: handleChangeFor('holderName', 'blur'),
                    onInput: handleChangeFor('holderName', 'input')
                })
            ),
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__bacs__num-id adyen-checkout__field-wrapper'
                },
                /*#__PURE__*/ y$1(
                    Field,
                    {
                        errorMessage: !!errors.bankAccountNumber && i18n.get('bacs.accountNumber.invalid'),
                        label: i18n.get('bacs.accountNumber'),
                        className: classNames({
                            'adyen-checkout__bacs--bank-account-number': true,
                            'adyen-checkout__field--inactive': status === CONFIRM_STATE || status === 'loading'
                        }),
                        classNameModifiers: ['col-70'],
                        isValid: valid.bankAccountNumber,
                        name: 'bankAccountNumber',
                        i18n: i18n
                    },
                    renderFormField('text', {
                        value: data.bankAccountNumber,
                        className: 'adyen-checkout__bacs-input--bank-account-number',
                        placeholder: props.placeholders.bankAccountNumber,
                        'aria-invalid': !valid.bankAccountNumber,
                        'aria-label': i18n.get('bacs.accountNumber'),
                        'aria-required': 'true',
                        required: true,
                        readonly: status === CONFIRM_STATE || status === 'loading',
                        autocorrect: 'off',
                        onBlur: handleChangeFor('bankAccountNumber', 'blur'),
                        onInput: handleChangeFor('bankAccountNumber', 'input')
                    })
                ),
                /*#__PURE__*/ y$1(
                    Field,
                    {
                        errorMessage: !!errors.bankLocationId && i18n.get('bacs.bankLocationId.invalid'),
                        label: i18n.get('bacs.bankLocationId'),
                        className: classNames({
                            'adyen-checkout__bacs--bank-location-id': true,
                            'adyen-checkout__field--inactive': status === CONFIRM_STATE || status === 'loading'
                        }),
                        classNameModifiers: ['col-30'],
                        isValid: valid.bankLocationId,
                        name: 'bankLocationId',
                        i18n: i18n
                    },
                    renderFormField('text', {
                        value: data.bankLocationId,
                        className: 'adyen-checkout__bacs-input--bank-location-id',
                        placeholder: props.placeholders.bankLocationId,
                        'aria-invalid': !valid.bankLocationId,
                        'aria-label': i18n.get('bacs.bankLocationId'),
                        'aria-required': 'true',
                        required: true,
                        readonly: status === CONFIRM_STATE || status === 'loading',
                        autocorrect: 'off',
                        onBlur: handleChangeFor('bankLocationId', 'blur'),
                        onInput: handleChangeFor('bankLocationId', 'input')
                    })
                )
            ),
            /*#__PURE__*/ y$1(
                Field,
                {
                    errorMessage: !!errors.shopperEmail && i18n.get('shopperEmail.invalid'),
                    label: i18n.get('shopperEmail'),
                    className: classNames({
                        'adyen-checkout__bacs--shopper-email': true,
                        'adyen-checkout__field--inactive': status === CONFIRM_STATE || status === 'loading'
                    }),
                    isValid: valid.shopperEmail,
                    name: 'emailAddress',
                    i18n: i18n
                },
                renderFormField('emailAddress', {
                    value: data.shopperEmail,
                    name: 'shopperEmail',
                    className: 'adyen-checkout__bacs-input--shopper-email',
                    classNameModifiers: ['large'],
                    placeholder: props.placeholders.shopperEmail,
                    spellcheck: false,
                    'aria-invalid': !valid.shopperEmail,
                    'aria-label': i18n.get('shopperEmail'),
                    'aria-required': 'true',
                    required: true,
                    readonly: status === CONFIRM_STATE || status === 'loading',
                    autocorrect: 'off',
                    onInput: handleChangeFor('shopperEmail', 'input'),
                    onBlur: handleChangeFor('shopperEmail', 'blur')
                })
            ),
            status === ENTER_STATE &&
                /*#__PURE__*/ y$1(ConsentCheckbox, {
                    classNameModifiers: ['amountConsentCheckbox'],
                    errorMessage: !!errors.amountConsentCheckbox,
                    label: i18n.get('bacs.consent.amount'),
                    onChange: handleChangeFor('amountConsentCheckbox'),
                    checked: !!data.amountConsentCheckbox,
                    i18n: i18n
                }),
            status === ENTER_STATE &&
                /*#__PURE__*/ y$1(ConsentCheckbox, {
                    classNameModifiers: ['accountConsentCheckbox'],
                    errorMessage: !!errors.accountConsentCheckbox,
                    label: i18n.get('bacs.consent.account'),
                    onChange: handleChangeFor('accountConsentCheckbox'),
                    checked: !!data.accountConsentCheckbox,
                    i18n: i18n
                }),
            props.showPayButton &&
                props.payButton({
                    status,
                    label:
                        status === ENTER_STATE
                            ? i18n.get('continue')
                            : `${i18n.get('bacs.confirm')} ${
                                  !!props.amount?.value && !!props.amount?.currency ? i18n.amount(props.amount.value, props.amount.currency) : ''
                              }`,
                    icon: getImage({
                        imageFolder: 'components/'
                    })('lock'),
                    onClick: handlePayButton
                })
        );
    }
    BacsInput.defaultProps = {
        data: {},
        placeholders: {}
    };

    function copyToClipboard(value) {
        function createInput(text) {
            const textArea = document.createElement('textArea');
            textArea.readOnly = true;
            textArea.value = text;
            document.body.appendChild(textArea);
            return textArea;
        }
        const copyInput = createInput(value);
        if (window.navigator.userAgent.match(/ipad|iphone/i)) {
            const range = document.createRange();
            range.selectNodeContents(copyInput);
            const selection = window.getSelection();
            selection.removeAllRanges();
            selection.addRange(range);
            copyInput.setSelectionRange(0, 999999);
        } else {
            copyInput.select();
        }
        document.execCommand('copy');
        document.body.removeChild(copyInput);
    }

    function Voucher({ voucherDetails = [], className = '', ...props }) {
        const { i18n, loadingContext } = useCoreContext();
        const getImage = useImage();
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: classNames('adyen-checkout__voucher-result', `adyen-checkout__voucher-result--${props.paymentMethodType}`, className)
            },
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__voucher-result__top'
                },
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__voucher-result__image'
                    },
                    !!props.imageUrl &&
                        /*#__PURE__*/ y$1(
                            'span',
                            {
                                className: 'adyen-checkout__voucher-result__image__wrapper'
                            },
                            /*#__PURE__*/ y$1('img', {
                                alt: props.paymentMethodType,
                                className: 'adyen-checkout__voucher-result__image__brand',
                                src: props.imageUrl
                            })
                        ),
                    !!props.issuerImageUrl &&
                        /*#__PURE__*/ y$1(
                            'span',
                            {
                                className: 'adyen-checkout__voucher-result__image__wrapper'
                            },
                            /*#__PURE__*/ y$1('img', {
                                alt: props.paymentMethodType,
                                className: 'adyen-checkout__voucher-result__image__issuer',
                                src: props.issuerImageUrl
                            })
                        )
                ),
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__voucher-result__introduction'
                    },
                    props.introduction,
                    ' ',
                    props.instructionsUrl &&
                        /*#__PURE__*/ y$1(
                            'a',
                            {
                                className: 'adyen-checkout__link adyen-checkout__link--voucher-result-instructions',
                                href: props.instructionsUrl,
                                target: '_blank',
                                rel: 'noopener noreferrer'
                            },
                            i18n.get('voucher.readInstructions'),
                            ' ›'
                        )
                ),
                props.amount &&
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            className: 'adyen-checkout__voucher-result__amount'
                        },
                        props.amount,
                        props.surcharge &&
                            /*#__PURE__*/ y$1(
                                'span',
                                {
                                    className: 'adyen-checkout__voucher-result__surcharge'
                                },
                                '(',
                                i18n.get('voucher.surcharge').replace('%@', props.surcharge),
                                ')'
                            )
                    )
            ),
            props.reference &&
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__voucher-result__separator'
                    },
                    /*#__PURE__*/ y$1('div', {
                        className: 'adyen-checkout__voucher-result__separator__inner'
                    }),
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            className: 'adyen-checkout__voucher-result__code__label'
                        },
                        /*#__PURE__*/ y$1(
                            'span',
                            {
                                className: 'adyen-checkout__voucher-result__code__label__text'
                            },
                            i18n.get('voucher.paymentReferenceLabel')
                        )
                    )
                ),
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__voucher-result__bottom'
                },
                props.reference &&
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            className: 'adyen-checkout__voucher-result__code'
                        },
                        props.barcode &&
                            /*#__PURE__*/ y$1('img', {
                                alt: i18n.get('voucher.paymentReferenceLabel'),
                                className: 'adyen-checkout__voucher-result__code__barcode',
                                src: props.barcode
                            }),
                        /*#__PURE__*/ y$1('span', null, props.reference)
                    ),
                (!!props.downloadUrl || !!props.copyBtn) &&
                    /*#__PURE__*/ y$1(
                        'ul',
                        {
                            className: 'adyen-checkout__voucher-result__actions'
                        },
                        !!props.copyBtn &&
                            /*#__PURE__*/ y$1(
                                'li',
                                {
                                    className: 'adyen-checkout__voucher-result__actions__item'
                                },
                                /*#__PURE__*/ y$1(Button, {
                                    inline: true,
                                    variant: 'action',
                                    onClick: (e, { complete }) => {
                                        copyToClipboard(props.reference);
                                        complete();
                                    },
                                    icon: getImage({
                                        loadingContext,
                                        imageFolder: 'components/'
                                    })('copy'),
                                    label: i18n.get('button.copy')
                                })
                            ),
                        !!props.downloadUrl &&
                            /*#__PURE__*/ y$1(
                                'li',
                                {
                                    className: 'adyen-checkout__voucher-result__actions__item'
                                },
                                /*#__PURE__*/ y$1(Button, {
                                    inline: true,
                                    variant: 'action',
                                    href: props.downloadUrl,
                                    icon: getImage({
                                        loadingContext,
                                        imageFolder: 'components/'
                                    })('download'),
                                    label: props.downloadButtonText || i18n.get('button.download'),
                                    target: '_blank',
                                    rel: 'noopener noreferrer'
                                })
                            )
                    ),
                /*#__PURE__*/ y$1(
                    'ul',
                    {
                        className: 'adyen-checkout__voucher-result__details'
                    },
                    voucherDetails
                        .filter(({ label, value }) => !!label && !!value)
                        .map(({ label, value }, index) =>
                            /*#__PURE__*/ y$1(
                                'li',
                                {
                                    key: index,
                                    className: 'adyen-checkout__voucher-result__details__item'
                                },
                                /*#__PURE__*/ y$1(
                                    'span',
                                    {
                                        className: 'adyen-checkout__voucher-result__details__label'
                                    },
                                    label
                                ),
                                /*#__PURE__*/ y$1(
                                    'span',
                                    {
                                        className: 'adyen-checkout__voucher-result__details__value'
                                    },
                                    value
                                )
                            )
                        )
                )
            )
        );
    }

    const BacsResult = props => {
        const { i18n, loadingContext } = useCoreContext();
        const getImage = useImage();
        const { url, paymentMethodType } = props;
        return /*#__PURE__*/ y$1(Voucher, {
            paymentMethodType: paymentMethodType,
            introduction: i18n.get('bacs.result.introduction'),
            imageUrl: getImage({
                loadingContext
            })(paymentMethodType),
            downloadUrl: url,
            downloadButtonText: i18n.get('download.pdf')
        });
    };

    class BacsElement extends UIElement {
        static type = 'directdebit_GB';
        formatData() {
            return {
                paymentMethod: {
                    type: BacsElement.type,
                    ...(this.state.data?.holderName && {
                        holderName: this.state.data.holderName
                    }),
                    ...(this.state.data?.bankAccountNumber && {
                        bankAccountNumber: this.state.data.bankAccountNumber
                    }),
                    ...(this.state.data?.bankLocationId && {
                        bankLocationId: this.state.data.bankLocationId
                    })
                },
                ...(this.state.data?.shopperEmail && {
                    shopperEmail: this.state.data.shopperEmail
                })
            };
        }
        get isValid() {
            return !!this.state.isValid;
        }
        payButton = props => {
            return /*#__PURE__*/ y$1(PayButton, {
                amount: this.props.amount,
                onClick: this.submit,
                ...props
            });
        };
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                this.props.url
                    ? /*#__PURE__*/ y$1(BacsResult, {
                          ref: ref => {
                              this.componentRef = ref;
                          },
                          icon: this.icon,
                          url: this.props.url,
                          paymentMethodType: this.props.paymentMethodType
                      })
                    : /*#__PURE__*/ y$1(BacsInput, {
                          ref: ref => {
                              this.componentRef = ref;
                          },
                          ...this.props,
                          onChange: this.setState,
                          payButton: this.payButton,
                          onSubmit: this.submit
                      })
            );
        }
    }

    /**
     * @internal
     * IBAN Countries, length, structure and examples
     */ const countries = {
        AD: {
            length: 24,
            structure: 'F04F04A12',
            example: 'AD9912345678901234567890'
        },
        AE: {
            length: 23,
            structure: 'F03F16',
            example: 'AE993331234567890123456'
        },
        AL: {
            length: 28,
            structure: 'F08A16',
            example: 'AL47212110090000000235698741'
        },
        AT: {
            length: 20,
            structure: 'F05F11',
            example: 'AT611904300234573201'
        },
        AZ: {
            length: 28,
            structure: 'U04A20',
            example: 'AZ21NABZ00000000137010001944'
        },
        BA: {
            length: 20,
            structure: 'F03F03F08F02',
            example: 'BA391290079401028494'
        },
        BE: {
            length: 16,
            structure: 'F03F07F02',
            example: 'BE68 5390 0754 7034'
        },
        BG: {
            length: 22,
            structure: 'U04F04F02A08',
            example: 'BG80BNBG96611020345678'
        },
        BH: {
            length: 22,
            structure: 'U04A14',
            example: 'BH67BMAG00001299123456'
        },
        BR: {
            length: 29,
            structure: 'F08F05F10U01A01',
            example: 'BR9700360305000010009795493P1'
        },
        CH: {
            length: 21,
            structure: 'F05A12',
            example: 'CH9300762011623852957'
        },
        CR: {
            length: 22,
            structure: 'F04F14',
            example: 'CR72012300000171549015'
        },
        CY: {
            length: 28,
            structure: 'F03F05A16',
            example: 'CY17002001280000001200527600'
        },
        CZ: {
            length: 24,
            structure: 'F04F06F10',
            example: 'CZ6508000000192000145399'
        },
        DE: {
            length: 22,
            structure: 'F08F10',
            example: 'DE00123456789012345678'
        },
        DK: {
            length: 18,
            structure: 'F04F09F01',
            example: 'DK5000400440116243'
        },
        DO: {
            length: 28,
            structure: 'U04F20',
            example: 'DO28BAGR00000001212453611324'
        },
        EE: {
            length: 20,
            structure: 'F02F02F11F01',
            example: 'EE382200221020145685'
        },
        ES: {
            length: 24,
            structure: 'F04F04F01F01F10',
            example: 'ES9121000418450200051332'
        },
        FI: {
            length: 18,
            structure: 'F06F07F01',
            example: 'FI2112345600000785'
        },
        FO: {
            length: 18,
            structure: 'F04F09F01',
            example: 'FO6264600001631634'
        },
        FR: {
            length: 27,
            structure: 'F05F05A11F02',
            example: 'FR1420041010050500013M02606'
        },
        GB: {
            length: 22,
            structure: 'U04F06F08',
            example: 'GB29NWBK60161331926819'
        },
        GE: {
            length: 22,
            structure: 'U02F16',
            example: 'GE29NB0000000101904917'
        },
        GI: {
            length: 23,
            structure: 'U04A15',
            example: 'GI75NWBK000000007099453'
        },
        GL: {
            length: 18,
            structure: 'F04F09F01',
            example: 'GL8964710001000206'
        },
        GR: {
            length: 27,
            structure: 'F03F04A16',
            example: 'GR1601101250000000012300695'
        },
        GT: {
            length: 28,
            structure: 'A04A20',
            example: 'GT82TRAJ01020000001210029690'
        },
        HR: {
            length: 21,
            structure: 'F07F10',
            example: 'HR1210010051863000160'
        },
        HU: {
            length: 28,
            structure: 'F03F04F01F15F01',
            example: 'HU42117730161111101800000000'
        },
        IE: {
            length: 22,
            structure: 'U04F06F08',
            example: 'IE29AIBK93115212345678'
        },
        IL: {
            length: 23,
            structure: 'F03F03F13',
            example: 'IL620108000000099999999'
        },
        IS: {
            length: 26,
            structure: 'F04F02F06F10',
            example: 'IS140159260076545510730339'
        },
        IT: {
            length: 27,
            structure: 'U01F05F05A12',
            example: 'IT60X0542811101000000123456'
        },
        KW: {
            length: 30,
            structure: 'U04A22',
            example: 'KW81CBKU0000000000001234560101'
        },
        KZ: {
            length: 20,
            structure: 'F03A13',
            example: 'KZ86125KZT5004100100'
        },
        LB: {
            length: 28,
            structure: 'F04A20',
            example: 'LB62099900000001001901229114'
        },
        LC: {
            length: 32,
            structure: 'U04F24',
            example: 'LC07HEMM000100010012001200013015'
        },
        LI: {
            length: 21,
            structure: 'F05A12',
            example: 'LI21088100002324013AA'
        },
        LT: {
            length: 20,
            structure: 'F05F11',
            example: 'LT121000011101001000'
        },
        LU: {
            length: 20,
            structure: 'F03A13',
            example: 'LU280019400644750000'
        },
        LV: {
            length: 21,
            structure: 'U04A13',
            example: 'LV80BANK0000435195001'
        },
        MC: {
            length: 27,
            structure: 'F05F05A11F02',
            example: 'MC5811222000010123456789030'
        },
        MD: {
            length: 24,
            structure: 'U02A18',
            example: 'MD24AG000225100013104168'
        },
        ME: {
            length: 22,
            structure: 'F03F13F02',
            example: 'ME25505000012345678951'
        },
        MK: {
            length: 19,
            structure: 'F03A10F02',
            example: 'MK07250120000058984'
        },
        MR: {
            length: 27,
            structure: 'F05F05F11F02',
            example: 'MR1300020001010000123456753'
        },
        MT: {
            length: 31,
            structure: 'U04F05A18',
            example: 'MT84MALT011000012345MTLCAST001S'
        },
        MU: {
            length: 30,
            structure: 'U04F02F02F12F03U03',
            example: 'MU17BOMM0101101030300200000MUR'
        },
        NL: {
            length: 18,
            structure: 'U04F10',
            example: 'NL99BANK0123456789'
        },
        NO: {
            length: 15,
            structure: 'F04F06F01',
            example: 'NO9386011117947'
        },
        PK: {
            length: 24,
            structure: 'U04A16',
            example: 'PK36SCBL0000001123456702'
        },
        PL: {
            length: 28,
            structure: 'F08F16',
            example: 'PL00123456780912345678901234'
        },
        PS: {
            length: 29,
            structure: 'U04A21',
            example: 'PS92PALS000000000400123456702'
        },
        PT: {
            length: 25,
            structure: 'F04F04F11F02',
            example: 'PT50000201231234567890154'
        },
        RO: {
            length: 24,
            structure: 'U04A16',
            example: 'RO49AAAA1B31007593840000'
        },
        RS: {
            length: 22,
            structure: 'F03F13F02',
            example: 'RS35260005601001611379'
        },
        SA: {
            length: 24,
            structure: 'F02A18',
            example: 'SA0380000000608010167519'
        },
        SE: {
            length: 24,
            structure: 'F03F16F01',
            example: 'SE4550000000058398257466'
        },
        SI: {
            length: 19,
            structure: 'F05F08F02',
            example: 'SI56263300012039086'
        },
        SK: {
            length: 24,
            structure: 'F04F06F10',
            example: 'SK3112000000198742637541'
        },
        SM: {
            length: 27,
            structure: 'U01F05F05A12',
            example: 'SM86U0322509800000000270100'
        },
        ST: {
            length: 25,
            structure: 'F08F11F02',
            example: 'ST68000100010051845310112'
        },
        TL: {
            length: 23,
            structure: 'F03F14F02',
            example: 'TL380080012345678910157'
        },
        TN: {
            length: 24,
            structure: 'F02F03F13F02',
            example: 'TN5910006035183598478831'
        },
        TR: {
            length: 26,
            structure: 'F05F01A16',
            example: 'TR330006100519786457841326'
        },
        VG: {
            length: 24,
            structure: 'U04F16',
            example: 'VG96VPVG0000012345678901'
        },
        XK: {
            length: 20,
            structure: 'F04F10F02',
            example: 'XK051212012345678906'
        },
        AO: {
            length: 25,
            structure: 'F21',
            example: 'AO69123456789012345678901'
        },
        BF: {
            length: 27,
            structure: 'F23',
            example: 'BF2312345678901234567890123'
        },
        BI: {
            length: 16,
            structure: 'F12',
            example: 'BI41123456789012'
        },
        BJ: {
            length: 28,
            structure: 'F24',
            example: 'BJ39123456789012345678901234'
        },
        CI: {
            length: 28,
            structure: 'U01F23',
            example: 'CI17A12345678901234567890123'
        },
        CM: {
            length: 27,
            structure: 'F23',
            example: 'CM9012345678901234567890123'
        },
        CV: {
            length: 25,
            structure: 'F21',
            example: 'CV30123456789012345678901'
        },
        DZ: {
            length: 24,
            structure: 'F20',
            example: 'DZ8612345678901234567890'
        },
        IR: {
            length: 26,
            structure: 'F22',
            example: 'IR861234568790123456789012'
        },
        JO: {
            length: 30,
            structure: 'A04F22',
            example: 'JO15AAAA1234567890123456789012'
        },
        MG: {
            length: 27,
            structure: 'F23',
            example: 'MG1812345678901234567890123'
        },
        ML: {
            length: 28,
            structure: 'U01F23',
            example: 'ML15A12345678901234567890123'
        },
        MZ: {
            length: 25,
            structure: 'F21',
            example: 'MZ25123456789012345678901'
        },
        QA: {
            length: 29,
            structure: 'U04A21',
            example: 'QA30AAAA123456789012345678901'
        },
        SN: {
            length: 28,
            structure: 'U01F23',
            example: 'SN52A12345678901234567890123'
        },
        UA: {
            length: 29,
            structure: 'F25',
            example: 'UA511234567890123456789012345'
        }
    };

    /**
     * Parse the BBAN structure used to configure each IBAN __specification and returns a matching regular expression.
     * A structure is composed of blocks of 3 characters (one letter and 2 digits). Each block represents
     * a logical group in the typical representation of the BBAN. For each group, the letter indicates which characters
     * are allowed in this group and the following 2-digits number tells the length of the group.
     *
     * @param structure - the structure to parse
     * @param countryCode - the countryCode to check format against
     *
     * @internal
     */ const parseStructure = (structure, countryCode) => {
        if (countryCode === null || !countries[countryCode] || !countries[countryCode].structure) {
            return false;
        }
        const passedStructure = countries[countryCode].structure;
        // split in blocks of 3 chars
        const regex = passedStructure.match(/(.{3})/g).map(block => {
            // parse each structure block (1-char + 2-digits)
            const pattern = block.slice(0, 1);
            const repeats = parseInt(block.slice(1), 10);
            let format;
            switch (pattern) {
                case 'A':
                    format = '0-9A-Za-z';
                    break;
                case 'B':
                    format = '0-9A-Z';
                    break;
                case 'C':
                    format = 'A-Za-z';
                    break;
                case 'F':
                    format = '0-9';
                    break;
                case 'L':
                    format = 'a-z';
                    break;
                case 'U':
                    format = 'A-Z';
                    break;
                case 'W':
                    format = '0-9a-z';
                    break;
            }
            return `([${format}]{${repeats}})`;
        });
        return new RegExp(`^${regex.join('')}$`);
    };
    /**
     * @internal
     */ const formatIban = iban =>
        iban
            .replace(/\W/gi, '')
            .replace(/(.{4})(?!$)/g, '$1 ')
            .trim();
    /**
     * Returns any non alphanumeric characters and uppercases them
     *
     * @internal
     */ const electronicFormat = iban => {
        const NON_ALPHANUM = /[^a-zA-Z0-9]/g;
        return iban.replace(NON_ALPHANUM, '').toUpperCase();
    };
    /**
     * Lazy-loaded regex (parse the structure and construct the regular expression the first time we need it for validation)
     *
     * @internal
     */ const regex = (iban, countryCode) => parseStructure(iban, countryCode);
    /**
     * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to
     * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.
     * @param ibanInput - The IBAN value
     * @returns The prepared IBAN
     *
     * @internal
     */ const iso13616Prepare = ibanInput => {
        let iban = ibanInput;
        const A = 'A'.charCodeAt(0);
        const Z = 'Z'.charCodeAt(0);
        iban = iban.toUpperCase();
        iban = iban.substr(4) + iban.substr(0, 4);
        return iban
            .split('')
            .map(n => {
                const code = n.charCodeAt(0);
                if (code >= A && code <= Z) {
                    // A = 10, B = 11, ... Z = 35
                    const codeA = code - A;
                    return codeA + 10;
                }
                return n;
            })
            .join('');
    };
    /**
     * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.
     *
     * @param iban -
     *
     * @internal
     */ const iso7064Mod97_10 = iban => {
        let remainder = iban;
        let block;
        while (remainder.length > 2) {
            block = remainder.slice(0, 9);
            remainder = (parseInt(block, 10) % 97) + remainder.slice(block.length);
        }
        return parseInt(remainder, 10) % 97;
    };
    /**
     *  @param countryCode -
     *  @returns Example of IBAN Number
     */ const getIbanPlaceHolder = (countryCode = null) => {
        if (countryCode && countries[countryCode] && countries[countryCode].example) {
            return formatIban(countries[countryCode].example);
        }
        return 'AB00 1234 5678 9012 3456 7890';
    };
    const getIbanCountrySpecification = countryCode => {
        if (countryCode && countries[countryCode]) {
            return countries[countryCode];
        }
        return false;
    };
    /**
     *  @param cursor -
     *  @param iban -
     *  @param previousIban -
     *  @returns new cursor position
     */ const getNextCursorPosition = (cursor, iban, previousIban) => {
        if (cursor === 0 || !iban.length) return 0;
        // This tells us how long the edit is. If user modified input from `(2__)` to `(243__)`,
        // we know the user in this instance pasted two characters
        const editLength = iban.length - previousIban.length;
        const isAddition = editLength > 0;
        const isMaskChar = (ibanValue, position) => /\s/.test(ibanValue.charAt(position));
        const initialCursor = cursor - editLength;
        // is adding text, check calculate if there was a mask element after the initial cursor, then move cursor forward
        // example: NL13 ABNA| 1234 5678 9 => NL13 ABNA 0|123 4567 89
        if (isAddition && (isMaskChar(iban, initialCursor + 1) || isMaskChar(iban, initialCursor))) {
            return cursor + 1;
        }
        // is removing text, check if the previous is a mask character, then move cursor back
        // example: NL13 ABNA 0|123 4567 89 => NL13 ABNA| 1234 5678 9
        if (!isAddition && isMaskChar(iban, cursor - 1)) {
            return cursor - 1;
        }
        return cursor;
    };
    /**
     * @param electronicFormatIban -
     * @returns countryCode string
     */ const getCountryCode = electronicFormatIban => electronicFormatIban.slice(0, 2);

    /**
     * Contains a validation status
     * @internal
     * @param status -
     * @param code -
     */ function ValidationStatus(status, code = null) {
        this.status = status;
        this.code = code;
    }
    /**
     * Validates the format of an iban
     * @internal
     * @param iban -
     */ const checkIbanStructure = iban => {
        const countryCode = iban.slice(0, 2);
        const ibanRegex = regex(iban, countryCode);
        return (ibanRegex.test && ibanRegex.test(iban.slice(4))) || false;
    };
    /**
     * Checks validity of an IBAN
     * @param iban -
     */ const isValidIBAN = iban => {
        const electronicFormatIban = electronicFormat(iban);
        const preparedIban = iso13616Prepare(electronicFormatIban);
        const isValidISO = iso7064Mod97_10(preparedIban) === 1;
        return isValidISO && checkIbanStructure(electronicFormatIban);
    };
    /**
     * Checkss the validity status of an IBAN
     * @param iban -
     */ const checkIbanStatus = iban => {
        const electronicFormatIban = electronicFormat(iban);
        if (iban.length < 2) {
            return new ValidationStatus('no-validate', 'TOO_SHORT'); // A
        }
        const countryCode = getCountryCode(electronicFormatIban);
        const countrySpecification = getIbanCountrySpecification(countryCode);
        if (!countrySpecification) {
            return new ValidationStatus('invalid', 'INVALID_COUNTRY'); // AA13TEST0123456789
        }
        if (electronicFormatIban.length > countrySpecification.length) {
            return new ValidationStatus('invalid', 'TOO_LONG'); // NL13TEST01234567891
        }
        if (electronicFormatIban.length === countrySpecification.length) {
            if (isValidIBAN(iban)) {
                return new ValidationStatus('valid', 'VALID'); // NL13TEST0123456789
            }
            return new ValidationStatus('invalid', 'INVALID_IBAN'); // NL13TEST0123456781
        }
        return new ValidationStatus('no-validate', 'UNKNOWN'); // NL13TEST012345678
    };
    /**
     * Checks validity of a holder name
     */ const isValidHolder = value => (isEmpty(value) ? null : true); // true, if there are chars other than spaces

    const ibanHolderNameErrorObj = {
        isValid: false,
        errorMessage: 'ach.accountHolderNameField.invalid',
        error: 'ach.accountHolderNameField.invalid'
    };
    const ibanErrorObj = {
        isValid: false,
        errorMessage: 'sepaDirectDebit.ibanField.invalid',
        error: 'sepaDirectDebit.ibanField.invalid'
    };
    class IbanInput extends k$1 {
        ibanNumber;
        constructor(props) {
            super(props);
            this.state = {
                status: 'ready',
                data: {
                    ownerName: props?.data?.ownerName || '',
                    ibanNumber: props?.data?.ibanNumber || '',
                    countryCode: props?.data?.countryCode || ''
                },
                isValid: false,
                cursor: 0,
                errors: {},
                valid: {}
            };
            if (this.state.data['ibanNumber']) {
                const electronicFormatIban = electronicFormat(this.state.data['ibanNumber']); // example: NL13TEST0123456789
                this.state.data['ibanNumber'] = formatIban(electronicFormatIban); // example: NL13 TEST 0123 4567 89
            }
            if (this.state.data['ibanNumber'] || this.state.data['ownerName']) {
                const holderNameValid = this.props.holderName ? isValidHolder(this.state.data['ownerName']) : '';
                const ibanValid = this.state.data['ibanNumber'] ? checkIbanStatus(this.state.data['ibanNumber']).status === 'valid' : '';
                const isValid = ibanValid && holderNameValid;
                const data = {
                    data: this.state.data,
                    isValid
                };
                this.props.onChange(data);
            }
        }
        static defaultProps = {
            onChange: () => {},
            countryCode: null,
            holderName: true,
            placeholders: {},
            label: null
        };
        setStatus(status) {
            this.setState({
                status
            });
        }
        onChange() {
            const holderNameValid = this.props.holderName ? isValidHolder(this.state.data['ownerName']) : true;
            const ibanValid = checkIbanStatus(this.state.data['ibanNumber']).status === 'valid';
            const isValid = ibanValid && holderNameValid;
            const data = {
                data: this.state.data,
                isValid,
                errors: this.state.errors
            };
            this.props.onChange(data);
        }
        setData = (key, value, cb) => {
            this.setState(
                prevState => ({
                    data: {
                        ...prevState.data,
                        [key]: value
                    }
                }),
                cb
            );
        };
        setError = (key, value, cb) => {
            this.setState(
                prevState => ({
                    errors: {
                        ...prevState.errors,
                        [key]: value
                    }
                }),
                cb
            );
        };
        setValid = (key, value, cb) => {
            this.setState(
                prevState => ({
                    valid: {
                        ...prevState.valid,
                        [key]: value
                    }
                }),
                cb
            );
        };
        handleHolderInput = holder => {
            this.setState(
                prevState => ({
                    data: {
                        ...prevState.data,
                        ownerName: holder
                    }
                }),
                () => {
                    const holderStatus = isValidHolder(this.state.data['ownerName']);
                    const holderErr =
                        holderStatus != null && !holderStatus // *don't* consider null, i.e. a value that has just been deleted, to be in error
                            ? ibanHolderNameErrorObj
                            : null;
                    this.setError('holder', holderErr, this.onChange);
                }
            );
        };
        handleIbanInput = e => {
            const inputValue = e.target.value;
            const electronicFormatIban = electronicFormat(inputValue); // example: NL13TEST0123456789
            const iban = formatIban(electronicFormatIban); // example: NL13 TEST 0123 4567 89
            const validationStatus = checkIbanStatus(iban).status;
            const countryCode = getCountryCode(electronicFormatIban);
            // calculate cursor's new position
            const cursor = e.target.selectionStart;
            const previousIban = this.state.data['ibanNumber'];
            const newCursorPosition = getNextCursorPosition(cursor, iban, previousIban);
            this.setState(
                prevState => ({
                    data: {
                        ...prevState.data,
                        ibanNumber: iban,
                        countryCode: countryCode
                    },
                    errors: {
                        ...prevState.errors,
                        iban: validationStatus === 'invalid' ? ibanErrorObj : null
                    },
                    valid: {
                        ...prevState.valid,
                        iban: validationStatus === 'valid'
                    }
                }),
                () => {
                    e.target.setSelectionRange(newCursorPosition, newCursorPosition);
                    this.onChange();
                }
            );
        };
        handleIbanBlur = e => {
            const currentIban = e.target.value;
            if (currentIban.length > 0) {
                const validationStatus = checkIbanStatus(currentIban).status;
                this.setError('iban', validationStatus !== 'valid' ? ibanErrorObj : null, this.onChange);
            } else {
                // Empty field is not in error
                this.setError('iban', null, this.onChange);
            }
        };
        showValidation() {
            const validationStatus = checkIbanStatus(this.state.data['ibanNumber']).status;
            const holderStatus = isValidHolder(this.state.data['ownerName']);
            this.setError('iban', validationStatus !== 'valid' ? ibanErrorObj : null);
            const holderErr = !holderStatus // *do* consider null, i.e. an empty field, to be in error
                ? ibanHolderNameErrorObj
                : null;
            this.setError('holder', holderErr, this.onChange); // add callback param to force propagation of state to parent comp
        }
        render({ placeholders, countryCode }, { data, errors, valid }) {
            const { i18n } = useCoreContext();
            return /*#__PURE__*/ y$1(
                Fieldset,
                {
                    classNameModifiers: ['iban-input'],
                    label: this.props.label
                },
                this.props.holderName &&
                    /*#__PURE__*/ y$1(
                        Field,
                        {
                            className: 'adyen-checkout__field--owner-name',
                            label: i18n.get('sepa.ownerName'),
                            filled: data['ownerName'] && data['ownerName'].length,
                            errorMessage: errors.holder ? i18n.get(errors.holder.error) : false,
                            dir: 'ltr',
                            i18n: i18n,
                            name: 'ownerName'
                        },
                        renderFormField('text', {
                            name: 'ownerName',
                            className: 'adyen-checkout__iban-input__owner-name',
                            placeholder: 'ownerName' in placeholders ? placeholders.ownerName : i18n.get('sepaDirectDebit.nameField.placeholder'),
                            value: data['ownerName'],
                            'aria-invalid': !!this.state.errors.holder,
                            'aria-label': i18n.get('sepa.ownerName'),
                            onInput: e => this.handleHolderInput(e.target.value),
                            onBlur: e => this.handleHolderInput(e.target.value)
                        })
                    ),
                /*#__PURE__*/ y$1(
                    Field,
                    {
                        className: 'adyen-checkout__field--iban-number',
                        label: i18n.get('sepa.ibanNumber'),
                        errorMessage: errors.iban ? i18n.get(errors.iban.error) : false,
                        filled: data['ibanNumber'] && data['ibanNumber'].length,
                        isValid: valid.iban,
                        onBlur: this.handleIbanBlur,
                        dir: 'ltr',
                        i18n: i18n,
                        name: 'ibanNumber'
                    },
                    renderFormField('text', {
                        ref: ref => {
                            this.ibanNumber = ref;
                        },
                        name: 'ibanNumber',
                        className: 'adyen-checkout__iban-input__iban-number',
                        classNameModifiers: ['large'],
                        placeholder: 'ibanNumber' in placeholders ? placeholders.ibanNumber : getIbanPlaceHolder(countryCode),
                        value: data['ibanNumber'],
                        onInput: this.handleIbanInput,
                        'aria-invalid': !!this.state.errors.iban,
                        'aria-label': i18n.get('sepa.ibanNumber'),
                        autocorrect: 'off',
                        spellcheck: false
                    })
                ),
                this.props.showPayButton &&
                    this.props.payButton({
                        status: this.state.status
                    })
            );
        }
    }

    /**
     * SepaElement
     */ class SepaElement extends UIElement {
        static type = 'sepadirectdebit';
        /**
         * Formats props on construction time
         */ formatProps(props) {
            return {
                holderName: true,
                ...props
            };
        }
        /**
         * Formats the component data output
         */ formatData() {
            return {
                paymentMethod: {
                    type: SepaElement.type,
                    iban: this.state.data['ibanNumber'],
                    ownerName: this.state.data['ownerName']
                }
            };
        }
        /**
         * Returns whether the component state is valid or not
         */ get isValid() {
            return !!this.state.isValid;
        }
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(IbanInput, {
                    ref: ref => {
                        this.componentRef = ref;
                    },
                    ...this.props,
                    onChange: this.setState,
                    onSubmit: this.submit,
                    payButton: this.payButton
                })
            );
        }
    }

    const ReadOnlyCompanyDetails = ({ data }) => {
        const { name, registrationNumber } = data;
        return /*#__PURE__*/ y$1(
            Fieldset,
            {
                classNameModifiers: ['companyDetails'],
                label: 'companyDetails',
                readonly: true
            },
            name && `${name} `,
            registrationNumber && `${registrationNumber} `
        );
    };

    const companyDetailsValidationRules = {
        default: {
            validate: value => {
                return value && value.length > 0;
            },
            modes: ['blur'],
            errorMessage: 'error.va.gen.01' // = "Incomplete field"
        },
        name: {
            validate: value => (isEmpty(value) ? null : true),
            errorMessage: 'companyDetails.name.invalid',
            modes: ['blur']
        },
        registrationNumber: {
            validate: value => (isEmpty(value) ? null : true),
            errorMessage: 'companyDetails.registrationNumber.invalid',
            modes: ['blur']
        }
    };

    const getFormattedData$1 = data => {
        const { name, registrationNumber } = data;
        return {
            ...((name || registrationNumber) && {
                company: {
                    ...(name && {
                        name
                    }),
                    ...(registrationNumber && {
                        registrationNumber
                    })
                }
            })
        };
    };

    const COMPANY_DETAILS_SCHEMA = ['name', 'registrationNumber'];
    function CompanyDetails(props) {
        const { label = '', namePrefix, requiredFields, visibility } = props;
        const { i18n } = useCoreContext();
        const { handleChangeFor, triggerValidation, data, valid, errors, isValid } = useForm({
            schema: requiredFields,
            rules: {
                ...companyDetailsValidationRules,
                ...props.validationRules
            },
            defaultData: props.data
        });
        /** An object by which to expose 'public' members to the parent UIElement */ const companyDetailsRef = _({});
        // Just call once
        if (!Object.keys(companyDetailsRef.current).length) {
            props.setComponentRef?.(companyDetailsRef.current);
        }
        // Expose method expected by (parent) Address.tsx
        companyDetailsRef.current.showValidation = () => {
            triggerValidation();
        };
        const generateFieldName = name => `${namePrefix ? `${namePrefix}.` : ''}${name}`;
        const eventHandler = mode => e => {
            const { name } = e.target;
            const key = name.split(`${namePrefix}.`).pop();
            handleChangeFor(key, mode)(e);
        };
        p(() => {
            const formattedData = getFormattedData$1(data);
            props.onChange({
                data: formattedData,
                valid,
                errors,
                isValid
            });
        }, [data, valid, errors, isValid]);
        if (visibility === 'hidden') return null;
        if (visibility === 'readOnly')
            return /*#__PURE__*/ y$1(ReadOnlyCompanyDetails, {
                ...props,
                data: data
            });
        return /*#__PURE__*/ y$1(
            Fieldset,
            {
                classNameModifiers: [label],
                label: label
            },
            requiredFields.includes('name') &&
                /*#__PURE__*/ y$1(
                    Field,
                    {
                        label: i18n.get('companyDetails.name'),
                        classNameModifiers: ['name'],
                        errorMessage: !!errors.name,
                        i18n: i18n
                    },
                    renderFormField('text', {
                        name: generateFieldName('name'),
                        value: data.name,
                        classNameModifiers: ['name'],
                        onInput: eventHandler('input'),
                        onBlur: eventHandler('blur'),
                        spellCheck: false
                    })
                ),
            requiredFields.includes('registrationNumber') &&
                /*#__PURE__*/ y$1(
                    Field,
                    {
                        label: i18n.get('companyDetails.registrationNumber'),
                        classNameModifiers: ['registrationNumber'],
                        errorMessage: !!errors.registrationNumber,
                        i18n: i18n
                    },
                    renderFormField('text', {
                        name: generateFieldName('registrationNumber'),
                        value: data.registrationNumber,
                        classNameModifiers: ['registrationNumber'],
                        onInput: eventHandler('input'),
                        onBlur: eventHandler('blur'),
                        spellCheck: false
                    })
                )
        );
    }
    CompanyDetails.defaultProps = {
        data: {},
        onChange: () => {},
        visibility: 'editable',
        requiredFields: COMPANY_DETAILS_SCHEMA,
        validationRules: companyDetailsValidationRules
    };

    const ReadOnlyPersonalDetails = ({ data }) => {
        const { firstName, lastName, shopperEmail, telephoneNumber } = data;
        return /*#__PURE__*/ y$1(
            Fieldset,
            {
                classNameModifiers: ['personalDetails'],
                label: 'personalDetails',
                readonly: true
            },
            firstName && `${firstName} `,
            lastName && `${lastName} `,
            shopperEmail && /*#__PURE__*/ y$1(_$1, null, /*#__PURE__*/ y$1('br', null), shopperEmail),
            telephoneNumber && /*#__PURE__*/ y$1(_$1, null, /*#__PURE__*/ y$1('br', null), telephoneNumber)
        );
    };

    const getFormattedData = data => {
        const { firstName, lastName, gender, dateOfBirth, shopperEmail, telephoneNumber } = data;
        return {
            ...((firstName || lastName) && {
                shopperName: {
                    ...(firstName && {
                        firstName
                    }),
                    ...(lastName && {
                        lastName
                    }),
                    ...(gender && {
                        gender
                    })
                }
            }),
            ...(dateOfBirth && {
                dateOfBirth: unformatDate(dateOfBirth)
            }),
            ...(shopperEmail && {
                shopperEmail
            }),
            ...(telephoneNumber && {
                telephoneNumber
            })
        };
    };
    /**
     * Used by the SRPanel sorting function to tell it whether we need to prepend the field type to the SR panel message, and, if so, we retrieve the correct translation for the field type.
     * (Whether we need to prepend the field type depends on whether we know that the error message correctly reflects the label of the field. Ultimately all error messages should do this
     * and this mapping fn will become redundant)
     */ const mapFieldKey$1 = (key, i18n) => {
        switch (key) {
            case 'gender':
            case 'dateOfBirth':
                return i18n.get(key);
            // We know that the translated error messages do contain a reference to the field they refer to, so we won't need to map them
            default:
                return null;
        }
    };

    const PERSONAL_DETAILS_SCHEMA = ['firstName', 'lastName', 'gender', 'dateOfBirth', 'shopperEmail', 'telephoneNumber'];
    function PersonalDetails(props) {
        const { label = '', namePrefix, placeholders, requiredFields, visibility } = props;
        const { i18n } = useCoreContext();
        /** An object by which to expose 'public' members to the parent UIElement */ const personalDetailsRef = _({});
        // Just call once
        if (!Object.keys(personalDetailsRef.current).length) {
            props.setComponentRef?.(personalDetailsRef.current);
        }
        const isDateInputSupported = F(checkDateInputSupport, []);
        const { handleChangeFor, triggerValidation, data, valid, errors, isValid } = useForm({
            schema: requiredFields,
            // Ensure any passed validation rules are merged with the default ones
            rules: {
                ...personalDetailsValidationRules,
                ...props.validationRules
            },
            defaultData: props.data
        });
        // Expose method expected by (parent) PersonalDetails.tsx
        personalDetailsRef.current.showValidation = () => {
            triggerValidation();
        };
        const eventHandler = mode => e => {
            const { name } = e.target;
            const key = name.split(`${namePrefix}.`).pop();
            handleChangeFor(key, mode)(e);
        };
        const generateFieldName = name => `${namePrefix ? `${namePrefix}.` : ''}${name}`;
        const getErrorMessage = error => (error && error.errorMessage ? i18n.get(error.errorMessage) : !!error);
        p(() => {
            const formattedData = getFormattedData(data);
            props.onChange({
                data: formattedData,
                valid,
                errors,
                isValid
            });
        }, [data, valid, errors, isValid]);
        if (visibility === 'hidden') return null;
        if (visibility === 'readOnly')
            return /*#__PURE__*/ y$1(ReadOnlyPersonalDetails, {
                ...props,
                data: data
            });
        return /*#__PURE__*/ y$1(
            _$1,
            null,
            /*#__PURE__*/ y$1(
                Fieldset,
                {
                    classNameModifiers: ['personalDetails'],
                    label: label
                },
                requiredFields.includes('firstName') &&
                    /*#__PURE__*/ y$1(
                        Field,
                        {
                            label: i18n.get('firstName'),
                            classNameModifiers: ['col-50', 'firstName'],
                            errorMessage: getErrorMessage(errors.firstName),
                            name: 'firstName',
                            i18n: i18n
                        },
                        renderFormField('text', {
                            name: generateFieldName('firstName'),
                            value: data.firstName,
                            classNameModifiers: ['firstName'],
                            onInput: eventHandler('input'),
                            onBlur: eventHandler('blur'),
                            placeholder: placeholders.firstName,
                            spellCheck: false,
                            required: true
                        })
                    ),
                requiredFields.includes('lastName') &&
                    /*#__PURE__*/ y$1(
                        Field,
                        {
                            label: i18n.get('lastName'),
                            classNameModifiers: ['col-50', 'lastName'],
                            errorMessage: getErrorMessage(errors.lastName),
                            name: 'lastName',
                            i18n: i18n
                        },
                        renderFormField('text', {
                            name: generateFieldName('lastName'),
                            value: data.lastName,
                            classNameModifiers: ['lastName'],
                            onInput: eventHandler('input'),
                            onBlur: eventHandler('blur'),
                            placeholder: placeholders.lastName,
                            spellCheck: false,
                            required: true
                        })
                    ),
                requiredFields.includes('gender') &&
                    /*#__PURE__*/ y$1(
                        Field,
                        {
                            errorMessage: getErrorMessage(errors.gender),
                            classNameModifiers: ['gender'],
                            name: 'gender',
                            useLabelElement: false
                        },
                        renderFormField('radio', {
                            i18n,
                            name: generateFieldName('gender'),
                            value: data.gender,
                            items: [
                                {
                                    id: 'MALE',
                                    name: 'male'
                                },
                                {
                                    id: 'FEMALE',
                                    name: 'female'
                                }
                            ],
                            classNameModifiers: ['gender'],
                            onInput: eventHandler('input'),
                            onChange: eventHandler('blur'),
                            required: true
                        })
                    ),
                requiredFields.includes('dateOfBirth') &&
                    /*#__PURE__*/ y$1(
                        Field,
                        {
                            label: i18n.get('dateOfBirth'),
                            classNameModifiers: ['col-50', 'lastName'],
                            errorMessage: getErrorMessage(errors.dateOfBirth),
                            helper: isDateInputSupported ? null : i18n.get('dateOfBirth.format'),
                            name: 'dateOfBirth',
                            i18n: i18n
                        },
                        renderFormField('date', {
                            name: generateFieldName('dateOfBirth'),
                            value: data.dateOfBirth,
                            classNameModifiers: ['dateOfBirth'],
                            onInput: eventHandler('input'),
                            onBlur: eventHandler('blur'),
                            placeholder: placeholders.dateOfBirth,
                            required: true
                        })
                    ),
                requiredFields.includes('shopperEmail') &&
                    /*#__PURE__*/ y$1(
                        Field,
                        {
                            label: i18n.get('shopperEmail'),
                            classNameModifiers: ['shopperEmail'],
                            errorMessage: getErrorMessage(errors.shopperEmail),
                            dir: 'ltr',
                            name: 'emailAddress',
                            i18n: i18n
                        },
                        renderFormField('emailAddress', {
                            name: generateFieldName('shopperEmail'),
                            value: data.shopperEmail,
                            classNameModifiers: ['shopperEmail'],
                            onInput: eventHandler('input'),
                            onBlur: eventHandler('blur'),
                            placeholder: placeholders.shopperEmail,
                            required: true
                        })
                    ),
                requiredFields.includes('telephoneNumber') &&
                    /*#__PURE__*/ y$1(
                        Field,
                        {
                            label: i18n.get('telephoneNumber'),
                            classNameModifiers: ['telephoneNumber'],
                            errorMessage: getErrorMessage(errors.telephoneNumber),
                            dir: 'ltr',
                            name: 'telephoneNumber',
                            i18n: i18n
                        },
                        renderFormField('tel', {
                            name: generateFieldName('telephoneNumber'),
                            value: data.telephoneNumber,
                            classNameModifiers: ['telephoneNumber'],
                            onInput: eventHandler('input'),
                            onBlur: eventHandler('blur'),
                            placeholder: placeholders.telephoneNumber,
                            required: true
                        })
                    )
            ),
            props.showPayButton &&
                props.payButton({
                    label: i18n.get('continue')
                })
        );
    }
    PersonalDetails.defaultProps = {
        data: {},
        onChange: () => {},
        placeholders: {},
        requiredFields: PERSONAL_DETAILS_SCHEMA,
        validationRules: personalDetailsValidationRules,
        visibility: 'editable'
    };

    const fieldsetsSchema = ['companyDetails', 'personalDetails', 'billingAddress', 'deliveryAddress', 'bankAccount'];
    const isPrefilled = (fieldsetData = {}) => Object.keys(fieldsetData).length > 1;
    const getActiveFieldsData = (activeFieldsets, data) =>
        Object.keys(data)
            .filter(fieldset => activeFieldsets[fieldset])
            .reduce((acc, cur) => {
                acc[cur] = data[cur];
                return acc;
            }, {});
    const getInitialActiveFieldsets = (visibility, data = {}) =>
        fieldsetsSchema.reduce((acc, fieldset) => {
            const isVisible = visibility[fieldset] !== 'hidden';
            const isDeliveryAddress = fieldset === 'deliveryAddress';
            const billingAddressIsHidden = visibility?.billingAddress === 'hidden';
            // The delivery address will be active not only when set as visible
            // but also when the billing address is hidden or when it has prefilled data
            acc[fieldset] = isVisible && (!isDeliveryAddress || billingAddressIsHidden || isPrefilled(data[fieldset]));
            return acc;
        }, {});
    /**
     * Used by the SRPanel sorting function to tell it whether we need to prepend the field type to the SR panel message, and, if so, we retrieve the correct translation for the field type.
     * (Whether we need to prepend the field type depends on whether we know that the error message correctly reflects the label of the field. Ultimately all error messages should do this
     * and this mapping fn will become redundant)
     */ const mapFieldKey = (key, i18n, countrySpecificLabels) => {
        let refKey = key;
        let label;
        // Differentiate between address types (billing and delivery)
        const splitKey = refKey.split(':');
        const hasSplitKey = splitKey.length > 1;
        if (hasSplitKey) {
            label = splitKey[0];
            refKey = splitKey[1];
        }
        const addressKey = mapFieldKey$2(refKey, i18n, countrySpecificLabels);
        if (addressKey) return hasSplitKey ? `${i18n.get(label)} ${addressKey}` : addressKey;
        // Personal details related
        switch (refKey) {
            case 'gender':
            case 'dateOfBirth':
                return mapFieldKey$1(refKey, i18n);
        }
        // We know that the translated error messages do contain a reference to the field they refer to, so we won't need to map them
        return null;
    };

    /**
     * Generic function to set focus on named element
     * @param holder -
     * @param fieldToFocus -
     */ const setFocusOnField = (holder, fieldToFocus) => {
        const pdHolder = selectOne(document, holder);
        const actualFieldToFocus = fieldToFocus === 'issuer' ? 'issuer-list' : fieldToFocus;
        if (actualFieldToFocus === 'country' || actualFieldToFocus === 'stateOrProvince' || actualFieldToFocus === 'issuer-list') {
            // Set focus on dropdown
            const field = selectOne(pdHolder, `.adyen-checkout__field--${actualFieldToFocus} .adyen-checkout__filter-input`);
            field?.focus();
        } else {
            // Set focus on input
            const field = selectOne(pdHolder, `[name="${actualFieldToFocus}"]`);
            field?.focus();
        }
    };

    const consentCBErrorObj = {
        isValid: false,
        errorMessage: 'consent.checkbox.invalid',
        error: 'consent.checkbox.invalid'
    };
    function OpenInvoice(props) {
        const { countryCode, visibility } = props;
        const { i18n } = useCoreContext();
        /** An object by which to expose 'public' members to the parent UIElement */ const openInvoiceRef = _({});
        // Just call once
        if (!Object.keys(openInvoiceRef.current).length) {
            props.setComponentRef?.(openInvoiceRef.current);
        }
        const isValidating = _(false);
        /** SR stuff */ const { setSRMessagesFromObjects, setSRMessagesFromStrings, clearSRPanel, shouldMoveFocusSR } = useSRPanelContext();
        // Generate a setSRMessages function - implemented as a partial, since the initial set of arguments don't change.
        const setSRMessages = setSRMessagesFromObjects?.({
            fieldTypeMappingFn: mapFieldKey
        });
        const specifications = F(() => new Specifications(), []);
        /** end SR stuff */ const initialActiveFieldsets = getInitialActiveFieldsets(visibility, props.data);
        const [activeFieldsets, setActiveFieldsets] = h(initialActiveFieldsets);
        const { current: fieldsetsRefs } = _(
            fieldsetsSchema.reduce((acc, fieldset) => {
                acc[fieldset] = ref => {
                    fieldsetsRefs[fieldset].current = ref;
                };
                return acc;
            }, {})
        );
        const checkFieldsets = () => Object.keys(activeFieldsets).every(fieldset => !activeFieldsets[fieldset] || !!valid[fieldset]);
        const hasConsentCheckbox = !!props.consentCheckboxLabel;
        const isStandAloneButton = !hasConsentCheckbox && Object.keys(activeFieldsets).every(key => !activeFieldsets[key]);
        const showSeparateDeliveryAddressCheckbox = visibility.deliveryAddress === 'editable' && visibility.billingAddress !== 'hidden';
        const [data, setData] = h({
            ...props.data,
            ...(hasConsentCheckbox && {
                consentCheckbox: false
            })
        });
        const [errors, setErrors] = h({});
        const [valid, setValid] = h({});
        const [status, setStatus] = h('ready');
        // Relates to onBlur errors
        const [sortedErrorList, setSortedErrorList] = h(null);
        // Expose methods expected by parent
        openInvoiceRef.current.showValidation = () => {
            isValidating.current = true;
            fieldsetsSchema.forEach(fieldset => {
                if (fieldsetsRefs[fieldset].current) fieldsetsRefs[fieldset].current.showValidation();
            });
            setErrors({
                ...(hasConsentCheckbox && {
                    consentCheckbox: data.consentCheckbox ? null : consentCBErrorObj
                })
            });
        };
        openInvoiceRef.current.setStatus = setStatus;
        // Get the previous value (Relates to onBlur errors)
        const previousSortedErrors = usePrevious(sortedErrorList);
        p(() => {
            const fieldsetsAreValid = checkFieldsets();
            const consentCheckboxValid = !hasConsentCheckbox || !!valid.consentCheckbox;
            const isValid = fieldsetsAreValid && consentCheckboxValid;
            const newData = getActiveFieldsData(activeFieldsets, data);
            const DELIVERY_ADDRESS_PREFIX = 'deliveryAddress:';
            /** Create messages for SRPanel */ // Extract nested errors from the various child components...
            const {
                companyDetails: extractedCompanyDetailsErrors,
                personalDetails: extractedPersonalDetailsErrors,
                bankAccount: extractedBankAccountErrors,
                billingAddress: extractedBillingAddressErrors,
                deliveryAddress: extractedDeliveryAddressErrors,
                ...remainingErrors
            } = errors;
            // (Differentiate between billingAddress and deliveryAddress errors by adding a prefix to the latter)
            const enhancedDeliveryAddressErrors = enhanceErrorObjectKeys(extractedDeliveryAddressErrors, DELIVERY_ADDRESS_PREFIX);
            // ...and then collate the errors into a new object so that they all sit at top level
            const errorsForPanel = {
                ...(typeof extractedCompanyDetailsErrors === 'object' && extractedCompanyDetailsErrors),
                ...(typeof extractedPersonalDetailsErrors === 'object' && extractedPersonalDetailsErrors),
                ...(typeof extractedBankAccountErrors === 'object' && extractedBankAccountErrors),
                ...(typeof extractedBillingAddressErrors === 'object' && extractedBillingAddressErrors),
                ...(typeof enhancedDeliveryAddressErrors === 'object' && enhancedDeliveryAddressErrors),
                ...remainingErrors
            };
            // Create layout
            const companyDetailsLayout = COMPANY_DETAILS_SCHEMA;
            const personalDetailsReqFields = props.personalDetailsRequiredFields ?? PERSONAL_DETAILS_SCHEMA;
            const personalDetailLayout = PERSONAL_DETAILS_SCHEMA.filter(x => personalDetailsReqFields?.includes(x));
            const bankAccountLayout = ['holder', 'iban'];
            const billingAddressLayout = specifications.getAddressSchemaForCountryFlat(data.billingAddress?.country);
            const deliveryAddressLayout = specifications.getAddressSchemaForCountryFlat(data.deliveryAddress?.country);
            // In order to sort the deliveryAddress errors the layout entries need to have the same (prefixed) identifier as the errors themselves
            const deliveryAddressLayoutEnhanced = deliveryAddressLayout.map(item => `${DELIVERY_ADDRESS_PREFIX}${item}`);
            const fullLayout = companyDetailsLayout.concat(
                personalDetailLayout,
                bankAccountLayout,
                billingAddressLayout,
                deliveryAddressLayoutEnhanced,
                ['consentCheckbox']
            );
            // Country specific address labels
            const countrySpecificLabels = specifications.getAddressLabelsForCountry(data.billingAddress?.country ?? data.deliveryAddress?.country);
            // Set messages: Pass dynamic props (errors, layout etc) to SRPanel via partial
            const srPanelResp = setSRMessages?.({
                errors: errorsForPanel,
                isValidating: isValidating.current,
                layout: fullLayout,
                countrySpecificLabels
            });
            // Relates to onBlur errors
            const currentErrorsSortedByLayout = srPanelResp?.currentErrorsSortedByLayout;
            // Store the array of sorted error objects separately so that we can use it to make comparisons between the old and new arrays
            setSortedErrorList(currentErrorsSortedByLayout); // Relates to onBlur errors
            /**
             * Need extra actions after setting SRPanel messages in order to focus field (if required) and because we have some errors that are fired onBlur
             */ switch (srPanelResp?.action) {
                // A call to focus the first field in error will always follow the call to validate the whole form
                case ERROR_ACTION_FOCUS_FIELD:
                    // Focus first field in error, if required
                    if (shouldMoveFocusSR) setFocusOnField('.adyen-checkout__open-invoice', srPanelResp.fieldToFocus);
                    // Remove 'showValidation' mode - allowing time for collation of all the fields in error whilst it is 'showValidation' mode (some errors come in a second render pass)
                    setTimeout(() => {
                        isValidating.current = false;
                    }, 300);
                    break;
                /** On blur scenario: not validating, i.e. trying to submit form, but there might be an error, either to set or to clear */ case ERROR_ACTION_BLUR_SCENARIO: {
                    const difference = getArrayDifferences(currentErrorsSortedByLayout, previousSortedErrors, 'field');
                    const latestErrorMsg = difference?.[0];
                    if (latestErrorMsg) {
                        // Is error actually a blur based one - depends on the specific fields in a component as to whether they validate on blur
                        const isBlurBasedError = latestErrorMsg.errorCode === 'shopperEmail.invalid';
                        // Only add blur based errors to the error panel - doing this step prevents the non-blur based errors from being read out twice
                        const latestSRError = isBlurBasedError ? latestErrorMsg.errorMessage : null;
                        setSRMessagesFromStrings(latestSRError);
                    } else {
                        // called when previousSortedErrors.length >= currentErrorsSortedByLayout.length
                        clearSRPanel();
                    }
                    break;
                }
            }
            props.onChange({
                data: newData,
                errors,
                valid,
                isValid
            });
        }, [data, activeFieldsets]);
        const handleFieldset = key => state => {
            setData(prevData => ({
                ...prevData,
                [key]: state.data
            }));
            setValid(prevValid => ({
                ...prevValid,
                [key]: state.isValid
            }));
            setErrors(prevErrors => ({
                ...prevErrors,
                [key]: state.errors
            }));
        };
        const handleSeparateDeliveryAddress = () => {
            setActiveFieldsets(prevActiveFields => ({
                ...prevActiveFields,
                deliveryAddress: !activeFieldsets.deliveryAddress
            }));
        };
        const handleConsentCheckbox = e => {
            const { checked } = e.target;
            setData(prevData => ({
                ...prevData,
                consentCheckbox: checked
            }));
            setValid(prevValid => ({
                ...prevValid,
                consentCheckbox: checked
            }));
            setErrors(prevErrors => ({
                ...prevErrors,
                consentCheckbox: !checked
            }));
        };
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__open-invoice'
            },
            activeFieldsets.companyDetails &&
                /*#__PURE__*/ y$1(CompanyDetails, {
                    data: props.data.companyDetails,
                    label: 'companyDetails',
                    onChange: handleFieldset('companyDetails'),
                    setComponentRef: fieldsetsRefs.companyDetails,
                    visibility: visibility.companyDetails
                }),
            activeFieldsets.personalDetails &&
                /*#__PURE__*/ y$1(PersonalDetails, {
                    data: props.data.personalDetails,
                    requiredFields: props.personalDetailsRequiredFields,
                    label: 'personalDetails',
                    onChange: handleFieldset('personalDetails'),
                    setComponentRef: fieldsetsRefs.personalDetails,
                    visibility: visibility.personalDetails
                }),
            activeFieldsets.bankAccount &&
                /*#__PURE__*/ y$1(IbanInput, {
                    holderName: true,
                    label: 'bankAccount',
                    data: data.bankAccount,
                    onChange: handleFieldset('bankAccount'),
                    ref: fieldsetsRefs.bankAccount
                }),
            activeFieldsets.billingAddress &&
                /*#__PURE__*/ y$1(Address, {
                    allowedCountries: props.allowedCountries,
                    countryCode: countryCode,
                    requiredFields: props.billingAddressRequiredFields,
                    specifications: props.billingAddressSpecification,
                    data: data.billingAddress,
                    label: 'billingAddress',
                    onChange: handleFieldset('billingAddress'),
                    setComponentRef: fieldsetsRefs.billingAddress,
                    visibility: visibility.billingAddress
                }),
            showSeparateDeliveryAddressCheckbox &&
                /*#__PURE__*/ y$1(Checkbox, {
                    label: i18n.get('separateDeliveryAddress'),
                    checked: activeFieldsets.deliveryAddress,
                    classNameModifiers: ['separateDeliveryAddress'],
                    name: 'separateDeliveryAddress',
                    onChange: handleSeparateDeliveryAddress
                }),
            activeFieldsets.deliveryAddress &&
                /*#__PURE__*/ y$1(Address, {
                    allowedCountries: props.allowedCountries,
                    countryCode: countryCode,
                    data: data.deliveryAddress,
                    label: 'deliveryAddress',
                    onChange: handleFieldset('deliveryAddress'),
                    setComponentRef: fieldsetsRefs.deliveryAddress,
                    visibility: visibility.deliveryAddress
                }),
            hasConsentCheckbox &&
                /*#__PURE__*/ y$1(ConsentCheckbox, {
                    data: data,
                    errorMessage: !!errors.consentCheckbox,
                    label: props.consentCheckboxLabel,
                    onChange: handleConsentCheckbox,
                    i18n: i18n
                }),
            props.showPayButton &&
                props.payButton({
                    status,
                    classNameModifiers: [...(isStandAloneButton ? ['standalone'] : [])],
                    label: i18n.get('confirmPurchase')
                })
        );
    }

    class OpenInvoiceContainer extends UIElement {
        static defaultProps = {
            onChange: () => {},
            data: {
                companyDetails: {},
                personalDetails: {},
                billingAddress: {},
                deliveryAddress: {},
                bankAccount: {}
            },
            visibility: {
                companyDetails: 'hidden',
                personalDetails: 'editable',
                billingAddress: 'editable',
                deliveryAddress: 'editable',
                bankAccount: 'hidden'
            }
        };
        /**
         * Returns whether the component state is valid or not
         */ get isValid() {
            return !!this.state.isValid;
        }
        /**
         * Formats props on construction time
         */ formatProps(props) {
            const country = props.countryCode || props.data?.billingAddress?.countryCode;
            return {
                ...props,
                allowedCountries: [country],
                visibility: {
                    ...OpenInvoiceContainer.defaultProps.visibility,
                    ...props.visibility
                },
                data: {
                    ...props.data,
                    billingAddress: {
                        ...props.data.billingAddress,
                        country
                    },
                    deliveryAddress: {
                        ...props.data.deliveryAddress,
                        country
                    }
                }
            };
        }
        /**
         * Formats the component data output
         */ formatData() {
            const { data = {} } = this.state;
            const { companyDetails = {}, personalDetails = {}, billingAddress, deliveryAddress, bankAccount } = data;
            return {
                paymentMethod: {
                    type: this.constructor['type']
                },
                ...personalDetails,
                ...companyDetails,
                ...(bankAccount && {
                    bankAccount: {
                        iban: bankAccount.ibanNumber,
                        ownerName: bankAccount.ownerName,
                        countryCode: bankAccount.countryCode
                    }
                }),
                ...(billingAddress && {
                    billingAddress
                }),
                ...((deliveryAddress || billingAddress) && {
                    deliveryAddress: deliveryAddress || billingAddress
                })
            };
        }
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(
                    SRPanelProvider,
                    {
                        srPanel: this.props.modules.srPanel
                    },
                    /*#__PURE__*/ y$1(OpenInvoice, {
                        setComponentRef: this.setComponentRef,
                        ...this.props,
                        ...this.state,
                        onChange: this.setState,
                        onSubmit: this.submit,
                        payButton: this.payButton
                    })
                )
            );
        }
    }

    const ALLOWED_COUNTRIES$3 = ['CA', 'US'];

    class Affirm extends OpenInvoiceContainer {
        static type = 'affirm';
        formatProps(props) {
            return {
                ...super.formatProps(props),
                allowedCountries: ALLOWED_COUNTRIES$3,
                personalDetailsRequiredFields: ['firstName', 'lastName', 'telephoneNumber', 'shopperEmail']
            };
        }
    }

    function ConsentCheckboxLabel(props) {
        const { i18n } = useCoreContext();
        const linkText = i18n.get('paymentConditions');
        const translationString = i18n.get('afterPay.agreement');
        const [textBeforeLink, textAfterLink] = translationString.split('%@');
        if (textBeforeLink && textAfterLink) {
            return /*#__PURE__*/ y$1(
                _$1,
                null,
                textBeforeLink,
                /*#__PURE__*/ y$1(
                    'a',
                    {
                        className: 'adyen-checkout__link',
                        target: '_blank',
                        rel: 'noopener noreferrer',
                        href: props.url
                    },
                    linkText
                ),
                textAfterLink
            );
        }
        return /*#__PURE__*/ y$1(
            'span',
            {
                className: 'adyen-checkout__checkbox__label'
            },
            i18n.get('privacyPolicy')
        );
    }

    const AFTERPAY_CONSENT_URL_EN = 'https://www.afterpay.nl/en/algemeen/pay-with-afterpay/payment-conditions';
    const AFTERPAY_CONSENT_URL_BE = 'https://www.afterpay.be/be/footer/betalen-met-afterpay/betalingsvoorwaarden';
    const AFTERPAY_CONSENT_URL_NL = 'https://www.afterpay.nl/nl/algemeen/betalen-met-afterpay/betalingsvoorwaarden';
    const AFTERPAY_B2B_CONSENT_URL = 'https://www.afterpay.nl/nl/algemeen/zakelijke-partners/betalingsvoorwaarden-zakelijk';
    const ALLOWED_COUNTRIES$2 = ['BE', 'NL'];

    function getConsentLinkUrl(countryCode, locale) {
        const languageCode = locale?.toLowerCase().slice(0, 2);
        if (languageCode === 'en') return AFTERPAY_CONSENT_URL_EN;
        if (countryCode?.toLowerCase() === 'be') return AFTERPAY_CONSENT_URL_BE;
        return AFTERPAY_CONSENT_URL_NL;
    }

    class AfterPay extends OpenInvoiceContainer {
        static type = 'afterpay_default';
        static txVariants = ['afterpay_default', 'afterpay'];
        formatProps(props) {
            return {
                ...super.formatProps(props),
                allowedCountries: props.countryCode ? [props.countryCode] : ALLOWED_COUNTRIES$2,
                consentCheckboxLabel: /*#__PURE__*/ y$1(ConsentCheckboxLabel, {
                    url: getConsentLinkUrl(props.countryCode, props.i18n?.locale)
                })
            };
        }
    }

    class AfterPayB2B extends OpenInvoiceContainer {
        static type = 'afterpay_b2b';
        static defaultProps = {
            onChange: () => {},
            data: {
                companyDetails: {},
                personalDetails: {},
                billingAddress: {},
                deliveryAddress: {}
            },
            visibility: {
                companyDetails: 'editable',
                personalDetails: 'editable',
                billingAddress: 'editable',
                deliveryAddress: 'editable'
            }
        };
        formatProps(props) {
            return {
                ...super.formatProps(props),
                allowedCountries: props.countryCode ? [props.countryCode] : ALLOWED_COUNTRIES$2,
                consentCheckboxLabel: /*#__PURE__*/ y$1(ConsentCheckboxLabel, {
                    url: AFTERPAY_B2B_CONSENT_URL
                })
            };
        }
    }

    const ATOME_ADDRESS_SPECIFICATION = {
        labels: {
            [STREET]: 'address'
        },
        schema: [
            STREET,
            [
                [COUNTRY, 70],
                [POSTAL_CODE, 30]
            ]
        ]
    };
    const ATOME_SUPPORTED_COUNTRIES = ['ID', 'PH', 'TH', 'VN', 'JP', 'TW', 'KR', 'SG', 'MY', 'HK'];
    /**
     * Creates Address Specification according to the Atome UI. This specification overrides all available specifications
     *
     * This custom specification is needed in order to create the desired layout of the Atome billing address part. The usage of the
     * 'default' layout specification from the Address component does not align correctly the available fields, therefore we need to
     * create this customization.
     */ const BILLING_ADDRESS_SPECIFICATION = COUNTRIES_WITH_CUSTOM_SPECIFICATION.reduce(
        (memo, countryCode) => {
            return {
                ...memo,
                [countryCode]: ATOME_ADDRESS_SPECIFICATION
            };
        },
        {
            default: ATOME_ADDRESS_SPECIFICATION
        }
    );

    class Atome extends OpenInvoiceContainer {
        static type = 'atome';
        formatProps(props) {
            return {
                ...super.formatProps({
                    ...props,
                    ...{
                        visibility: {
                            deliveryAddress: 'hidden',
                            companyDetails: 'hidden'
                        }
                    }
                }),
                allowedCountries: ATOME_SUPPORTED_COUNTRIES,
                personalDetailsRequiredFields: ['firstName', 'lastName', 'telephoneNumber'],
                billingAddressRequiredFields: ['country', 'street', 'postalCode'],
                billingAddressSpecification: BILLING_ADDRESS_SPECIFICATION
            };
        }
    }

    const ALLOWED_COUNTRIES$1 = ['ES', 'FR'];

    class FacilyPay3x extends OpenInvoiceContainer {
        static type = 'facilypay_3x';
        formatProps(props) {
            return {
                ...super.formatProps(props),
                allowedCountries: props.countryCode ? [props.countryCode] : ALLOWED_COUNTRIES$1
            };
        }
    }

    class FacilyPay4x extends OpenInvoiceContainer {
        static type = 'facilypay_4x';
        formatProps(props) {
            return {
                ...super.formatProps(props),
                allowedCountries: props.countryCode ? [props.countryCode] : ALLOWED_COUNTRIES$1
            };
        }
    }

    class FacilyPay6x extends OpenInvoiceContainer {
        static type = 'facilypay_6x';
        formatProps(props) {
            return {
                ...super.formatProps(props),
                allowedCountries: props.countryCode ? [props.countryCode] : ALLOWED_COUNTRIES$1
            };
        }
    }

    class FacilyPay10x extends OpenInvoiceContainer {
        static type = 'facilypay_10x';
        formatProps(props) {
            return {
                ...super.formatProps(props),
                allowedCountries: props.countryCode ? [props.countryCode] : ALLOWED_COUNTRIES$1
            };
        }
    }

    class FacilyPay12x extends OpenInvoiceContainer {
        static type = 'facilypay_12x';
        formatProps(props) {
            return {
                ...super.formatProps(props),
                allowedCountries: props.countryCode ? [props.countryCode] : ALLOWED_COUNTRIES$1
            };
        }
    }

    const ALLOWED_COUNTRIES = ['AT', 'CH', 'DE', 'NL'];

    class RatePay extends OpenInvoiceContainer {
        static type = 'ratepay';
        formatProps(props) {
            return {
                ...super.formatProps(props),
                allowedCountries: props.countryCode ? [props.countryCode] : ALLOWED_COUNTRIES
            };
        }
    }

    class RatePayDirectDebit extends OpenInvoiceContainer {
        static type = 'ratepay_directdebit';
        formatProps(props) {
            return {
                ...super.formatProps({
                    ...props,
                    ...{
                        visibility: {
                            bankAccount: 'editable'
                        }
                    }
                }),
                allowedCountries: props.countryCode ? [props.countryCode] : ALLOWED_COUNTRIES
            };
        }
    }

    const AMAZONPAY_GET_CHECKOUT_DETAILS_ENDPOINT = 'v1/AmazonPayUtility/getCheckoutDetails';
    const AMAZONPAY_SIGN_STRING_ENDPOINT = 'v1/AmazonPayUtility/signString';
    const AMAZONPAY_UPDATE_CHECKOUT_SESSION_ENDPOINT = 'v1/AmazonPayUtility/updateCheckoutSession';
    const AMAZONPAY_URL_EU = 'https://static-eu.payments-amazon.com/checkout.js';
    const AMAZONPAY_URL_US = 'https://static-na.payments-amazon.com/checkout.js';
    const FALLBACK_LOCALE_EU = 'en_GB';
    const FALLBACK_LOCALE_US = 'en_US';
    const LEDGER_CURRENCIES_PER_REGION = {
        EU: 'EUR',
        UK: 'GBP',
        US: 'USD'
    };
    const SUPPORTED_LOCALES_EU = ['en_GB', 'de_DE', 'fr_FR', 'it_IT', 'es_ES'];
    const SUPPORTED_LOCALES_US = ['en_US'];

    /**
     * Returns the AmazonPay script URL for passed region.
     * @param region - Two-letter country code in ISO 3166 format
     * @returns the AmazonPay script URL
     */ function getAmazonPayUrl(region) {
        return region === 'US' ? AMAZONPAY_URL_US : AMAZONPAY_URL_EU;
    }
    /**
     * Returns the AmazonPay button settings object
     * @param props -
     * @returns the AmazonPay button settings
     */ function getAmazonPaySettings(props) {
        return {
            ...(props.buttonColor && {
                buttonColor: props.buttonColor
            }),
            ...(props.design && {
                design: getDesignCode(props.design)
            }),
            checkoutLanguage: getCheckoutLocale(props.locale, props.configuration.region),
            ledgerCurrency: LEDGER_CURRENCIES_PER_REGION[props.configuration.region] || props.currency || props.amount?.currency,
            merchantId: props.configuration.merchantId,
            productType: props.productType,
            placement: props.placement,
            sandbox: props.environment === 'TEST'
        };
    }
    /**
     * Returns the fallback locale for passed region.
     * @param region - Two-letter country code in ISO 3166 format
     * @returns A fallback locale
     */ function getFallbackLocale(region) {
        return region === 'US' ? FALLBACK_LOCALE_US : FALLBACK_LOCALE_EU;
    }
    /**
     * Returns an array of supported locales for passed region.
     * @param region - Two-letter country code in ISO 3166 format
     * @returns An array of supported locales
     */ function getSupportedLocales(region) {
        const supportedLocales = region === 'US' ? SUPPORTED_LOCALES_US : SUPPORTED_LOCALES_EU;
        return supportedLocales;
    }
    /**
     * Gets a locale and matches it with one of the supported locales for the given region.
     * If there's no match, it will return the region's fallback option.
     * @param locale - Locale to be processed
     * @param region - Two-letter country code in ISO 3166 format
     * @returns A supported locale
     */ function getCheckoutLocale(locale, region) {
        const supportedLocales = getSupportedLocales(region);
        const isSupportedLocale = supportedLocales.includes(locale);
        const checkoutLocale = isSupportedLocale ? locale : getFallbackLocale(region);
        return checkoutLocale;
    }
    /**
     * Gets the design code from the given alias.
     * @param design - The alias of one of the possible designs.
     * @returns A design code
     */ function getDesignCode(design) {
        if (design === 'noTagline') return 'C0001';
        return null;
    }
    /**
     * Returns the amount in the format Amazon expects.
     * @param amount - The amount object in the Adyen format
     * @returns the charge amount object in the Amazon format
     */ function getChargeAmount(amount) {
        return {
            amount: String(getDecimalAmount(amount.value, amount.currency)),
            currencyCode: amount.currency
        };
    }
    /**
     * Returns a PayloadJSON object.
     * @param props -
     * @returns PayloadJSON
     */ function getPayloadJSON(props) {
        const {
            addressDetails,
            cancelUrl,
            checkoutMode,
            deliverySpecifications,
            returnUrl,
            merchantMetadata,
            chargePermissionType,
            recurringMetadata
        } = props;
        const { storeId } = props.configuration;
        const isPayNow = checkoutMode === 'ProcessOrder';
        const amount = isPayNow ? getChargeAmount(props.amount) : null;
        return {
            storeId,
            chargePermissionType,
            webCheckoutDetails: {
                ...(isPayNow
                    ? {
                          checkoutResultReturnUrl: returnUrl
                      }
                    : {
                          checkoutReviewReturnUrl: returnUrl
                      }),
                ...(cancelUrl && {
                    checkoutCancelUrl: cancelUrl
                }),
                ...(isPayNow && {
                    checkoutMode
                })
            },
            ...(isPayNow && {
                paymentDetails: {
                    chargeAmount: amount,
                    paymentIntent: 'Confirm',
                    presentmentCurrency: amount.currencyCode,
                    totalOrderAmount: amount
                }
            }),
            ...(recurringMetadata && {
                recurringMetadata
            }),
            ...(merchantMetadata && {
                merchantMetadata
            }),
            ...(deliverySpecifications && {
                deliverySpecifications
            }),
            ...(addressDetails && {
                addressDetails
            })
        };
    }

    /**
     * Calls the Sign String endpoint to the PayloadJSON string.
     * @param loadingContext - Loading context to be used in the call
     * @param clientKey - Key to be used as a public token
     * @param payloadJSON - Object to be signed
     * @returns A promise containing the response of the call
     */ function getAmazonSignature(loadingContext, clientKey, payloadJSON) {
        const options = {
            loadingContext,
            path: `${AMAZONPAY_SIGN_STRING_ENDPOINT}?clientKey=${clientKey}`
        };
        const request = {
            stringToSign: JSON.stringify(payloadJSON)
        };
        return httpPost(options, request);
    }
    /**
     * Calls the getCheckoutDetails details to either get the shopper details or the decline flow URL.
     * @param loadingContext - Loading context to be used in the call
     * @param clientKey - Key to be used as a public token
     * @param request - Object to sent
     * @returns A promise containing the response of the call
     */ function getCheckoutDetails(loadingContext, clientKey, request) {
        const options = {
            loadingContext,
            path: `${AMAZONPAY_GET_CHECKOUT_DETAILS_ENDPOINT}?clientKey=${clientKey}`
        };
        return httpPost(options, request);
    }
    /**
     * Calls the Update Checkout Session endpoint to create an order.
     * @param loadingContext - Loading context to be used in the call
     * @param clientKey - Key to be used as a public token
     * @param data -
     * @returns A promise containing the response of the call
     */ function updateAmazonCheckoutSession(loadingContext, clientKey, data) {
        const options = {
            loadingContext,
            path: `${AMAZONPAY_UPDATE_CHECKOUT_SESSION_ENDPOINT}?clientKey=${clientKey}`
        };
        return httpPost(options, data);
    }

    function AmazonPayButton(props) {
        const { loadingContext } = useCoreContext();
        const { amazonRef, configuration = {} } = props;
        const [signature, setSignature] = h(null);
        const payloadJSON = getPayloadJSON(props);
        const settings = getAmazonPaySettings(props);
        const handleOnClick = () => {
            new Promise(props.onClick).then(this.initCheckout).catch(error => {
                if (props.onError) props.onError(error, this.componentRef);
            });
        };
        const renderAmazonPayButton = () => {
            const amazonPayButton = amazonRef.Pay.renderButton('#amazonPayButton', settings);
            amazonPayButton.onClick(handleOnClick);
        };
        this.initCheckout = () => {
            const checkoutSessionConfig = {
                payloadJSON: JSON.stringify(payloadJSON),
                publicKeyId: configuration.publicKeyId,
                signature
            };
            amazonRef.Pay.initCheckout({
                ...settings,
                createCheckoutSessionConfig: checkoutSessionConfig
            });
        };
        p(() => {
            const { clientKey } = props;
            getAmazonSignature(loadingContext, clientKey, payloadJSON)
                .then(response => {
                    if (!response?.signature) return console.error('Could not get AmazonPay signature');
                    setSignature(response.signature);
                    if (props.showPayButton) renderAmazonPayButton();
                })
                .catch(error => {
                    console.error(error);
                    if (props.onError) props.onError(error, this.componentRef);
                });
        }, []);
        if (!props.showPayButton) return null;
        return /*#__PURE__*/ y$1('div', {
            className: 'adyen-checkout__amazonpay__button',
            id: 'amazonPayButton'
        });
    }

    function ChangePaymentDetailsButton(props) {
        const { i18n } = useCoreContext();
        const { amazonRef, amazonCheckoutSessionId } = props;
        p(() => {
            const changeActionOptions = {
                amazonCheckoutSessionId,
                changeAction: 'changeAddress'
            };
            amazonRef.Pay.bindChangeAction('.adyen-checkout__amazonpay__button--changeAddress', changeActionOptions);
        }, []);
        return /*#__PURE__*/ y$1(
            'button',
            {
                type: 'button',
                className: 'adyen-checkout__button adyen-checkout__button--ghost adyen-checkout__amazonpay__button--changeAddress'
            },
            i18n.get('amazonpay.changePaymentDetails')
        );
    }

    function OrderButton(props) {
        const { i18n, loadingContext } = useCoreContext();
        this.createOrder = () => {
            const { amazonCheckoutSessionId, amount, clientKey, chargePermissionType, publicKeyId, region, recurringMetadata, returnUrl } = props;
            const request = {
                amount,
                chargePermissionType,
                checkoutResultReturnUrl: returnUrl,
                checkoutSessionId: amazonCheckoutSessionId,
                publicKeyId,
                recurringMetadata,
                region
            };
            updateAmazonCheckoutSession(loadingContext, clientKey, request)
                .then(response => {
                    if (!response?.action?.type) return console.error(response.errorMessage || 'Could not get the AmazonPay URL');
                    if (response.action.type === 'redirect') window.location.assign(response.action.url);
                })
                .catch(error => {
                    if (props.onError) props.onError(error, this.componentRef);
                });
        };
        return /*#__PURE__*/ y$1(Button, {
            classNameModifiers: ['standalone', 'pay'],
            label: i18n.get('confirmPurchase'),
            onClick: this.createOrder
        });
    }

    function SignOutButton(props) {
        const { i18n } = useCoreContext();
        const handleClick = () => {
            new Promise(props.onSignOut)
                .then(() => {
                    props.amazonRef.Pay.signout();
                })
                .catch(console.error);
        };
        return /*#__PURE__*/ y$1(
            'button',
            {
                type: 'button',
                className: 'adyen-checkout__button  adyen-checkout__button--ghost adyen-checkout__amazonpay__button--signOut',
                onClick: handleClick
            },
            i18n.get('amazonpay.signout')
        );
    }

    function AmazonPayComponent(props) {
        const [status, setStatus] = h('pending');
        const amazonPayButtonRef = _(null);
        const orderButtonRef = _(null);
        const handleLoad = () => {
            setStatus('ready');
        };
        this.submit = () => {
            if (amazonPayButtonRef.current && amazonPayButtonRef.current.initCheckout) return amazonPayButtonRef.current.initCheckout();
            if (orderButtonRef.current && orderButtonRef.current.createOrder) return orderButtonRef.current.createOrder();
        };
        p(() => {
            const src = getAmazonPayUrl(props.configuration.region);
            const script = new Script(src);
            if (window.amazon) {
                handleLoad();
            } else {
                script.load().then(handleLoad);
            }
            return () => {
                script.remove();
            };
        }, []);
        if (status === 'pending') {
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__amazonpay'
                },
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__amazonpay__status adyen-checkout__amazonpay__status--pending'
                    },
                    /*#__PURE__*/ y$1(Spinner, null)
                )
            );
        }
        if (props.showSignOutButton) {
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__amazonpay'
                },
                /*#__PURE__*/ y$1(SignOutButton, {
                    amazonRef: window.amazon,
                    onSignOut: props.onSignOut
                })
            );
        }
        if (props.amazonCheckoutSessionId) {
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__amazonpay'
                },
                props.showOrderButton &&
                    /*#__PURE__*/ y$1(OrderButton, {
                        amazonCheckoutSessionId: props.amazonCheckoutSessionId,
                        amount: props.amount,
                        chargePermissionType: props.chargePermissionType,
                        recurringMetadata: props.recurringMetadata,
                        clientKey: props.clientKey,
                        onError: props.onError,
                        publicKeyId: props.configuration?.publicKeyId,
                        region: props.configuration?.region,
                        returnUrl: props.returnUrl,
                        ref: orderButtonRef
                    }),
                props.showChangePaymentDetailsButton &&
                    /*#__PURE__*/ y$1(ChangePaymentDetailsButton, {
                        amazonCheckoutSessionId: props.amazonCheckoutSessionId,
                        amazonRef: window.amazon
                    })
            );
        }
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__amazonpay'
            },
            /*#__PURE__*/ y$1(AmazonPayButton, {
                ...props,
                amazonRef: window.amazon,
                ref: amazonPayButtonRef
            })
        );
    }

    const defautProps = {
        cancelUrl: typeof window !== 'undefined' ? window.location.href : '',
        configuration: {},
        environment: 'TEST',
        locale: 'en_GB',
        placement: 'Cart',
        productType: 'PayAndShip',
        returnUrl: typeof window !== 'undefined' ? window.location.href : '',
        showOrderButton: true,
        showChangePaymentDetailsButton: false,
        showSignOutButton: false,
        showPayButton: true,
        onClick: resolve => resolve(),
        onSignOut: resolve => resolve()
    };

    class AmazonPayElement extends UIElement {
        static type = 'amazonpay';
        static defaultProps = defautProps;
        formatProps(props) {
            return {
                ...props,
                checkoutMode: props.isDropin ? 'ProcessOrder' : props.checkoutMode,
                environment: props.environment.toUpperCase(),
                locale: props.locale.replace('-', '_'),
                productType: props.isDropin && !props.addressDetails ? 'PayOnly' : props.productType
            };
        }
        /**
         * Formats the component data output
         */ formatData() {
            const { amazonCheckoutSessionId: checkoutSessionId } = this.props;
            return {
                paymentMethod: {
                    type: AmazonPayElement.type,
                    ...(checkoutSessionId && {
                        checkoutSessionId
                    })
                },
                browserInfo: this.browserInfo
            };
        }
        getShopperDetails() {
            const { amazonCheckoutSessionId, configuration = {}, loadingContext, clientKey } = this.props;
            if (!amazonCheckoutSessionId) return console.error('Could not shopper details. Missing checkoutSessionId.');
            const request = {
                checkoutSessionId: amazonCheckoutSessionId,
                getDeliveryAddress: true,
                publicKeyId: configuration.publicKeyId,
                region: configuration.region
            };
            return getCheckoutDetails(loadingContext, clientKey, request);
        }
        handleDeclineFlow() {
            const { amazonCheckoutSessionId, configuration = {}, loadingContext, clientKey } = this.props;
            if (!amazonCheckoutSessionId) return console.error('Could handle the decline flow. Missing checkoutSessionId.');
            const request = {
                checkoutSessionId: amazonCheckoutSessionId,
                getDeclineFlowUrl: true,
                publicKeyId: configuration.publicKeyId,
                region: configuration.region
            };
            getCheckoutDetails(loadingContext, clientKey, request)
                .then((response = {}) => {
                    if (!response?.declineFlowUrl) throw response;
                    window.location.assign(response.declineFlowUrl);
                })
                .catch(error => {
                    if (this.props.onError) this.props.onError(error, this.componentRef);
                });
        }
        get isValid() {
            return true;
        }
        get browserInfo() {
            return collectBrowserInfo();
        }
        submit() {
            const { data, isValid } = this;
            const { onSubmit = () => {} } = this.props;
            if (this.componentRef && this.componentRef.submit) return this.componentRef.submit();
            return onSubmit(
                {
                    data,
                    isValid
                },
                this
            );
        }
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(AmazonPayComponent, {
                    ref: ref => {
                        this.componentRef = ref;
                    },
                    ...this.props
                })
            );
        }
    }

    var styles$1 = {
        'apple-pay': 'ApplePayButton-module_apple-pay__gYjuP',
        'apple-pay-button': 'ApplePayButton-module_apple-pay-button__l5g-d',
        'apple-pay-button-black': 'ApplePayButton-module_apple-pay-button-black__istwW',
        'apple-pay-button-white': 'ApplePayButton-module_apple-pay-button-white__-wLaE',
        'apple-pay-button-white-with-line': 'ApplePayButton-module_apple-pay-button-white-with-line__MlRq7',
        'apple-pay-button--type-plain': 'ApplePayButton-module_apple-pay-button--type-plain__ycfNl',
        'apple-pay-button--type-buy': 'ApplePayButton-module_apple-pay-button--type-buy__9m8AB',
        'apple-pay-button--type-donate': 'ApplePayButton-module_apple-pay-button--type-donate__HmRdK',
        'apple-pay-button--type-check-out': 'ApplePayButton-module_apple-pay-button--type-check-out__XdGWd',
        'apple-pay-button--type-book': 'ApplePayButton-module_apple-pay-button--type-book__-v-VY',
        'apple-pay-button--type-subscribe': 'ApplePayButton-module_apple-pay-button--type-subscribe__WxWIF',
        'apple-pay-button--type-add-money': 'ApplePayButton-module_apple-pay-button--type-add-money__zeBA8',
        'apple-pay-button--type-contribute': 'ApplePayButton-module_apple-pay-button--type-contribute__G3E8e',
        'apple-pay-button--type-order': 'ApplePayButton-module_apple-pay-button--type-order__ggI6j',
        'apple-pay-button--type-reload': 'ApplePayButton-module_apple-pay-button--type-reload__QbgLd',
        'apple-pay-button--type-rent': 'ApplePayButton-module_apple-pay-button--type-rent__VzC-E',
        'apple-pay-button--type-support': 'ApplePayButton-module_apple-pay-button--type-support__6EjmY',
        'apple-pay-button--type-tip': 'ApplePayButton-module_apple-pay-button--type-tip__bdzGK',
        'apple-pay-button--type-top-up': 'ApplePayButton-module_apple-pay-button--type-top-up__Eb3qR'
    };

    class ApplePayButton extends k$1 {
        static defaultProps = {
            onClick: () => {},
            buttonColor: 'black',
            buttonType: 'plain'
        };
        render({ buttonColor, buttonType }) {
            /* eslint-disable jsx-a11y/no-static-element-interactions */ return /*#__PURE__*/ y$1('button', {
                type: 'button',
                'aria-label': this.props.i18n.get('payButton'),
                lang: this.props.i18n.languageCode,
                className: classNames(
                    'adyen-checkout__applepay__button',
                    `adyen-checkout__applepay__button--${buttonColor}`,
                    `adyen-checkout__applepay__button--${buttonType}`,
                    [styles$1['apple-pay']],
                    [styles$1['apple-pay-button']],
                    [styles$1[`apple-pay-button-${buttonColor}`]],
                    [styles$1[`apple-pay-button--type-${buttonType}`]]
                ),
                onClick: this.props.onClick
            });
            /* eslint-enable jsx-a11y/no-static-element-interactions */
        }
    }

    class ApplePayService {
        session;
        options;
        constructor(paymentRequest, options) {
            this.options = options;
            this.session = new ApplePaySession(options.version, paymentRequest);
            this.session.onvalidatemerchant = event => this.onvalidatemerchant(event, options.onValidateMerchant);
            this.session.onpaymentauthorized = event => this.onpaymentauthorized(event, options.onPaymentAuthorized);
            this.session.oncancel = event => this.oncancel(event, options.onCancel);
            if (typeof options.onPaymentMethodSelected === 'function') {
                this.session.onpaymentmethodselected = event => this.onpaymentmethodselected(event, options.onPaymentMethodSelected);
            }
            if (typeof options.onShippingContactSelected === 'function') {
                this.session.onshippingcontactselected = event => this.onshippingcontactselected(event, options.onShippingContactSelected);
            }
            if (typeof options.onShippingMethodSelected === 'function') {
                this.session.onshippingmethodselected = event => this.onshippingmethodselected(event, options.onShippingMethodSelected);
            }
        }
        /**
         * Begins the merchant validation process.
         * When this method is called, the payment sheet is presented and the merchant validation process is initiated.
         * @see {@link https://developer.apple.com/documentation/apple_pay_on_the_web/applepaysession/1778001-begin}
         */ begin() {
            return this.session.begin();
        }
        /**
         * An event handler that is called when the payment sheet is displayed.
         * Use this attribute to request and return a merchant session.
         * @param event - An ApplePayValidateMerchantEvent object (contains validationURL)
         * @param onValidateMerchant - A promise implemented by the merchant that will resolve with the merchantSession
         * @see {@link https://developer.apple.com/documentation/apple_pay_on_the_web/apple_pay_js_api/providing_merchant_validation}
         */ onvalidatemerchant(event, onValidateMerchant) {
            return new Promise((resolve, reject) => onValidateMerchant(resolve, reject, event.validationURL))
                .then(response => {
                    this.session.completeMerchantValidation(response);
                })
                .catch(error => {
                    console.error(error);
                    this.session.abort();
                    this.options.onError(error);
                });
        }
        /**
         * An event handler that is called when the user has authorized the Apple Pay payment with Touch ID, Face ID, or passcode.
         * The onpaymentauthorized function must complete the payment and respond by calling completePayment before the 30 second timeout.
         *
         * @param event - The event parameter contains the payment (ApplePayPayment) attribute.
         * @param onPaymentAuthorized - A promise that will complete the payment when resolved. Use this promise to process the payment.
         * @see {@link https://developer.apple.com/documentation/apple_pay_on_the_web/applepaysession/1778020-onpaymentauthorized}
         */ onpaymentauthorized(event, onPaymentAuthorized) {
            return new Promise((resolve, reject) => onPaymentAuthorized(resolve, reject, event))
                .then(result => {
                    this.session.completePayment({
                        ...result,
                        status: result?.status ?? ApplePaySession.STATUS_SUCCESS
                    });
                })
                .catch(result => {
                    this.session.completePayment({
                        ...result,
                        status: result?.status ?? ApplePaySession.STATUS_FAILURE
                    });
                });
        }
        /**
         * An event handler that is called when a new payment method is selected.
         * The onpaymentmethodselected function must resolve before the 30 second timeout
         *
         * @param event - The event parameter contains the payment (ApplePayPayment) attribute.
         * @param onPaymentMethodSelected - A promise that will complete the payment when resolved. Use this promise to process the payment.
         * @see {@link https://developer.apple.com/documentation/apple_pay_on_the_web/applepaysession/1778013-onpaymentmethodselected}
         */ onpaymentmethodselected(event, onPaymentMethodSelected) {
            return new Promise((resolve, reject) => onPaymentMethodSelected(resolve, reject, event))
                .then(paymentMethodUpdate => {
                    console.log('onpaymentmethodselected', paymentMethodUpdate);
                    this.session.completePaymentMethodSelection(paymentMethodUpdate);
                })
                .catch(paymentMethodUpdate => {
                    this.session.completePaymentMethodSelection(paymentMethodUpdate);
                });
        }
        /**
         * An event handler that is called when a new payment method is selected.
         * The onpaymentmethodselected function must resolve before the 30 second timeout
         * @param event - The event parameter contains the shippingContact attribute.
         * @param onShippingContactSelected - A promise that will complete the selection of a shipping contact with an update.
         * @see {@link https://developer.apple.com/documentation/apple_pay_on_the_web/applepaysession/1778009-onshippingcontactselected}
         */ onshippingcontactselected(event, onShippingContactSelected) {
            return new Promise((resolve, reject) => onShippingContactSelected(resolve, reject, event))
                .then(shippingContactUpdate => {
                    this.session.completeShippingContactSelection(shippingContactUpdate);
                })
                .catch(shippingContactUpdate => {
                    this.session.completeShippingContactSelection(shippingContactUpdate);
                });
        }
        /**
         * An event handler that is called when a new payment method is selected.
         * The onpaymentmethodselected function must resolve before the 30 second timeout
         * @param event - The event parameter contains the shippingMethod attribute.
         * @param onShippingMethodSelected - A promise that will complete the selection of a shipping method with an update.
         * @see {@link https://developer.apple.com/documentation/apple_pay_on_the_web/applepaysession/1778009-onshippingcontactselected}
         */ onshippingmethodselected(event, onShippingMethodSelected) {
            return new Promise((resolve, reject) => onShippingMethodSelected(resolve, reject, event))
                .then(shippingMethodUpdate => {
                    this.session.completeShippingMethodSelection(shippingMethodUpdate);
                })
                .catch(shippingMethodUpdate => {
                    this.session.completeShippingMethodSelection(shippingMethodUpdate);
                });
        }
        /**
         * An event handler that is automatically called when the payment UI is dismissed.
         * This function can be called even after an onpaymentauthorized event has been dispatched.
         * @param event -
         * @param onCancel -
         * @see {@link https://developer.apple.com/documentation/apple_pay_on_the_web/applepaysession/1778029-oncancel}
         */ oncancel(event, onCancel) {
            onCancel(event);
        }
    }

    const defaultProps$4 = {
        // Transaction Information
        amount: {
            currency: 'USD',
            value: 0
        },
        /**
         * The merchant’s two-letter ISO 3166 country code.
         */ countryCode: 'US',
        totalPriceStatus: 'final',
        totalPriceLabel: undefined,
        configuration: {
            merchantName: '',
            merchantId: ''
        },
        initiative: 'web',
        /**
         * https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest/1916120-lineitems
         * A set of line items that explain recurring payments and additional charges and discounts.
         */ lineItems: undefined,
        /**
         * https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest/1916123-merchantcapabilities
         * The payment capabilities supported by the merchant.
         */ merchantCapabilities: ['supports3DS'],
        /**
         * https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest/1916121-shippingmethods
         * A list of available methods for shipping physical goods.
         */ shippingMethods: undefined,
        /**
         * https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest/1916128-shippingtype
         * An optional value that indicates how purchased items are to be shipped.
         */ shippingType: undefined,
        /**
         * https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest/2928612-supportedcountries
         * A list of two-character country codes you provide, used to limit payments to cards from specific countries.
         */ supportedCountries: undefined,
        /**
         * https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypaymentrequest/1916122-supportednetworks
         * The payment networks supported by the merchant.
         */ supportedNetworks: ['amex', 'discover', 'masterCard', 'visa'],
        // Requested Billing and Shipping Contact Information
        /**
         * The fields of billing information that you require from the user to process the transaction.
         */ requiredBillingContactFields: undefined,
        /**
         * The fields of shipping information that you require from the user to fulfill the order.
         */ requiredShippingContactFields: undefined,
        // Known Contact Information
        billingContact: undefined,
        shippingContact: undefined,
        // Custom Data
        applicationData: undefined,
        // Events
        onClick: resolve => resolve(),
        onAuthorized: resolve => resolve(),
        onPaymentMethodSelected: null,
        onShippingContactSelected: null,
        onShippingMethodSelected: null,
        // ButtonOptions
        buttonType: 'plain',
        buttonColor: 'black',
        showPayButton: true // show or hide the Apple Pay button
    };

    const APPLEPAY_SESSION_ENDPOINT = 'v1/applePay/sessions';

    const formatAmount = amount => String(getDecimalAmount(amount.value, amount.currency));
    const preparePaymentRequest = paymentRequest => {
        const { countryCode, companyName, amount, ...props } = paymentRequest;
        const formattedAmount = formatAmount(amount);
        return {
            countryCode,
            currencyCode: amount.currency,
            total: {
                label: props.totalPriceLabel,
                amount: formattedAmount,
                type: props.totalPriceStatus
            },
            lineItems: props.lineItems,
            shippingMethods: props.shippingMethods,
            shippingType: props.shippingType,
            // @ts-ignore 'recurringPaymentRequest' isn't defined in the @types/applepayjs
            recurringPaymentRequest: props.recurringPaymentRequest,
            merchantCapabilities: props.merchantCapabilities,
            supportedCountries: props.supportedCountries,
            supportedNetworks: props.supportedNetworks,
            requiredShippingContactFields: props.requiredShippingContactFields,
            requiredBillingContactFields: props.requiredBillingContactFields,
            billingContact: props.billingContact,
            shippingContact: props.shippingContact,
            applicationData: props.applicationData
        };
    };

    function resolveSupportedVersion(latestVersion) {
        const versions = [];
        for (let i = latestVersion; i > 0; i--) {
            versions.push(i);
        }
        try {
            return versions.find(v => v && window.ApplePaySession && ApplePaySession.supportsVersion(v));
        } catch (error) {
            console.warn(error);
            return null;
        }
    }
    function mapBrands$1(brands) {
        const brandMapping = {
            mc: 'masterCard',
            amex: 'amex',
            visa: 'visa',
            elodebit: 'elo',
            elo: 'elo',
            interac: 'interac',
            discover: 'discover',
            jcb: 'jcb',
            electron: 'electron',
            maestro: 'maestro',
            girocard: 'girocard',
            cartebancaire: 'cartesBancaires',
            eftpos_australia: 'eftpos'
        };
        return brands.reduce((accumulator, item) => {
            if (!!brandMapping[item] && !accumulator.includes(brandMapping[item])) {
                accumulator.push(brandMapping[item]);
            }
            return accumulator;
        }, []);
    }

    const latestSupportedVersion = 14;
    class ApplePayElement extends UIElement {
        static type = 'applepay';
        static defaultProps = defaultProps$4;
        constructor(props) {
            super(props);
            this.startSession = this.startSession.bind(this);
            this.submit = this.submit.bind(this);
            this.validateMerchant = this.validateMerchant.bind(this);
        }
        /**
         * Formats the component props
         */ formatProps(props) {
            const version = props.version || resolveSupportedVersion(latestSupportedVersion);
            const supportedNetworks = props.brands?.length ? mapBrands$1(props.brands) : props.supportedNetworks;
            return {
                ...props,
                configuration: props.configuration,
                supportedNetworks,
                version,
                totalPriceLabel: props.totalPriceLabel || props.configuration?.merchantName
            };
        }
        /**
         * Formats the component data output
         */ formatData() {
            return {
                paymentMethod: {
                    type: ApplePayElement.type,
                    ...this.state
                }
            };
        }
        submit() {
            return this.startSession(this.props.onAuthorized);
        }
        startSession(onPaymentAuthorized) {
            const { version, onValidateMerchant, onPaymentMethodSelected, onShippingMethodSelected, onShippingContactSelected } = this.props;
            const paymentRequest = preparePaymentRequest({
                companyName: this.props.configuration.merchantName,
                ...this.props
            });
            const session = new ApplePayService(paymentRequest, {
                version,
                onError: error => {
                    this.handleError(
                        new AdyenCheckoutError('ERROR', 'ApplePay - Something went wrong on ApplePayService', {
                            cause: error
                        })
                    );
                },
                onCancel: event => {
                    this.handleError(
                        new AdyenCheckoutError('CANCEL', 'ApplePay UI dismissed', {
                            cause: event
                        })
                    );
                },
                onPaymentMethodSelected,
                onShippingMethodSelected,
                onShippingContactSelected,
                onValidateMerchant: onValidateMerchant || this.validateMerchant,
                onPaymentAuthorized: (resolve, reject, event) => {
                    if (event?.payment?.token?.paymentData) {
                        this.setState({
                            applePayToken: btoa(JSON.stringify(event.payment.token.paymentData))
                        });
                    }
                    super.submit();
                    onPaymentAuthorized(resolve, reject, event);
                }
            });
            return new Promise((resolve, reject) => this.props.onClick(resolve, reject))
                .then(() => {
                    session.begin();
                })
                .catch(() => ({}));
        }
        async validateMerchant(resolve, reject) {
            const { hostname: domainName } = window.location;
            const { clientKey, configuration, loadingContext, initiative } = this.props;
            const { merchantName, merchantId } = configuration;
            const path = `${APPLEPAY_SESSION_ENDPOINT}?clientKey=${clientKey}`;
            const options = {
                loadingContext,
                path
            };
            const request = {
                displayName: merchantName,
                domainName,
                initiative,
                merchantIdentifier: merchantId
            };
            try {
                const response = await httpPost(options, request);
                const decodedData = base64.decode(response.data);
                if (!decodedData) reject('Could not decode Apple Pay session');
                const session = JSON.parse(decodedData);
                resolve(session);
            } catch (e) {
                reject('Could not get Apple Pay session');
            }
        }
        /**
         * Validation
         *
         * @remarks
         * Apple Pay does not require any specific validation
         */ get isValid() {
            return true;
        }
        /**
         * Determine a shopper's ability to return a form of payment from Apple Pay.
         * @returns Promise Resolve/Reject whether the shopper can use Apple Pay
         */ isAvailable() {
            if (document.location.protocol !== 'https:') {
                return Promise.reject(
                    new AdyenCheckoutError('IMPLEMENTATION_ERROR', 'Trying to start an Apple Pay session from an insecure document')
                );
            }
            if (!this.props.onValidateMerchant && !this.props.clientKey) {
                return Promise.reject(new AdyenCheckoutError('IMPLEMENTATION_ERROR', 'clientKey was not provided'));
            }
            try {
                if (window.ApplePaySession && ApplePaySession.canMakePayments() && ApplePaySession.supportsVersion(this.props.version)) {
                    return Promise.resolve(true);
                }
            } catch (error) {
                console.warn(error);
            }
            return Promise.reject(new AdyenCheckoutError('ERROR', 'Apple Pay is not available on this device'));
        }
        /**
         * Renders the Apple Pay button or nothing in the Dropin
         */ render() {
            if (this.props.showPayButton) {
                return /*#__PURE__*/ y$1(ApplePayButton, {
                    i18n: this.props.i18n,
                    buttonColor: this.props.buttonColor,
                    buttonType: this.props.buttonType,
                    onClick: e => {
                        e.preventDefault();
                        this.submit();
                    }
                });
            }
            return null;
        }
    }

    var CashAppPayEvents;
    (function (CashAppPayEvents) {
        CashAppPayEvents['CustomerDismissed'] = 'CUSTOMER_DISMISSED';
        CashAppPayEvents['CustomerRequestApproved'] = 'CUSTOMER_REQUEST_APPROVED';
        CashAppPayEvents['CustomerRequestDeclined'] = 'CUSTOMER_REQUEST_DECLINED';
        CashAppPayEvents['CustomerRequestFailed'] = 'CUSTOMER_REQUEST_FAILED';
    })(CashAppPayEvents || (CashAppPayEvents = {}));

    function CashAppComponent({ enableStoreDetails, cashAppService, onClick, onChangeStoreDetails, onAuthorize, onError }) {
        const cashAppRef = _(null);
        const [status, setStatus] = h('loading');
        const subscriptions = _([]);
        const [storePaymentMethod, setStorePaymentMethod] = h(false);
        this.setStatus = setStatus;
        const initializeCashAppSdk = T(async () => {
            try {
                await cashAppService.initialize();
                subscriptions.current = [
                    cashAppService.subscribeToEvent(CashAppPayEvents.CustomerDismissed, () => {
                        onError(new AdyenCheckoutError('CANCEL', 'Customer dismissed the modal'));
                    }),
                    cashAppService.subscribeToEvent(CashAppPayEvents.CustomerRequestDeclined, async () => {
                        onError(new AdyenCheckoutError('ERROR', 'Payment declined by CashAppPay'));
                        await cashAppService.restart();
                        await cashAppService.renderButton(cashAppRef.current);
                    }),
                    cashAppService.subscribeToEvent(CashAppPayEvents.CustomerRequestApproved, ({ customerProfile, grants }) => {
                        const cashAppPaymentData = {
                            ...(customerProfile?.id && {
                                customerId: customerProfile.id
                            }),
                            ...(customerProfile?.cashtag && {
                                cashTag: customerProfile.cashtag
                            }),
                            ...(grants?.payment?.grantId && {
                                grantId: grants.payment.grantId
                            }),
                            ...(grants?.onFile?.grantId && {
                                onFileGrantId: grants.onFile.grantId
                            })
                        };
                        onAuthorize(cashAppPaymentData);
                    }),
                    cashAppService.subscribeToEvent(CashAppPayEvents.CustomerRequestFailed, () => {
                        onError(new AdyenCheckoutError('ERROR', 'Customer request failed'));
                    })
                ];
                await cashAppService.renderButton(cashAppRef.current);
                setStatus('ready');
            } catch (error) {
                onError(error);
            }
        }, [cashAppService, onError, onAuthorize]);
        p(() => {
            if (enableStoreDetails) {
                cashAppService.setStorePaymentMethod(storePaymentMethod);
                onChangeStoreDetails(storePaymentMethod);
            }
        }, [enableStoreDetails, storePaymentMethod]);
        p(() => {
            initializeCashAppSdk();
            return () => {
                cashAppService.restart();
                subscriptions.current.forEach(unsubscribeFn => unsubscribeFn());
            };
        }, [cashAppService, initializeCashAppSdk]);
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__cashapp'
            },
            status === 'loading' && /*#__PURE__*/ y$1(Spinner, null),
            status !== 'loading' &&
                enableStoreDetails &&
                /*#__PURE__*/ y$1(StoreDetails, {
                    storeDetails: storePaymentMethod,
                    onChange: setStorePaymentMethod
                }),
            /*#__PURE__*/ y$1('div', {
                onClick: onClick,
                className: 'adyen-checkout__cashapp-button',
                ref: cashAppRef
            })
        );
    }

    class CashAppService {
        sdkLoader;
        configuration;
        pay;
        /**
         * Reference to CashApp 'begin' method
         */ startAuthorization;
        constructor(sdkLoader, configuration) {
            this.configuration = configuration;
            this.sdkLoader = sdkLoader;
            if (!configuration.clientId) {
                console.warn('CashAppService: clientId is missing');
            }
        }
        get hasOneTimePayment() {
            const { amount } = this.configuration;
            return amount?.value > 0;
        }
        get hasOnFilePayment() {
            return this.configuration.storePaymentMethod;
        }
        setStorePaymentMethod(store) {
            this.configuration.storePaymentMethod = store;
        }
        async initialize() {
            try {
                const { environment, clientId } = this.configuration;
                const cashApp = await this.sdkLoader.load(environment);
                this.pay = await cashApp.pay({
                    clientId
                });
            } catch (error) {
                throw new AdyenCheckoutError('ERROR', 'Error during initialization', {
                    cause: error
                });
            }
        }
        async renderButton(target) {
            try {
                const { button, useCashAppButtonUi } = this.configuration;
                const { begin } = await this.pay.render(target, {
                    manage: false,
                    button: useCashAppButtonUi
                        ? {
                              width: 'full',
                              shape: 'semiround',
                              ...button
                          }
                        : false
                });
                this.startAuthorization = begin;
            } catch (error) {
                throw new AdyenCheckoutError('ERROR', 'Error rendering CashAppPay button', {
                    cause: error
                });
            }
        }
        begin() {
            if (!this.startAuthorization) console.warn('CashAppService - begin() not available');
            else this.startAuthorization();
        }
        subscribeToEvent(eventType, callback) {
            this.pay.addEventListener(eventType, callback);
            return () => {
                this.pay.removeEventListener(eventType, callback);
            };
        }
        async createCustomerRequest() {
            try {
                const { referenceId, amount, scopeId, redirectURL = window.location.href } = this.configuration;
                const customerRequest = {
                    referenceId,
                    redirectURL,
                    actions: {
                        ...(this.hasOneTimePayment && {
                            payment: {
                                amount,
                                scopeId
                            }
                        }),
                        ...(this.hasOnFilePayment && {
                            onFile: {
                                scopeId
                            }
                        })
                    }
                };
                await this.pay.customerRequest(customerRequest);
            } catch (error) {
                throw new AdyenCheckoutError('ERROR', 'Something went wrong during customerRequest creation', {
                    cause: error
                });
            }
        }
        async restart() {
            await this.pay.restart();
        }
    }

    const CASHAPPPAY_SANDBOX_SDK = 'https://sandbox.kit.cash.app/v1/pay.js';
    const CASHAPPPAY_PROD_SDK = 'https://kit.cash.app/v1/pay.js';

    class CashAppSdkLoader {
        isSdkIsAvailableOnWindow() {
            // @ts-ignore CashApp is created by the Cash App SDK
            return !!window.CashApp;
        }
        async load(environment) {
            const url = environment.toLowerCase().includes('live') ? CASHAPPPAY_PROD_SDK : CASHAPPPAY_SANDBOX_SDK;
            if (!this.isSdkIsAvailableOnWindow()) {
                const scriptElement = new Script(url);
                await scriptElement.load();
            }
            // @ts-ignore CashApp is created by the Cash App SDK
            return window.CashApp;
        }
    }

    var defaultProps$3 = {
        onClick: actions => {
            actions.resolve();
        },
        showPayButton: true,
        enableStoreDetails: false,
        storePaymentMethod: false
    };

    class CashAppPay extends UIElement {
        static type = 'cashapp';
        cashAppService;
        static defaultProps = defaultProps$3;
        constructor(props) {
            super(props);
            if (this.props.enableStoreDetails && this.props.storePaymentMethod) {
                console.warn(
                    'CashAppPay: enableStoreDetails AND storePaymentMethod configuration properties should not be used together. That can lead to undesired behavior.'
                );
            }
            if (this.props.storedPaymentMethodId) {
                return;
            }
            this.cashAppService = new CashAppService(new CashAppSdkLoader(), {
                storePaymentMethod: this.props.storePaymentMethod,
                useCashAppButtonUi: this.props.showPayButton,
                environment: this.props.environment,
                amount: this.props.amount,
                redirectURL: this.props.redirectURL,
                clientId: this.props.configuration?.clientId,
                scopeId: this.props.configuration?.scopeId,
                button: this.props.button,
                referenceId: this.props.referenceId
            });
        }
        formatProps(props) {
            return {
                ...props,
                enableStoreDetails: props.session?.configuration?.enableStoreDetails || props.enableStoreDetails
            };
        }
        formatData() {
            const { shopperWantsToStore, grantId, onFileGrantId, cashTag, customerId } = this.state.data || {};
            const { storePaymentMethod: storePaymentMethodSetByMerchant, storedPaymentMethodId } = this.props;
            /**
             * We include 'storePaymentMethod' flag if we either Display the Checkbox OR if it is non-sessions flow AND the merchant wants to store the payment method
             */ const includeStorePaymentMethod = this.props.enableStoreDetails || (!this.props.session && storePaymentMethodSetByMerchant);
            if (storedPaymentMethodId) {
                return {
                    paymentMethod: {
                        type: CashAppPay.type,
                        storedPaymentMethodId
                    }
                };
            }
            const shouldAddOnFileProperties = onFileGrantId && cashTag;
            return {
                paymentMethod: {
                    type: CashAppPay.type,
                    ...(grantId && {
                        grantId
                    }),
                    ...(customerId && {
                        customerId
                    }),
                    ...(shouldAddOnFileProperties && {
                        onFileGrantId,
                        cashtag: cashTag
                    })
                },
                ...(includeStorePaymentMethod && {
                    storePaymentMethod: storePaymentMethodSetByMerchant || shopperWantsToStore
                })
            };
        }
        get displayName() {
            if (this.props.storedPaymentMethodId && this.props.cashtag) {
                return this.props.cashtag;
            }
            return this.props.name;
        }
        get additionalInfo() {
            return this.props.storedPaymentMethodId ? 'Cash App Pay' : '';
        }
        submit = () => {
            const { onClick, storedPaymentMethodId } = this.props;
            if (storedPaymentMethodId) {
                super.submit();
                return;
            }
            let onClickPromiseRejected = false;
            new Promise((resolve, reject) =>
                onClick({
                    resolve,
                    reject
                })
            )
                .catch(() => {
                    onClickPromiseRejected = true;
                    throw Error('onClick rejected');
                })
                .then(() => {
                    return this.cashAppService.createCustomerRequest();
                })
                .then(() => {
                    this.cashAppService.begin();
                })
                .catch(error => {
                    if (onClickPromiseRejected) {
                        // Swallow exception triggered by onClick reject
                        return;
                    }
                    this.handleError(error);
                });
        };
        get isValid() {
            return true;
        }
        handleOnChangeStoreDetails = storePayment => {
            const data = {
                ...this.state.data,
                shopperWantsToStore: storePayment
            };
            this.setState({
                data
            });
        };
        handleAuthorize = cashAppPaymentData => {
            const data = {
                ...this.state.data,
                ...cashAppPaymentData
            };
            this.setState({
                data,
                valid: {},
                errors: {},
                isValid: true
            });
            super.submit();
        };
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    resources: this.resources,
                    loadingContext: this.props.loadingContext
                },
                this.props.storedPaymentMethodId
                    ? /*#__PURE__*/ y$1(RedirectButton, {
                          label: payAmountLabel(this.props.i18n, this.props.amount),
                          icon: this.resources?.getImage({
                              imageFolder: 'components/'
                          })('lock'),
                          name: this.displayName,
                          amount: this.props.amount,
                          payButton: this.payButton,
                          onSubmit: this.submit,
                          ref: ref => {
                              this.componentRef = ref;
                          }
                      })
                    : /*#__PURE__*/ y$1(CashAppComponent, {
                          ref: ref => {
                              this.componentRef = ref;
                          },
                          enableStoreDetails: this.props.enableStoreDetails,
                          cashAppService: this.cashAppService,
                          onChangeStoreDetails: this.handleOnChangeStoreDetails,
                          onError: this.handleError,
                          onClick: this.submit,
                          onAuthorize: this.handleAuthorize
                      })
            );
        }
    }

    class ClickToPayElement extends UIElement {
        static type = 'clicktopay';
        clickToPayService;
        ctpConfiguration;
        constructor(props) {
            super(props);
            this.ctpConfiguration = {
                shopperEmail: this.props.shopperEmail,
                telephoneNumber: this.props.telephoneNumber,
                merchantDisplayName: this.props.merchantDisplayName,
                locale: this.props.locale,
                onReady: this.props.onReady
            };
            this.clickToPayService = createClickToPayService(this.props.configuration, this.ctpConfiguration, this.props.environment);
            this.clickToPayService?.initialize().catch(error => {
                this.handleError(
                    new AdyenCheckoutError('ERROR', error.toString(), {
                        cause: error
                    })
                );
            });
            if (!this.clickToPayService) {
                console.warn('ClickToPay not initialized - Likely the payment method is not configured or its configuration is missing');
            }
        }
        get isValid() {
            return true;
        }
        get browserInfo() {
            return collectBrowserInfo();
        }
        formatData() {
            const { srcScheme, srcCorrelationId, srcTokenReference, srcCheckoutPayload, srcDigitalCardId } = this.state.data;
            return {
                paymentMethod: {
                    type: ClickToPayElement.type,
                    ...(srcScheme && {
                        srcScheme
                    }),
                    ...(srcCorrelationId && {
                        srcCorrelationId
                    }),
                    ...(srcTokenReference && {
                        srcTokenReference
                    }),
                    ...(srcCheckoutPayload && {
                        srcCheckoutPayload
                    }),
                    ...(srcDigitalCardId && {
                        srcDigitalCardId
                    })
                },
                browserInfo: this.browserInfo,
                origin: window?.location?.origin
            };
        }
        formatProps(props) {
            return {
                ...props,
                disableOtpAutoFocus: props.disableOtpAutoFocus || false,
                shopperEmail: props.shopperEmail || props?.core?.options?.session?.shopperEmail,
                telephoneNumber: props.telephoneNumber || props?.core?.options?.session?.telephoneNumber,
                locale: props.locale || props.i18n?.locale?.replace('-', '_')
            };
        }
        /**
         * Method used to let the merchant know if the shopper have a valid CtP accoubt
         *
         * Resolves Promise if the Shopper has cookies OR has valid CtP account
         * Rejects Promise if account isn't found or if Login screen is triggered
         */ async isAvailable() {
            if (!this.clickToPayService) {
                return Promise.reject();
            }
            if (this.clickToPayService.shopperAccountFound) {
                return Promise.resolve();
            }
            return new Promise((resolve, reject) => {
                this.clickToPayService.subscribeOnStateChange(state => {
                    if (this.clickToPayService.shopperAccountFound) resolve();
                    if (state === CtpState.NotAvailable || state === CtpState.Login || state === CtpState.Idle) reject();
                });
            });
        }
        handleClickToPaySubmit = payload => {
            this.setState({
                data: {
                    ...payload
                },
                valid: {},
                errors: {},
                isValid: true
            });
            this.submit();
        };
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(
                    ClickToPayProvider,
                    {
                        isStandaloneComponent: true,
                        configuration: this.ctpConfiguration,
                        amount: this.props.amount,
                        clickToPayService: this.clickToPayService,
                        setClickToPayRef: this.setComponentRef,
                        onSetStatus: this.setElementStatus,
                        onSubmit: this.handleClickToPaySubmit,
                        onError: this.handleError
                    },
                    /*#__PURE__*/ y$1(ClickToPayComponent, null)
                )
            );
        }
    }

    var config$2 = {
        API_VERSION: 2,
        API_VERSION_MINOR: 0,
        GATEWAY: 'adyen',
        URL: 'https://pay.google.com/gp/p/js/pay.js'
    };

    /**
     * Configure your site's support for payment methods supported by the Google Pay API.
     *
     * @see {@link https://developers.google.com/pay/api/web/reference/object#IsReadyToPayRequest|isReadyToPayRequest}
     * @returns Google Pay API version, payment methods supported by the site
     */ function isReadyToPayRequest({ allowedAuthMethods, allowedCardNetworks, existingPaymentMethodRequired = false }) {
        return {
            apiVersion: config$2.API_VERSION,
            apiVersionMinor: config$2.API_VERSION_MINOR,
            allowedPaymentMethods: [
                {
                    type: 'CARD',
                    parameters: {
                        allowedAuthMethods,
                        allowedCardNetworks
                    },
                    tokenizationSpecification: {
                        type: 'PAYMENT_GATEWAY',
                        parameters: {}
                    }
                }
            ],
            existingPaymentMethodRequired
        };
    }
    /**
     * Provide Google Pay API with a payment amount, currency, and amount status
     *
     * @see {@link https://developers.google.com/pay/api/web/reference/object#TransactionInfo|TransactionInfo}
     * @returns transaction info, suitable for use as transactionInfo property of PaymentDataRequest
     */ function getTransactionInfo({ amount, countryCode = 'US', totalPriceStatus = 'FINAL', ...props }) {
        const formattedPrice = String(getDecimalAmount(amount.value, amount.currency));
        return {
            countryCode,
            currencyCode: amount.currency,
            totalPrice: formattedPrice,
            totalPriceStatus: totalPriceStatus,
            ...props.transactionInfo
        };
    }
    function initiatePaymentRequest({ configuration, ...props }) {
        return {
            apiVersion: config$2.API_VERSION,
            apiVersionMinor: config$2.API_VERSION_MINOR,
            transactionInfo: getTransactionInfo(props),
            merchantInfo: {
                merchantId: configuration.merchantId,
                merchantName: configuration.merchantName,
                ...(configuration.merchantOrigin
                    ? {
                          merchantOrigin: configuration.merchantOrigin
                      }
                    : {}),
                ...(configuration.authJwt
                    ? {
                          authJwt: configuration.authJwt
                      }
                    : {})
            },
            allowedPaymentMethods: [
                {
                    type: 'CARD',
                    tokenizationSpecification: {
                        type: 'PAYMENT_GATEWAY',
                        parameters: {
                            gateway: config$2.GATEWAY,
                            gatewayMerchantId: configuration.gatewayMerchantId
                        }
                    },
                    parameters: {
                        allowedAuthMethods: props.allowedAuthMethods,
                        allowedCardNetworks: props.allowedCardNetworks,
                        assuranceDetailsRequired: props.assuranceDetailsRequired,
                        allowPrepaidCards: props.allowPrepaidCards,
                        allowCreditCards: props.allowCreditCards,
                        billingAddressRequired: props.billingAddressRequired,
                        billingAddressParameters: props.billingAddressParameters
                    }
                }
            ],
            emailRequired: props.emailRequired,
            shippingAddressRequired: props.shippingAddressRequired,
            shippingAddressParameters: props.shippingAddressParameters,
            shippingOptionRequired: props.shippingOptionRequired,
            shippingOptionParameters: props.shippingOptionParameters,
            callbackIntents: props.callbackIntents
        };
    }

    /**
     *
     */ function resolveEnvironment(env = 'TEST') {
        const environment = env.toLowerCase();
        switch (environment) {
            case 'production':
            case 'live':
            case 'live-au':
            case 'live-apse':
            case 'live-us':
            case 'live-in':
                return 'PRODUCTION';
            default:
                return 'TEST';
        }
    }
    function mapBrands(brands) {
        const brandMapping = {
            mc: 'MASTERCARD',
            amex: 'AMEX',
            visa: 'VISA',
            interac: 'INTERAC',
            discover: 'DISCOVER'
        };
        return brands.reduce((accumulator, item) => {
            if (!!brandMapping[item] && !accumulator.includes(brandMapping[item])) {
                accumulator.push(brandMapping[item]);
            }
            return accumulator;
        }, []);
    }
    const supportedLocales = [
        'en',
        'ar',
        'bg',
        'ca',
        'cs',
        'da',
        'de',
        'el',
        'es',
        'et',
        'fi',
        'fr',
        'hr',
        'id',
        'it',
        'ja',
        'ko',
        'ms',
        'nl',
        'no',
        'pl',
        'pt',
        'ru',
        'sk',
        'sl',
        'sr',
        'sv',
        'th',
        'tr',
        'uk',
        'zh'
    ];
    function getGooglePayLocale(locale = '') {
        const twoLetterLocale = locale.toLowerCase().substring(0, 2);
        return supportedLocales.includes(twoLetterLocale) ? twoLetterLocale : null;
    }

    class GooglePayService {
        paymentsClient;
        constructor(props) {
            const environment = resolveEnvironment(props.environment);
            if (environment === 'TEST' && undefined === 'development') {
                console.warn('Google Pay initiated in TEST mode. Request non-chargeable payment methods suitable for testing.');
            }
            this.paymentsClient = this.getGooglePaymentsClient({
                environment,
                paymentDataCallbacks: props.paymentDataCallbacks
            });
        }
        /**
         * Initialize a Google Pay API client
         *
         * @see {@link https://developers.google.com/pay/api/web/reference/client#PaymentsClient|PaymentsClient constructor}
         * @returns Google Pay API client
         */ async getGooglePaymentsClient(paymentOptions) {
            if (!window.google?.payments) {
                const script = new Script(config$2.URL);
                await script.load();
            }
            return new google.payments.api.PaymentsClient(paymentOptions);
        }
        /**
         * Determine a shopper's ability to return a form of payment from the Google Pay API.
         * @see {@link https://developers.google.com/pay/api/web/reference/client#isReadyToPay|isReadyToPay}
         */ isReadyToPay(props) {
            if (!this.paymentsClient) return Promise.reject(new Error('Google Pay is not available'));
            return this.paymentsClient.then(client => client.isReadyToPay(isReadyToPayRequest(props)));
        }
        prefetchPaymentData(props) {
            if (!this.paymentsClient) throw new Error('Google Pay is not available');
            const paymentDataRequest = initiatePaymentRequest(props);
            this.paymentsClient.then(client => client.prefetchPaymentData(paymentDataRequest));
        }
        /**
         * Show Google Pay payment sheet when Google Pay payment button is clicked
         * @returns paymentData response from Google Pay API after user approves payment
         * @see {@link https://developers.google.com/pay/api/web/reference/object#PaymentData|PaymentData object reference}
         */ initiatePayment(props) {
            if (!this.paymentsClient) throw new Error('Google Pay is not available');
            const paymentDataRequest = initiatePaymentRequest(props);
            return this.paymentsClient.then(client => client.loadPaymentData(paymentDataRequest));
        }
    }

    class GooglePayButton extends k$1 {
        paywithgoogleWrapper;
        static defaultProps = {
            buttonColor: 'default',
            buttonType: 'long',
            buttonSizeMode: 'static' // long, short
        };
        clicked = false;
        handleClick = e => {
            e.preventDefault();
            e.stopPropagation();
            if (!this.clicked) {
                this.props.onClick(e);
                this.clicked = true;
                setTimeout(() => {
                    this.clicked = false;
                }, 300);
            }
        };
        componentDidMount() {
            const { buttonColor, buttonType, buttonLocale, buttonSizeMode, buttonRootNode, paymentsClient } = this.props;
            paymentsClient
                .then(client =>
                    client.createButton({
                        onClick: this.handleClick,
                        buttonType,
                        buttonColor,
                        buttonLocale,
                        buttonSizeMode,
                        buttonRootNode
                    })
                )
                .then(googlePayButton => {
                    this.paywithgoogleWrapper.appendChild(googlePayButton);
                });
        }
        render() {
            return /*#__PURE__*/ y$1('span', {
                className: 'adyen-checkout__paywithgoogle',
                ref: ref => {
                    this.paywithgoogleWrapper = ref;
                }
            });
        }
    }

    var defaultProps$2 = {
        environment: 'TEST',
        // isReadyToPayRequest
        existingPaymentMethodRequired: false,
        // ButtonOptions
        // https://developers.google.com/pay/api/web/reference/object#ButtonOptions
        buttonColor: 'default',
        buttonType: 'long',
        buttonSizeMode: undefined,
        showPayButton: true,
        // PaymentDataRequest
        configuration: {
            // Adyen's merchant account
            gatewayMerchantId: '',
            // https://developers.google.com/pay/api/web/reference/object#MerchantInfo
            merchantId: '',
            merchantName: '' // E.g Example Merchant,
        },
        // Payment
        amount: {
            value: 0,
            currency: 'USD'
        },
        countryCode: 'US',
        totalPriceStatus: 'FINAL',
        // Callbacks
        onAuthorized: params => params,
        onClick: resolve => resolve(),
        // CardParameters
        // https://developers.google.com/pay/api/web/reference/object#CardParameters
        allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],
        allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],
        allowCreditCards: true,
        allowPrepaidCards: true,
        billingAddressRequired: false,
        billingAddressParameters: undefined,
        assuranceDetailsRequired: false,
        emailRequired: false,
        shippingAddressRequired: false,
        shippingAddressParameters: undefined,
        shippingOptionRequired: false,
        shippingOptionParameters: undefined,
        paymentMethods: []
    };

    class GooglePay extends UIElement {
        static type = 'paywithgoogle';
        static txVariants = ['paywithgoogle', 'googlepay'];
        static defaultProps = defaultProps$2;
        googlePay = new GooglePayService(this.props);
        /**
         * Formats the component data input
         * For legacy support - maps configuration.merchantIdentifier to configuration.merchantId
         */ formatProps(props) {
            const allowedCardNetworks = props.brands?.length ? mapBrands(props.brands) : props.allowedCardNetworks;
            const buttonSizeMode = props.buttonSizeMode ?? (props.isDropin ? 'fill' : 'static');
            const buttonLocale = getGooglePayLocale(props.buttonLocale ?? props.i18n?.locale);
            return {
                ...props,
                showButton: props.showPayButton === true,
                configuration: props.configuration,
                allowedCardNetworks,
                buttonSizeMode,
                buttonLocale
            };
        }
        /**
         * Formats the component data output
         */ formatData() {
            return {
                paymentMethod: {
                    type: this.type,
                    ...this.state
                },
                browserInfo: this.browserInfo
            };
        }
        submit = () => {
            const { onAuthorized = () => {} } = this.props;
            return new Promise((resolve, reject) => this.props.onClick(resolve, reject))
                .then(() => this.googlePay.initiatePayment(this.props))
                .then(paymentData => {
                    // setState will trigger an onChange event
                    this.setState({
                        googlePayToken: paymentData.paymentMethodData.tokenizationData.token,
                        googlePayCardNetwork: paymentData.paymentMethodData.info.cardNetwork
                    });
                    super.submit();
                    return onAuthorized(paymentData);
                })
                .catch(error => {
                    if (error.statusCode === 'CANCELED') {
                        this.handleError(
                            new AdyenCheckoutError('CANCEL', error.toString(), {
                                cause: error
                            })
                        );
                    } else {
                        this.handleError(
                            new AdyenCheckoutError('ERROR', error.toString(), {
                                cause: error
                            })
                        );
                    }
                });
        };
        /**
         * Validation
         */ get isValid() {
            return !!this.state.googlePayToken;
        }
        /**
         * Determine a shopper's ability to return a form of payment from the Google Pay API.
         */ isAvailable = () => {
            return this.isReadyToPay()
                .then(response => {
                    if (!response.result) {
                        throw new Error('Google Pay is not available');
                    }
                    if (response.paymentMethodPresent === false) {
                        throw new Error('Google Pay - No paymentMethodPresent');
                    }
                    return true;
                })
                .catch(() => {
                    return false;
                });
        };
        /**
         * Determine a shopper's ability to return a form of payment from the Google Pay API.
         */ isReadyToPay = () => {
            return this.googlePay.isReadyToPay(this.props);
        };
        /**
         * Use this method to prefetch a PaymentDataRequest configuration to improve loadPaymentData execution time on later user interaction. No value is returned.
         */ prefetch = () => {
            return this.googlePay.prefetchPaymentData(this.props);
        };
        get browserInfo() {
            return collectBrowserInfo();
        }
        get icon() {
            return (
                this.props.icon ??
                this.resources.getImage({
                    loadingContext: this.props.loadingContext
                })('googlepay')
            );
        }
        render() {
            if (this.props.showPayButton) {
                return /*#__PURE__*/ y$1(GooglePayButton, {
                    buttonColor: this.props.buttonColor,
                    buttonType: this.props.buttonType,
                    buttonSizeMode: this.props.buttonSizeMode,
                    buttonLocale: this.props.buttonLocale,
                    buttonRootNode: this.props.buttonRootNode,
                    paymentsClient: this.googlePay.paymentsClient,
                    onClick: this.submit
                });
            }
            return null;
        }
    }

    const INTEGRATION_DATE = '2020-02-01';
    const PAYPAL_JS_URL = 'https://www.paypal.com/sdk/js';
    const ADYEN_CLIENTID_TEST = 'AXy9hIzWB6h_LjZUHjHmsbsiicSIbL4GKOrcgomEedVjduUinIU4C2llxkW5p0OG0zTNgviYFceaXEnj';
    const ADYEN_CLIENTID_LIVE = 'AU0Z-TP9t5_9196agaBN6ZD3UAwypdP1IX8ZYH3PcNNAQMXUTDQlChruXqQEhyI6-NKBKowN6ydkj477';
    const SUPPORTED_COLORS_FOR_CREDIT = ['black', 'white'];
    const SUPPORTED_LOCALES = [
        'en_US',
        'en_AU',
        'en_GB',
        'fr_CA',
        'es_ES',
        'it_IT',
        'fr_FR',
        'de_DE',
        'pt_BR',
        'zh_CN',
        'da_DK',
        'zh_HK',
        'id_ID',
        'he_IL',
        'ja_JP',
        'ko_KR',
        'nl_NL',
        'no_NO',
        'pl_PL',
        'pt_PT',
        'ru_RU',
        'sv_SE',
        'th_TH',
        'zh_TW'
    ];

    /**
     * Processes and returns a new style object.
     */ const getStyle = (fundingSource, style = {}) => {
        if (fundingSource === 'paypal')
            return {
                ...style
            };
        return Object.keys(style).reduce((acc, prop) => {
            const value = style[prop];
            if (prop !== 'color' || SUPPORTED_COLORS_FOR_CREDIT.includes(value)) {
                acc[prop] = value;
            }
            return acc;
        }, {});
    };
    /**
     * Returns either a locale supported by PayPal or null, in order to let the PayPal SDK auto-detect the shopper locale.
     */ const getSupportedLocale = locale => {
        const formattedLocale = locale ? locale.replace('-', '_') : null;
        const supportedLocale = SUPPORTED_LOCALES.includes(formattedLocale) ? formattedLocale : null;
        return supportedLocale;
    };
    /**
     * Returns an object of settings for the PayPal SDK
     */ const getPaypalSettings = ({ amount, countryCode, debug, environment = '', locale, configuration, commit, vault, enableMessages }) => {
        const shopperLocale = getSupportedLocale(locale);
        const currency = amount ? amount.currency : null;
        const isTestEnvironment = environment.toLowerCase() === 'test';
        const clientId = isTestEnvironment ? ADYEN_CLIENTID_TEST : ADYEN_CLIENTID_LIVE;
        const { merchantId, intent } = configuration;
        const components = `buttons,funding-eligibility${enableMessages ? ',messages' : ''}`;
        return {
            ...(merchantId && {
                'merchant-id': merchantId
            }),
            ...(shopperLocale && {
                locale: shopperLocale
            }),
            ...(countryCode &&
                isTestEnvironment && {
                    'buyer-country': countryCode
                }),
            ...(debug &&
                isTestEnvironment && {
                    debug
                }),
            ...(currency && {
                currency
            }),
            ...(intent && {
                intent
            }),
            commit,
            vault,
            'client-id': clientId,
            'integration-date': INTEGRATION_DATE,
            'enable-funding': 'paylater,venmo',
            components
        };
    };
    /**
     * Returns the PayPal SDK script URL with query parameters
     * @see {@link https://developer.paypal.com/docs/checkout/reference/customize-sdk/}
     */ const getPaypalUrl = props => {
        const settings = getPaypalSettings(props);
        const params = decodeURIComponent(
            Object.keys(settings)
                .map(key => `${key}=${settings[key]}`)
                .join('&')
        );
        return `${PAYPAL_JS_URL}?${params}`;
    };

    function PaypalButtons({
        onInit,
        onApprove,
        onClick,
        onCancel,
        onError,
        onShippingChange,
        onSubmit,
        isProcessingPayment,
        paypalRef,
        style,
        ...props
    }) {
        const { i18n } = useCoreContext();
        const isTokenize = props.configuration?.intent === 'tokenize';
        const paypalButtonRef = _(null);
        const creditButtonRef = _(null);
        const payLaterButtonRef = _(null);
        const venmoButtonRef = _(null);
        const createButton = (fundingSource, buttonRef) => {
            const configuration = {
                ...(isTokenize && {
                    createBillingAgreement: onSubmit
                }),
                ...(!isTokenize && {
                    createOrder: onSubmit
                }),
                ...(!isTokenize &&
                    fundingSource !== 'venmo' && {
                        onShippingChange
                    }),
                fundingSource,
                style: getStyle(fundingSource, style),
                onInit,
                onClick,
                onCancel,
                onError,
                onApprove
            };
            const button = paypalRef.Buttons(configuration);
            if (button.isEligible()) {
                button.render(buttonRef.current);
            }
        };
        p(() => {
            const { PAYPAL, CREDIT, PAYLATER, VENMO } = paypalRef.FUNDING;
            createButton(PAYPAL, paypalButtonRef);
            if (!props.blockPayPalCreditButton) createButton(CREDIT, creditButtonRef);
            if (!props.blockPayPalPayLaterButton) createButton(PAYLATER, payLaterButtonRef);
            if (!props.blockPayPalVenmoButton) createButton(VENMO, venmoButtonRef);
        }, []);
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: classNames('adyen-checkout__paypal__buttons', {
                    'adyen-checkout__paypal-processing': isProcessingPayment
                })
            },
            /*#__PURE__*/ y$1('div', {
                className: 'adyen-checkout__paypal__button adyen-checkout__paypal__button--paypal',
                ref: paypalButtonRef
            }),
            /*#__PURE__*/ y$1('div', {
                className: 'adyen-checkout__paypal__button adyen-checkout__paypal__button--credit',
                ref: creditButtonRef
            }),
            /*#__PURE__*/ y$1('div', {
                className: 'adyen-checkout__paypal__button adyen-checkout__paypal__button--pay-later',
                ref: payLaterButtonRef
            }),
            /*#__PURE__*/ y$1('div', {
                className: 'adyen-checkout__paypal__button adyen-checkout__paypal__button--venmo',
                ref: venmoButtonRef
            }),
            isProcessingPayment &&
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__paypal'
                    },
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            className: 'adyen-checkout__paypal__status adyen-checkout__paypal__status--processing'
                        },
                        /*#__PURE__*/ y$1(Spinner, {
                            size: 'medium',
                            inline: true
                        }),
                        ' ',
                        i18n.get('paypal.processingPayment')
                    )
                )
        );
    }

    function PaypalComponent({ onApprove, onCancel, onChange, onError, onSubmit, ...props }) {
        const [status, setStatus] = h('pending');
        this.setStatus = setStatus;
        const handleOnApprove = T(
            (data, actions) => {
                setStatus('processing');
                onApprove(data, actions);
            },
            [onApprove]
        );
        const handlePaypalLoad = () => {
            setStatus('ready');
        };
        p(() => {
            const src = getPaypalUrl(props);
            const attributes = {
                    ...(props.cspNonce && {
                        nonce: props.cspNonce
                    })
                },
                dataAttributes = {
                    ...(props.cspNonce && {
                        cspNonce: props.cspNonce
                    })
                };
            const script = new Script(src, 'body', attributes, dataAttributes);
            script.load().then(handlePaypalLoad);
            return () => {
                script.remove();
            };
        }, []);
        if (status === 'pending') {
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__paypal'
                },
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__paypal__status adyen-checkout__paypal__status--pending'
                    },
                    /*#__PURE__*/ y$1(Spinner, null)
                )
            );
        }
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__paypal'
            },
            /*#__PURE__*/ y$1(PaypalButtons, {
                ...props,
                onCancel: onCancel,
                onChange: onChange,
                onError: onError,
                onSubmit: onSubmit,
                onApprove: handleOnApprove,
                isProcessingPayment: status === 'processing',
                paypalRef: window.paypal
            })
        );
    }

    const defaultProps$1 = {
        environment: 'TEST',
        status: 'loading',
        showPayButton: true,
        // Config
        /**
         * @see {@link https://developer.paypal.com/docs/checkout/reference/customize-sdk/#merchant-id}
         */ merchantId: '',
        /**
         * @see {@link https://developer.paypal.com/docs/business/javascript-sdk/javascript-sdk-configuration/#csp-nonce}
         */ cspNonce: null,
        /**
         * @see {@link https://developer.paypal.com/docs/checkout/reference/customize-sdk/#intent}
         */ intent: null,
        /**
         * @see {@link https://developer.paypal.com/docs/checkout/reference/customize-sdk/#commit}
         */ commit: true,
        /**
         * @see {@link https://developer.paypal.com/docs/checkout/reference/customize-sdk/#vault}
         */ vault: false,
        /**
         * @see {@link https://developer.paypal.com/docs/checkout/integration-features/customize-button/}
         */ style: {
            /**
             * The height of the buttons is set to 48px to align with the default size of our Pay buttons.
             */ height: 48
        },
        blockPayPalCreditButton: false,
        blockPayPalPayLaterButton: false,
        enableMessages: false,
        blockPayPalVenmoButton: false,
        isExpress: false,
        configuration: {
            /**
             * @see {@link https://developer.paypal.com/docs/checkout/reference/customize-sdk/#merchant-id}
             */ merchantId: '',
            /**
             * @see {@link https://developer.paypal.com/docs/checkout/reference/customize-sdk/#intent}
             */ intent: null
        },
        // Events
        onInit: () => {},
        onClick: () => {},
        onCancel: () => {},
        onError: () => {},
        onShippingChange: () => {}
    };

    const ERRORS$1 = {
        INVALID_ACTION: 'Invalid Action',
        NO_TOKEN_PROVIDED: 'No token was provided',
        PAYPAL_OVERLAY_CLOSED: 'PayPal overlay closed',
        SUBMIT_NOT_SUPPORTED: 'Calling submit() is not supported for this payment method',
        WRONG_INSTANCE: 'The instance of the PayPal component being used is not the same which started the payment'
    };

    /**
     * Parses the Order data from PayPal, and create the shopper details object according to how Adyen expects
     */ const createShopperDetails = order => {
        if (!order) {
            return null;
        }
        const shopperName = {
            firstName: order?.payer?.name?.given_name,
            lastName: order?.payer?.name?.surname
        };
        const shopperEmail = order?.payer?.email_address;
        const countryCode = order?.payer?.address?.country_code;
        const telephoneNumber = order?.payer?.phone?.phone_number?.national_number;
        const dateOfBirth = order?.payer?.birth_date;
        const billingAddress = mapPayPalAddressToAdyenAddressFormat({
            paypalAddressObject: order?.payer?.address
        });
        const shippingAddress = mapPayPalAddressToAdyenAddressFormat({
            paypalAddressObject: order?.purchase_units?.[0].shipping?.address
        });
        const shopperDetails = {
            ...(shopperName.firstName && {
                shopperName
            }),
            ...(shopperEmail && {
                shopperEmail
            }),
            ...(dateOfBirth && {
                dateOfBirth
            }),
            ...(telephoneNumber && {
                telephoneNumber
            }),
            ...(countryCode && {
                countryCode
            }),
            ...(billingAddress && {
                billingAddress
            }),
            ...(shippingAddress && {
                shippingAddress
            })
        };
        return Object.keys(shopperDetails).length > 0 ? shopperDetails : null;
    };
    const mapPayPalAddressToAdyenAddressFormat = ({ paypalAddressObject }) => {
        const getStreet = (addressPart1 = null, addressPart2 = null) => {
            if (addressPart1 && addressPart2) return `${addressPart1}, ${addressPart2}`;
            if (addressPart1) return addressPart1;
            if (addressPart2) return addressPart2;
            return null;
        };
        if (!paypalAddressObject) return null;
        const street = getStreet(paypalAddressObject.address_line_1, paypalAddressObject.address_line_2);
        const address = {
            ...(street && {
                street
            }),
            ...(paypalAddressObject.admin_area_1 && {
                stateOrProvince: paypalAddressObject.admin_area_1
            }),
            ...(paypalAddressObject.admin_area_2 && {
                city: paypalAddressObject.admin_area_2
            }),
            ...(paypalAddressObject.postal_code && {
                postalCode: paypalAddressObject.postal_code
            }),
            ...(paypalAddressObject.country_code && {
                country: paypalAddressObject.country_code
            })
        };
        return Object.keys(address).length > 0 ? address : null;
    };

    class PaypalElement extends UIElement {
        static type = 'paypal';
        static subtype = 'sdk';
        paymentData = null;
        resolve = null;
        reject = null;
        static defaultProps = defaultProps$1;
        constructor(props) {
            super(props);
            this.handleSubmit = this.handleSubmit.bind(this);
        }
        formatProps(props) {
            const { merchantId, intent: intentFromConfig } = props.configuration;
            const isZeroAuth = props.amount?.value === 0;
            const intent = isZeroAuth ? 'tokenize' : props.intent || intentFromConfig;
            const vault = intent === 'tokenize' || props.vault;
            return {
                ...props,
                vault,
                configuration: {
                    intent,
                    merchantId
                }
            };
        }
        submit = () => {
            this.handleError(new AdyenCheckoutError('IMPLEMENTATION_ERROR', ERRORS$1.SUBMIT_NOT_SUPPORTED));
        };
        /**
         * Formats the component data output
         */ formatData() {
            const { isExpress } = this.props;
            return {
                paymentMethod: {
                    type: PaypalElement.type,
                    subtype: isExpress ? 'express' : PaypalElement.subtype
                }
            };
        }
        handleAction = action => {
            return this.updateWithAction(action);
        };
        updateWithAction = action => {
            if (action.paymentMethodType !== this.type) throw new Error('Invalid Action');
            if (action.paymentData) {
                this.paymentData = action.paymentData;
            }
            if (action.sdkData && action.sdkData.token) {
                this.handleResolve(action.sdkData.token);
            } else {
                this.handleReject(ERRORS$1.NO_TOKEN_PROVIDED);
            }
            return null;
        };
        /**
         * Dropin Validation
         *
         * @remarks
         * Paypal does not require any specific Dropin validation
         */ get isValid() {
            return true;
        }
        handleCancel = () => {
            this.handleError(new AdyenCheckoutError('CANCEL'));
        };
        handleOnApprove = (data, actions) => {
            const { onShopperDetails } = this.props;
            const state = {
                data: {
                    details: data,
                    paymentData: this.paymentData
                }
            };
            if (!onShopperDetails) {
                this.handleAdditionalDetails(state);
                return;
            }
            return actions.order
                .get()
                .then(paypalOrder => {
                    const shopperDetails = createShopperDetails(paypalOrder);
                    return new Promise((resolve, reject) =>
                        onShopperDetails(shopperDetails, paypalOrder, {
                            resolve,
                            reject
                        })
                    );
                })
                .then(() => this.handleAdditionalDetails(state))
                .catch(error =>
                    this.handleError(
                        new AdyenCheckoutError('ERROR', 'Something went wrong while parsing PayPal Order', {
                            cause: error
                        })
                    )
                );
        };
        handleResolve(token) {
            if (!this.resolve) return this.handleError(new AdyenCheckoutError('ERROR', ERRORS$1.WRONG_INSTANCE));
            this.resolve(token);
        }
        handleReject(errorMessage) {
            if (!this.reject) return this.handleError(new AdyenCheckoutError('ERROR', ERRORS$1.WRONG_INSTANCE));
            this.reject(new Error(errorMessage));
        }
        handleSubmit() {
            super.submit();
            return new Promise((resolve, reject) => {
                this.resolve = resolve;
                this.reject = reject;
            });
        }
        render() {
            if (!this.props.showPayButton) return null;
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(PaypalComponent, {
                    ref: ref => {
                        this.componentRef = ref;
                    },
                    ...this.props,
                    onCancel: this.handleCancel,
                    onChange: this.setState,
                    onApprove: this.handleOnApprove,
                    onError: error => {
                        this.handleError(
                            new AdyenCheckoutError('ERROR', error.toString(), {
                                cause: error
                            })
                        );
                    },
                    onSubmit: this.handleSubmit
                })
            );
        }
    }

    function PhoneInput$1(props) {
        const { i18n } = useCoreContext();
        const [status, setStatus] = h('ready');
        const showPrefix = !!props?.items?.length;
        const { handleChangeFor, triggerValidation, data, valid, errors, isValid } = useForm({
            schema: [...(showPrefix ? ['phonePrefix'] : []), 'phoneNumber'],
            defaultData: {
                ...(showPrefix
                    ? {
                          phonePrefix: props.selected
                      }
                    : {})
            },
            rules: {
                phoneNumber: {
                    modes: ['blur'],
                    errorMessage: 'error.va.gen.01',
                    validate: phone => phone?.length > 6
                }
            }
        });
        p(() => {
            props.onChange({
                data,
                valid,
                errors,
                isValid
            });
        }, [data, valid, errors, isValid]);
        this.showValidation = triggerValidation;
        this.setStatus = setStatus;
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__phone-input'
            },
            /*#__PURE__*/ y$1(
                Field,
                {
                    errorMessage: !!errors.phoneNumber,
                    label: i18n.get(props.phoneLabel),
                    className: classNames({
                        'adyen-checkout__input--phone-number': true
                    }),
                    inputWrapperModifiers: ['phoneInput']
                },
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__input-wrapper'
                    },
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            className: classNames({
                                'adyen-checkout__input': true,
                                'adyen-checkout__input--invalid': !!errors.phoneNumber
                            })
                        },
                        !!showPrefix &&
                            /*#__PURE__*/ y$1(
                                Field,
                                {
                                    inputWrapperModifiers: ['phoneInput']
                                },
                                renderFormField('select', {
                                    className: 'adyen-checkout__dropdown--small adyen-checkout__countryFlag',
                                    filterable: false,
                                    items: props.items,
                                    name: props.prefixName,
                                    onChange: handleChangeFor('phonePrefix'),
                                    placeholder: i18n.get('infix'),
                                    selected: data.phonePrefix
                                }),
                                /*#__PURE__*/ y$1(
                                    'div',
                                    {
                                        className: 'adyen-checkout__phoneNumber'
                                    },
                                    /*#__PURE__*/ y$1('div', null, data.phonePrefix),
                                    /*#__PURE__*/ y$1('input', {
                                        type: 'tel',
                                        name: props.phoneName,
                                        value: data.phoneNumber,
                                        onInput: handleChangeFor('phoneNumber', 'input'),
                                        onBlur: handleChangeFor('phoneNumber', 'blur'),
                                        placeholder: '123 456 789',
                                        className: 'adyen-checkout__input adyen-checkout__input--phoneNumber',
                                        autoCorrect: 'off'
                                    })
                                )
                            )
                    )
                )
            ),
            this.props.showPayButton &&
                this.props.payButton({
                    status
                })
        );
    }
    PhoneInput$1.defaultProps = {
        phoneLabel: 'telephoneNumber'
    };

    /**
     * Formats and returns the passed items, adds flag string
     * @param item - prefix
     * @returns item with added displayable name and image
     */ const formatPrefixName = item => {
        if (!item) {
            throw new Error('No item passed');
        }
        if (!item.code || !item.id) {
            return false;
        }
        const flag = item.code.toUpperCase().replace(/./g, char => (String.fromCodePoint ? String.fromCodePoint(char.charCodeAt(0) + 127397) : ''));
        return {
            ...item,
            name: `${flag} ${item.name} (${item.id})`,
            selectedOptionName: flag
        };
    };
    /** Finds id in list of items, returns it on match
     * @param items - list of items
     * @param countryCode - the item to select
     * @returns item or false
     */ const selectItem = (items, countryCode) => {
        if (items && countryCode) {
            const item = items.find(i => i.code === countryCode);
            if (item) {
                return item.id;
            }
            return false;
        }
        return false;
    };

    const COUNTRIES = [
        {
            id: '+7',
            name: 'Russian Federation',
            code: 'RU'
        },
        {
            id: '+9955',
            name: 'Georgia',
            code: 'GE'
        },
        {
            id: '+507',
            name: 'Panama',
            code: 'PA'
        },
        {
            id: '+44',
            name: 'United Kingdom',
            code: 'GB'
        },
        {
            id: '+992',
            name: 'Tajikistan',
            code: 'TJ'
        },
        {
            id: '+370',
            name: 'Lithuania',
            code: 'LT'
        },
        {
            id: '+972',
            name: 'Israel',
            code: 'IL'
        },
        {
            id: '+996',
            name: 'Kyrgyzstan',
            code: 'KG'
        },
        {
            id: '+380',
            name: 'Ukraine',
            code: 'UA'
        },
        {
            id: '+84',
            name: 'Viet Nam',
            code: 'VN'
        },
        {
            id: '+90',
            name: 'Turkey',
            code: 'TR'
        },
        {
            id: '+994',
            name: 'Azerbaijan',
            code: 'AZ'
        },
        {
            id: '+374',
            name: 'Armenia',
            code: 'AM'
        },
        {
            id: '+371',
            name: 'Latvia',
            code: 'LV'
        },
        {
            id: '+91',
            name: 'India',
            code: 'IN'
        },
        {
            id: '+66',
            name: 'Thailand',
            code: 'TH'
        },
        {
            id: '+373',
            name: 'Moldova',
            code: 'MD'
        },
        {
            id: '+1',
            name: 'United States',
            code: 'US'
        },
        {
            id: '+81',
            name: 'Japan',
            code: 'JP'
        },
        {
            id: '+998',
            name: 'Uzbekistan',
            code: 'UZ'
        },
        {
            id: '+77',
            name: 'Kazakhstan',
            code: 'KZ'
        },
        {
            id: '+375',
            name: 'Belarus',
            code: 'BY'
        },
        {
            id: '+372',
            name: 'Estonia',
            code: 'EE'
        },
        {
            id: '+40',
            name: 'Romania',
            code: 'RO'
        },
        {
            id: '+82',
            name: 'Korea',
            code: 'KR'
        }
    ];

    class QiwiWalletElement extends UIElement {
        static type = 'qiwiwallet';
        static defaultProps = {
            items: COUNTRIES.map(formatPrefixName).filter(item => item !== false),
            countryCode: COUNTRIES[0].code,
            prefixName: 'qiwiwallet.telephoneNumberPrefix',
            phoneName: 'qiwiwallet.telephoneNumber'
        };
        get isValid() {
            return !!this.state.isValid;
        }
        formatProps(props) {
            return {
                onValid: () => {},
                ...props,
                selected: selectItem(props.items, props.countryCode)
            };
        }
        /**
         * Formats the component data output
         */ formatData() {
            return {
                paymentMethod: {
                    type: QiwiWalletElement.type,
                    'qiwiwallet.telephoneNumberPrefix': this.state.data ? this.state.data.phonePrefix : '',
                    'qiwiwallet.telephoneNumber': this.state.data ? this.state.data.phoneNumber : ''
                }
            };
        }
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(PhoneInput$1, {
                    ref: ref => {
                        this.componentRef = ref;
                    },
                    ...this.props,
                    ...this.state,
                    phoneLabel: 'mobileNumber',
                    onChange: this.setState,
                    onSubmit: this.submit,
                    payButton: this.payButton
                })
            );
        }
    }

    const boletoValidationRules = {
        socialSecurityNumber: {
            validate: validateSSN,
            errorMessage: 'error.va.gen.02',
            modes: ['blur']
        },
        shopperEmail: personalDetailsValidationRules.shopperEmail,
        default: {
            validate: value => !!value && value.length > 0,
            errorMessage: 'error.va.gen.02',
            modes: ['blur']
        },
        firstName: {
            validate: value => !!value && value.length > 0,
            errorMessage: 'firstName.invalid',
            modes: ['blur']
        },
        lastName: {
            validate: value => !!value && value.length > 0,
            errorMessage: 'lastName.invalid',
            modes: ['blur']
        }
    };

    const boletoFormatters = {
        socialSecurityNumber: ssn => formatCPFCNPJ(ssn)
    };

    function SendCopyToEmail(props) {
        const { errors, value, onInput, onBlur } = props;
        const { i18n } = useCoreContext();
        const [sendCopyToEmail, setSendCopyToEmail] = h(false);
        const toggleEmailField = e => {
            setSendCopyToEmail(e.target.checked);
            props.onToggle(sendCopyToEmail);
        };
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: classNames('adyen-checkout__fieldset', 'adyen-checkout__fieldset--sendCopyToEmail', props.classNames)
            },
            /*#__PURE__*/ y$1(
                Field,
                {
                    classNameModifiers: ['sendCopyToEmail']
                },
                renderFormField('boolean', {
                    onChange: toggleEmailField,
                    label: i18n.get('boleto.sendCopyToEmail'),
                    name: 'sendCopyToEmail',
                    value: sendCopyToEmail
                })
            ),
            sendCopyToEmail &&
                /*#__PURE__*/ y$1(
                    Field,
                    {
                        label: i18n.get('shopperEmail'),
                        classNameModifiers: ['shopperEmail'],
                        errorMessage: errors && errors.errorMessage ? i18n.get(errors.errorMessage) : !!errors,
                        name: 'shopperEmail'
                    },
                    renderFormField('emailAddress', {
                        name: 'shopperEmail',
                        autoCorrect: 'off',
                        spellCheck: false,
                        value,
                        onInput,
                        onBlur
                    })
                )
        );
    }

    function BrazilPersonalDetail(props) {
        const { i18n, data, handleChangeFor, errors, valid } = props;
        const getErrorMessage = error => (error && error.errorMessage ? i18n.get(error.errorMessage) : !!error);
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__fieldset adyen-checkout__fieldset--address adyen-checkout__fieldset--personalDetails'
            },
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__fieldset__title'
                },
                i18n.get('personalDetails')
            ),
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__fieldset__fields'
                },
                /*#__PURE__*/ y$1(
                    Field,
                    {
                        label: i18n.get('firstName'),
                        classNameModifiers: ['firstName', 'col-50'],
                        errorMessage: getErrorMessage(errors.firstName)
                    },
                    renderFormField('text', {
                        name: 'firstName',
                        autocorrect: 'off',
                        spellcheck: false,
                        value: data.firstName,
                        onInput: handleChangeFor('firstName', 'input'),
                        onBlur: handleChangeFor('firstName', 'blur')
                    })
                ),
                /*#__PURE__*/ y$1(
                    Field,
                    {
                        label: i18n.get('lastName'),
                        classNameModifiers: ['lastName', 'col-50'],
                        errorMessage: getErrorMessage(errors.lastName)
                    },
                    renderFormField('text', {
                        name: 'lastName',
                        autocorrect: 'off',
                        spellcheck: false,
                        value: data.lastName,
                        onInput: handleChangeFor('lastName', 'input'),
                        onBlur: handleChangeFor('lastName', 'blur')
                    })
                ),
                /*#__PURE__*/ y$1(SocialSecurityNumberBrazil, {
                    data: data.socialSecurityNumber,
                    error: errors.socialSecurityNumber,
                    valid: valid.socialSecurityNumber,
                    onInput: handleChangeFor('socialSecurityNumber', 'input'),
                    onBlur: handleChangeFor('socialSecurityNumber', 'blur')
                })
            )
        );
    }

    function BoletoInput(props) {
        const { i18n } = useCoreContext();
        const addressRef = _(null);
        const setAddressRef = ref => {
            addressRef.current = ref;
        };
        const { handleChangeFor, triggerValidation, setSchema, setData, setValid, setErrors, data, valid, errors, isValid } = useForm({
            schema: ['firstName', 'lastName', 'socialSecurityNumber', 'billingAddress', 'shopperEmail'],
            defaultData: props.data,
            rules: boletoValidationRules,
            formatters: boletoFormatters
        });
        // Email field toggle
        const [showingEmail, setShowingEmail] = h(false);
        const toggleEmailField = () => setShowingEmail(!showingEmail);
        // Handle form schema updates
        p(() => {
            const newSchema = [
                ...(props.personalDetailsRequired ? ['firstName', 'lastName', 'socialSecurityNumber'] : []),
                ...(props.billingAddressRequired ? ['billingAddress'] : []),
                ...(showingEmail ? ['shopperEmail'] : [])
            ];
            setSchema(newSchema);
        }, [showingEmail, props.personalDetailsRequired, props.billingAddressRequired]);
        const handleAddress = address => {
            setData('billingAddress', address.data);
            setValid('billingAddress', address.isValid);
            setErrors('billingAddress', address.errors);
        };
        const [status, setStatus] = h('ready');
        /** An object by which to expose 'public' members to the parent UIElement */ const boletoRef = _({});
        // Just call once
        if (!Object.keys(boletoRef.current).length) {
            props.setComponentRef?.(boletoRef.current);
        }
        boletoRef.current.showValidation = () => {
            triggerValidation();
            if (props.billingAddressRequired) {
                addressRef.current.showValidation();
            }
        };
        boletoRef.current.setStatus = setStatus;
        p(() => {
            const billingAddressValid = props.billingAddressRequired ? Boolean(valid.billingAddress) : true;
            props.onChange({
                data,
                valid,
                errors,
                isValid: isValid && billingAddressValid
            });
        }, [data, valid, errors]);
        const buttonModifiers = [
            ...(!props.personalDetailsRequired && !props.billingAddressRequired && !props.showEmailAddress ? ['standalone'] : [])
        ];
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__boleto-input__field'
            },
            props.personalDetailsRequired &&
                /*#__PURE__*/ y$1(BrazilPersonalDetail, {
                    i18n: i18n,
                    data: data,
                    handleChangeFor: handleChangeFor,
                    errors: errors,
                    valid: valid
                }),
            props.billingAddressRequired &&
                /*#__PURE__*/ y$1(Address, {
                    allowedCountries: ['BR'],
                    label: 'billingAddress',
                    data: {
                        ...props.data.billingAddress,
                        country: 'BR'
                    },
                    onChange: handleAddress,
                    requiredFields: ['country', 'street', 'houseNumberOrName', 'postalCode', 'city', 'stateOrProvince'],
                    setComponentRef: setAddressRef
                }),
            props.showEmailAddress &&
                /*#__PURE__*/ y$1(SendCopyToEmail, {
                    value: data.shopperEmail,
                    errors: errors.shopperEmail,
                    onToggle: toggleEmailField,
                    onInput: handleChangeFor('shopperEmail', 'input'),
                    onBlur: handleChangeFor('shopperEmail', 'blur')
                }),
            props.showPayButton &&
                props.payButton({
                    status,
                    label: i18n.get('boletobancario.btnLabel'),
                    classNameModifiers: buttonModifiers
                })
        );
    }
    BoletoInput.defaultProps = {
        data: {},
        showEmailAddress: true,
        personalDetailsRequired: true,
        billingAddressRequired: true
    };

    const BoletoVoucherResult = props => {
        const { i18n, loadingContext } = useCoreContext();
        const getImage = useImage();
        const { reference, expiresAt, totalAmount, paymentMethodType, downloadUrl } = props;
        const barcodeReference = reference.replace(/[^\d]/g, '').replace(/^(\d{4})(\d{5})\d{1}(\d{10})\d{1}(\d{10})\d{1}(\d{15})$/, '$1$5$2$3$4');
        const barcodeUrl = `${loadingContext}barcode.shtml?data=${barcodeReference}&barcodeType=BT_Int2of5A&fileType=png`;
        return /*#__PURE__*/ y$1(Voucher, {
            reference: reference,
            paymentMethodType: 'boletobancario',
            barcode: barcodeUrl,
            introduction: i18n.get('voucher.introduction'),
            imageUrl: getImage({})(paymentMethodType),
            amount: totalAmount && i18n.amount(totalAmount.value, totalAmount.currency),
            voucherDetails: [
                {
                    label: i18n.get('voucher.expirationDate'),
                    value: i18n.date(expiresAt)
                }
            ],
            downloadUrl: downloadUrl,
            copyBtn: true
        });
    };

    class BoletoElement extends UIElement {
        static type = 'boletobancario';
        static txVariants = [
            'primeiropay_boleto',
            'boletobancario_bancodobrasil',
            'boletobancario_bradesco',
            'boletobancario_hsbc',
            'boletobancario_itau',
            'boletobancario_santander',
            'primeiropay_boleto'
        ];
        get isValid() {
            return !!this.state.isValid;
        }
        /**
         * Formats the component data output
         */ formatData() {
            const { data = {} } = this.state;
            const { billingAddress, shopperEmail, firstName, lastName, socialSecurityNumber = '' } = data;
            return {
                paymentMethod: {
                    type: this.props.type || BoletoElement.type
                },
                ...(billingAddress && {
                    billingAddress
                }),
                ...(shopperEmail && {
                    shopperEmail
                }),
                ...(firstName &&
                    lastName && {
                        shopperName: {
                            firstName,
                            lastName
                        }
                    }),
                ...(socialSecurityNumber && {
                    socialSecurityNumber: cleanCPFCNPJ(socialSecurityNumber)
                })
            };
        }
        handleRef = ref => {
            this.componentRef = ref;
        };
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                this.props.reference
                    ? /*#__PURE__*/ y$1(BoletoVoucherResult, {
                          ref: this.handleRef,
                          icon: this.icon,
                          ...this.props
                      })
                    : /*#__PURE__*/ y$1(BoletoInput, {
                          setComponentRef: this.handleRef,
                          ...this.props,
                          onChange: this.setState,
                          onSubmit: this.submit,
                          payButton: this.payButton
                      })
            );
        }
    }

    function DokuInput(props) {
        const personalDetailsRef = _(null);
        const setPersonalDetailsRef = ref => {
            personalDetailsRef.current = ref;
        };
        const { i18n } = useCoreContext();
        const [status, setStatus] = h('ready');
        /** An object by which to expose 'public' members to the parent UIElement */ const dokuRef = _({});
        // Just call once
        if (!Object.keys(dokuRef.current).length) {
            props.setComponentRef?.(dokuRef.current);
        }
        dokuRef.current.showValidation = () => {
            personalDetailsRef.current?.showValidation();
        };
        dokuRef.current.setStatus = setStatus;
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__doku-input__field'
            },
            /*#__PURE__*/ y$1(PersonalDetails, {
                data: props.data,
                requiredFields: ['firstName', 'lastName', 'shopperEmail'],
                onChange: props.onChange,
                namePrefix: 'doku',
                setComponentRef: setPersonalDetailsRef
            }),
            props.showPayButton &&
                props.payButton({
                    status,
                    label: i18n.get('confirmPurchase')
                })
        );
    }

    const DokuVoucherResult = props => {
        const { reference, expiresAt, instructionsUrl, shopperName, merchantName, totalAmount, paymentMethodType } = props;
        const { i18n } = useCoreContext();
        const getImage = useImage();
        return /*#__PURE__*/ y$1(Voucher, {
            paymentMethodType: paymentMethodType,
            reference: reference,
            introduction: i18n.get('voucher.introduction.doku'),
            imageUrl: getImage({})(paymentMethodType),
            instructionsUrl: instructionsUrl,
            amount: totalAmount && i18n.amount(totalAmount.value, totalAmount.currency),
            voucherDetails: [
                {
                    label: i18n.get('voucher.expirationDate'),
                    value: i18n.date(expiresAt)
                },
                {
                    label: i18n.get('voucher.shopperName'),
                    value: shopperName
                },
                {
                    label: i18n.get('voucher.merchantName'),
                    value: merchantName
                }
            ],
            copyBtn: true
        });
    };

    class DokuElement extends UIElement {
        static type = 'doku';
        static txVariants = [
            'doku',
            'doku_alfamart',
            'doku_permata_lite_atm',
            'doku_indomaret',
            'doku_atm_mandiri_va',
            'doku_sinarmas_va',
            'doku_mandiri_va',
            'doku_cimb_va',
            'doku_danamon_va',
            'doku_bri_va',
            'doku_bni_va',
            'doku_bca_va',
            'doku_wallet'
        ];
        get isValid() {
            return !!this.state.isValid;
        }
        /**
         * Formats the component data output
         */ formatData() {
            return {
                ...this.state.data,
                paymentMethod: {
                    type: this.props.type || DokuElement.type
                }
            };
        }
        get icon() {
            return this.resources.getImage({})(this.props.type);
        }
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                this.props.reference
                    ? /*#__PURE__*/ y$1(DokuVoucherResult, {
                          ref: ref => {
                              this.componentRef = ref;
                          },
                          ...this.props
                      })
                    : /*#__PURE__*/ y$1(DokuInput, {
                          setComponentRef: this.setComponentRef,
                          ...this.props,
                          onChange: this.setState,
                          onSubmit: this.submit,
                          payButton: this.payButton
                      })
            );
        }
    }

    const OxxoVoucherResult = props => {
        const { i18n, loadingContext } = useCoreContext();
        const getImage = useImage();
        const { alternativeReference, reference, expiresAt, merchantReference, totalAmount, paymentMethodType, downloadUrl } = props;
        const barcodeUrl = `${loadingContext}barcode.shtml?data=${reference}&barcodeType=BT_Code128C&fileType=png`;
        const voucherDetails = [
            ...(expiresAt
                ? [
                      {
                          label: i18n.get('voucher.expirationDate'),
                          value: i18n.date(expiresAt)
                      }
                  ]
                : []),
            ...(merchantReference
                ? [
                      {
                          label: i18n.get('voucher.shopperReference'),
                          value: merchantReference
                      }
                  ]
                : []),
            ...(alternativeReference
                ? [
                      {
                          label: i18n.get('voucher.alternativeReference'),
                          value: alternativeReference
                      }
                  ]
                : [])
        ];
        return /*#__PURE__*/ y$1(Voucher, {
            amount: totalAmount && i18n.amount(totalAmount.value, totalAmount.currency),
            barcode: barcodeUrl,
            copyBtn: true,
            downloadUrl: downloadUrl,
            imageUrl: getImage({})(paymentMethodType),
            introduction: i18n.get('voucher.introduction'),
            paymentMethodType: 'oxxo',
            reference: reference,
            voucherDetails: voucherDetails
        });
    };

    class OxxoElement extends UIElement {
        static type = 'oxxo';
        static defaultProps = {
            name: 'Oxxo'
        };
        get isValid() {
            return true;
        }
        formatData() {
            return {
                paymentMethod: {
                    type: this.props.type || OxxoElement.type
                }
            };
        }
        handleRef = ref => {
            this.componentRef = ref;
        };
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                this.props.reference
                    ? /*#__PURE__*/ y$1(OxxoVoucherResult, {
                          ref: this.handleRef,
                          ...this.props
                      })
                    : this.props.showPayButton &&
                          this.payButton({
                              ...this.props,
                              classNameModifiers: ['standalone'],
                              label: `${this.props.i18n.get('continueTo')} ${this.props.name}`,
                              onClick: this.submit
                          })
            );
        }
    }

    function IssuerButton({ name, id, icon, onClick, selected = false }) {
        return /*#__PURE__*/ y$1(
            'button',
            {
                type: 'button',
                className: classNames('adyen-checkout__issuer-button', {
                    'adyen-checkout__issuer-button--selected': selected
                }),
                'aria-label': name,
                'aria-pressed': selected,
                onClick: onClick,
                value: id
            },
            !!icon &&
                /*#__PURE__*/ y$1(Img, {
                    className: 'adyen-checkout__issuer-button-img',
                    alt: name,
                    src: icon
                }),
            /*#__PURE__*/ y$1(
                'span',
                {
                    className: 'adyen-checkout__issuer-button-text'
                },
                name
            )
        );
    }

    const IssuerButtonGroup = ({ items = [], selectedIssuerId, onChange }) => {
        const { i18n } = useCoreContext();
        const handleClick = T(
            event => {
                const value = event.currentTarget.value;
                Object.defineProperty(event.target, 'value', {
                    value
                });
                onChange(event);
            },
            [onChange]
        );
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__issuer-button-group',
                role: 'group',
                'aria-label': i18n.get('idealIssuer.selectField.placeholder')
            },
            items.map(issuer =>
                /*#__PURE__*/ y$1(IssuerButton, {
                    key: issuer.id,
                    ...issuer,
                    selected: selectedIssuerId === issuer.id,
                    onClick: handleClick
                })
            )
        );
    };

    const payButtonLabel = ({ issuer, items }, i18n) => {
        const issuerName = items.find(i => i.id === issuer)?.name;
        if (!issuer || !issuerName) return i18n.get('continue');
        return `${i18n.get('continueTo')} ${issuerName}`;
    };
    const schema = ['issuer'];
    const validationRules = {
        issuer: {
            validate: issuer => !!issuer && issuer.length > 0,
            errorMessage: 'idealIssuer.selectField.placeholder',
            modes: ['blur']
        }
    };
    var IssuerListInputTypes;
    (function (IssuerListInputTypes) {
        IssuerListInputTypes[(IssuerListInputTypes['ButtonGroup'] = 0)] = 'ButtonGroup';
        IssuerListInputTypes[(IssuerListInputTypes['Dropdown'] = 1)] = 'Dropdown';
    })(IssuerListInputTypes || (IssuerListInputTypes = {}));
    function IssuerList({ items, placeholder = 'idealIssuer.selectField.placeholder', issuer, highlightedIds = [], ...props }) {
        const { i18n } = useCoreContext();
        const { handleChangeFor, triggerValidation, data, valid, errors, isValid } = useForm({
            schema,
            defaultData: {
                issuer
            },
            rules: validationRules
        });
        const [status, setStatus] = h('ready');
        const [inputType, setInputType] = h(IssuerListInputTypes.Dropdown);
        const { setSRMessagesFromObjects, shouldMoveFocusSR } = useSRPanelContext();
        const setSRMessages = setSRMessagesFromObjects?.({});
        const getErrorMessage = error => (error && error.errorMessage ? i18n.get(error.errorMessage) : !!error);
        this.setStatus = newStatus => {
            setStatus(newStatus);
        };
        const handleInputChange = T(
            type => event => {
                setInputType(type);
                handleChangeFor('issuer')(event);
            },
            [handleChangeFor]
        );
        p(() => {
            props.onChange({
                data,
                valid,
                errors,
                isValid
            });
            const srPanelResp = setSRMessages?.({
                errors,
                isValidating: true
            });
            if (srPanelResp?.action === ERROR_ACTION_FOCUS_FIELD) {
                // Focus field in error, if required
                if (shouldMoveFocusSR) setFocusOnField('.adyen-checkout__issuer-list', srPanelResp.fieldToFocus);
            }
        }, [data, valid, errors, isValid]);
        this.showValidation = () => {
            triggerValidation();
        };
        const { highlightedItems } = items.reduce(
            (memo, item) => {
                if (highlightedIds.includes(item.id))
                    memo.highlightedItems.push({
                        ...item
                    });
                return memo;
            },
            {
                highlightedItems: []
            }
        );
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__issuer-list'
            },
            !!highlightedItems.length &&
                /*#__PURE__*/ y$1(
                    _$1,
                    null,
                    /*#__PURE__*/ y$1(IssuerButtonGroup, {
                        selectedIssuerId: inputType === IssuerListInputTypes.ButtonGroup ? data['issuer'] : null,
                        items: highlightedItems,
                        onChange: handleInputChange(IssuerListInputTypes.ButtonGroup)
                    }),
                    /*#__PURE__*/ y$1(ContentSeparator, null)
                ),
            /*#__PURE__*/ y$1(
                Field,
                {
                    errorMessage: getErrorMessage(errors.issuer),
                    classNameModifiers: ['issuer-list']
                },
                renderFormField('select', {
                    items,
                    selected: inputType === IssuerListInputTypes.Dropdown ? data['issuer'] : null,
                    placeholder: i18n.get(placeholder),
                    name: 'issuer',
                    className: 'adyen-checkout__issuer-list__dropdown',
                    onChange: handleInputChange(IssuerListInputTypes.Dropdown)
                })
            ),
            props.termsAndConditions &&
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__issuer-list__termsAndConditions'
                    },
                    /*#__PURE__*/ y$1(DisclaimerMessage, {
                        message: i18n.get(props.termsAndConditions.translationKey),
                        urls: props.termsAndConditions.urls
                    })
                ),
            props.showPayButton &&
                props.payButton({
                    status,
                    label: payButtonLabel(
                        {
                            issuer: data['issuer'],
                            items: [...items, ...highlightedItems]
                        },
                        i18n
                    )
                })
        );
    }
    IssuerList.defaultProps = {
        onChange: () => {}
    };

    const getIssuerImageUrl = (options, type) => issuer => {
        if (!issuer) return null;
        const imageOptions = {
            parentFolder: issuer ? `${type}/` : '',
            type: issuer || type,
            ...options
        };
        return getImageUrl(imageOptions)(issuer);
    };

    class IssuerListContainer extends UIElement {
        static defaultProps = {
            showImage: true,
            onValid: () => {},
            issuers: [],
            highlightedIssuers: [],
            loadingContext: FALLBACK_CONTEXT$1,
            showPaymentMethodItemImages: false
        };
        constructor(props) {
            super(props);
            if (this.props.showImage) {
                const getIssuerIcon = getIssuerImageUrl(
                    {
                        loadingContext: this.props.loadingContext
                    },
                    this.constructor['type']
                );
                this.props.issuers = this.props.issuers.map(item => ({
                    ...item,
                    icon: getIssuerIcon(item.id)
                }));
            }
        }
        formatProps(props) {
            const issuers =
                (props.details && props.details.length && (props.details.find(d => d.key === 'issuer') || {}).items) || props.issuers || [];
            return {
                ...props,
                issuers
            };
        }
        /**
         * Formats the component data output
         */ formatData() {
            return {
                paymentMethod: {
                    type: this.constructor['type'],
                    issuer: this.state?.data?.issuer
                }
            };
        }
        /**
         * Returns whether the component state is valid or not
         */ get isValid() {
            if (this.props.issuers.length === 0) {
                return true;
            }
            return !!this.state?.isValid;
        }
        /**
         * Returns brands array (similar to card) depending on showPaymentMethodItemImages
         * This is used to show the brands in the PaymentMethodItem
         * Requires brands icons to be loaded in the payment method
         */ get brands() {
            if (this.props.showPaymentMethodItemImages) {
                return this.props.issuers.map(brand => {
                    const brandIcon = brand.icon;
                    return {
                        icon: brandIcon,
                        name: brand.id
                    };
                });
            }
            return [];
        }
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                this.props.issuers.length > 0
                    ? /*#__PURE__*/ y$1(
                          SRPanelProvider,
                          {
                              srPanel: this.props.modules.srPanel
                          },
                          /*#__PURE__*/ y$1(IssuerList, {
                              ref: ref => {
                                  this.componentRef = ref;
                              },
                              items: this.props.issuers,
                              highlightedIds: this.props.highlightedIssuers,
                              ...this.props,
                              ...this.state,
                              onChange: this.setState,
                              onSubmit: this.submit,
                              payButton: this.payButton
                          })
                      )
                    : this.props.showPayButton &&
                          /*#__PURE__*/ y$1(RedirectButton, {
                              name: this.props.name,
                              ...this.props,
                              onSubmit: this.submit,
                              payButton: this.payButton,
                              ref: ref => {
                                  this.componentRef = ref;
                              }
                          })
            );
        }
    }

    class BillDeskOnlineElement extends IssuerListContainer {
        static type = 'billdesk_online';
        formatProps(props) {
            return {
                ...super.formatProps(props),
                showImage: false
            };
        }
    }

    class BillDeskWalletElement extends IssuerListContainer {
        static type = 'billdesk_wallet';
        formatProps(props) {
            return {
                ...super.formatProps(props),
                showImage: false,
                placeholder: 'issuerList.wallet.placeholder'
            };
        }
    }

    class DotpayElement extends IssuerListContainer {
        static type = 'dotpay';
        static txVariants = ['dotpay', 'onlineBanking'];
    }

    class EntercashElement extends IssuerListContainer {
        static type = 'entercash';
    }

    class EPSElement extends IssuerListContainer {
        static type = 'eps';
        formatProps(props) {
            return {
                ...super.formatProps(props),
                showImage: false
            };
        }
    }

    class IdealElement extends IssuerListContainer {
        static type = 'ideal';
    }

    class MolPayEBankingMYElement extends IssuerListContainer {
        static type = 'molpay_ebanking_fpx_MY';
    }

    class MolPayEBankingTHElement extends IssuerListContainer {
        static type = 'molpay_ebanking_TH';
    }

    class MolPayEbankingVNElement extends IssuerListContainer {
        static type = 'molpay_ebanking_VN';
    }

    const TERMS_AND_CONDITIONS$1 = 'https://static.payu.com/sites/terms/files/payu_privacy_policy_cs.pdf';
    const ICON$1 = 'bankTransfer_IBAN';
    class OnlineBankingCZElement extends IssuerListContainer {
        static type = 'onlineBanking_CZ';
        static termsAndConditions = {
            translationKey: 'onlineBanking.termsAndConditions',
            urls: [TERMS_AND_CONDITIONS$1]
        };
        formatProps(props) {
            return {
                ...super.formatProps(props),
                showImage: false,
                termsAndConditions: OnlineBankingCZElement.termsAndConditions
            };
        }
        get icon() {
            return (
                this.props.icon ??
                this.resources.getImage({
                    loadingContext: this.props.loadingContext
                })(ICON$1)
            );
        }
    }

    class OnlineBankingINElement extends IssuerListContainer {
        static type = 'onlinebanking_IN';
        formatProps(props) {
            return {
                ...super.formatProps(props),
                showImage: false
            };
        }
        /**
         * Formats the component data output
         */ formatData() {
            return {
                ...super.formatData(),
                browserInfo: this.browserInfo
            };
        }
        get browserInfo() {
            return collectBrowserInfo();
        }
    }

    class OnlineBankingPL extends IssuerListContainer {
        static type = 'onlineBanking_PL';
        static disclaimerUrlsMap = {
            regulation: 'https://www.przelewy24.pl/regulamin',
            obligation: 'https://www.przelewy24.pl/obowiazek-informacyjny-rodo-platnicy'
        };
        static termsAndConditions = {
            translationKey: 'onlineBankingPL.termsAndConditions',
            urls: [OnlineBankingPL.disclaimerUrlsMap.regulation, OnlineBankingPL.disclaimerUrlsMap.obligation]
        };
        constructor(props) {
            super({
                ...props,
                termsAndConditions: OnlineBankingPL.termsAndConditions
            });
        }
    }

    const TERMS_AND_CONDITIONS = 'https://static.payu.com/sites/terms/files/payu_privacy_policy_sk.pdf';
    const ICON = 'bankTransfer_IBAN';
    class OnlineBankingSKElement extends IssuerListContainer {
        static type = 'onlineBanking_SK';
        static termsAndConditions = {
            translationKey: 'onlineBanking.termsAndConditions',
            urls: [TERMS_AND_CONDITIONS]
        };
        formatProps(props) {
            return {
                ...super.formatProps(props),
                showImage: false,
                termsAndConditions: OnlineBankingSKElement.termsAndConditions
            };
        }
        get icon() {
            return (
                this.props.icon ??
                this.resources.getImage({
                    loadingContext: this.props.loadingContext
                })(ICON)
            );
        }
    }

    class PayByBank extends IssuerListContainer {
        static type = 'paybybank';
        constructor(props) {
            super({
                ...props,
                showPaymentMethodItemImages: true
            });
        }
    }

    class PayuNetCashcardElement extends IssuerListContainer {
        static type = 'payu_IN_cashcard';
        formatProps(props) {
            return {
                ...super.formatProps(props),
                showImage: false
            };
        }
    }

    class PayuNetBankingElement extends IssuerListContainer {
        static type = 'payu_IN_nb';
        formatProps(props) {
            return {
                ...super.formatProps(props),
                showImage: false
            };
        }
    }

    class WalletINElement extends IssuerListContainer {
        static type = 'wallet_IN';
        formatProps(props) {
            return {
                ...super.formatProps(props),
                showImage: false
            };
        }
        /**
         * Formats the component data output
         */ formatData() {
            return {
                ...super.formatData(),
                browserInfo: this.browserInfo
            };
        }
        get browserInfo() {
            return collectBrowserInfo();
        }
    }

    function DragonpayInput(props) {
        const { i18n } = useCoreContext();
        const isIssuerRequired = () => {
            const typesRequiringIssuers = ['dragonpay_ebanking', 'dragonpay_otc_banking', 'dragonpay_otc_non_banking'];
            return typesRequiringIssuers.indexOf(props.type) > -1;
        };
        const { handleChangeFor, triggerValidation, data, valid, errors, isValid } = useForm({
            schema: [...(isIssuerRequired() ? ['issuer'] : []), 'shopperEmail'],
            rules: {
                issuer: {
                    validate: issuer => isIssuerRequired() && !!issuer,
                    modes: ['input', 'blur']
                },
                shopperEmail: personalDetailsValidationRules.shopperEmail
            }
        });
        const getIssuerIcon = getIssuerImageUrl({}, props.type);
        const items = props.items.map(item => ({
            ...item,
            icon: getIssuerIcon(item.id && item.id.toLowerCase())
        }));
        const getIssuerSelectFieldKey = type => {
            if (type === 'dragonpay_otc_non_banking') {
                return 'dragonpay.voucher.non.bank.selectField.placeholder';
            }
            return 'dragonpay.voucher.bank.selectField.placeholder';
        };
        p(() => {
            props.onChange({
                isValid,
                data,
                valid,
                errors
            });
        }, [isValid, data, valid, errors]);
        const [status, setStatus] = h('ready');
        this.setStatus = setStatus;
        this.showValidation = triggerValidation;
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__dragonpay-input__field'
            },
            /*#__PURE__*/ y$1(
                Field,
                {
                    label: i18n.get('shopperEmail'),
                    errorMessage: !!errors.shopperEmail
                },
                renderFormField('emailAddress', {
                    name: 'dragonpay.shopperEmail',
                    autoCorrect: 'off',
                    value: data.shopperEmail,
                    className: 'adyen-checkout__input--large',
                    spellCheck: false,
                    onInput: handleChangeFor('shopperEmail', 'input'),
                    onBlur: handleChangeFor('shopperEmail', 'blur')
                })
            ),
            isIssuerRequired() &&
                /*#__PURE__*/ y$1(
                    Field,
                    {
                        label: i18n.get(getIssuerSelectFieldKey(props.type)),
                        errorMessage: !!errors.issuer
                    },
                    renderFormField('select', {
                        items,
                        selected: data.issuer,
                        placeholder: i18n.get(getIssuerSelectFieldKey(props.type)),
                        name: 'issuer',
                        className: 'adyen-checkout__dropdown--large adyen-checkout__issuer-list__dropdown',
                        onChange: handleChangeFor('issuer')
                    })
                ),
            props.showPayButton &&
                props.payButton({
                    status,
                    label: i18n.get('confirmPurchase')
                })
        );
    }
    DragonpayInput.defaultProps = {
        data: {},
        items: [],
        onChange: () => {}
    };

    function DragonpayVoucherResult(props) {
        const { reference, totalAmount, surcharge, expiresAt, alternativeReference, instructionsUrl, icon, issuer, paymentMethodType } = props;
        const { loadingContext, i18n } = useCoreContext();
        const issuerImageUrl =
            paymentMethodType !== 'dragonpay_otc_philippines'
                ? getIssuerImageUrl(
                      {
                          loadingContext
                      },
                      paymentMethodType
                  )(issuer.toLowerCase())
                : null;
        return /*#__PURE__*/ y$1(Voucher, {
            reference: reference,
            paymentMethodType: paymentMethodType,
            introduction: i18n.get('voucher.introduction'),
            imageUrl: icon,
            issuerImageUrl: issuerImageUrl,
            instructionsUrl: instructionsUrl,
            amount: totalAmount && i18n.amount(totalAmount.value, totalAmount.currency),
            surcharge: surcharge && i18n.amount(surcharge.value, surcharge.currency),
            voucherDetails: [
                {
                    label: i18n.get('voucher.expirationDate'),
                    value: i18n.date(expiresAt)
                },
                {
                    label: i18n.get('voucher.alternativeReference'),
                    value: alternativeReference
                }
            ],
            copyBtn: true
        });
    }

    class DragonpayElement extends UIElement {
        static type = 'dragonpay';
        static txVariants = ['dragonpay', 'dragonpay_ebanking', 'dragonpay_otc_banking', 'dragonpay_otc_non_banking', 'dragonpay_otc_philippines'];
        get isValid() {
            return !!this.state.isValid;
        }
        /**
         * Formats the component data output
         */ formatData() {
            const { issuer, shopperEmail } = this.state.data;
            return {
                ...(shopperEmail && {
                    shopperEmail
                }),
                paymentMethod: {
                    ...(issuer && {
                        issuer
                    }),
                    type: this.props.type || DragonpayElement.type
                }
            };
        }
        formatProps(props) {
            return {
                ...props,
                issuers: props.details?.find(detail => detail.key === 'issuer')?.items ?? props.issuers
            };
        }
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                this.props.reference
                    ? /*#__PURE__*/ y$1(DragonpayVoucherResult, {
                          ref: ref => {
                              this.componentRef = ref;
                          },
                          icon: this.icon,
                          ...this.props
                      })
                    : /*#__PURE__*/ y$1(DragonpayInput, {
                          ref: ref => {
                              this.componentRef = ref;
                          },
                          items: this.props.issuers,
                          ...this.props,
                          onChange: this.setState,
                          onSubmit: this.submit,
                          payButton: this.payButton
                      })
            );
        }
    }

    const econtextValidationRules = {
        telephoneNumber: [
            {
                validate: value => !!value && value.length <= 11,
                errorMessage: 'voucher.econtext.telephoneNumber.invalid',
                modes: ['input', 'blur']
            },
            {
                validate: value => !!value && telephoneNumber.test(value) && (value.length === 10 || value.length === 11),
                errorMessage: 'voucher.econtext.telephoneNumber.invalid',
                modes: ['blur']
            }
        ]
    };

    function EcontextInput({ personalDetailsRequired = true, data, onChange, showPayButton, payButton, ...props }) {
        const personalDetailsRef = _(null);
        const setPersonalDetailsRef = ref => {
            personalDetailsRef.current = ref;
        };
        const { i18n } = useCoreContext();
        const [status, setStatus] = h('ready');
        /** An object by which to expose 'public' members to the parent UIElement */ const econtextRef = _({});
        // Just call once
        if (!Object.keys(econtextRef.current).length) {
            props.setComponentRef?.(econtextRef.current);
        }
        econtextRef.current.showValidation = () => {
            personalDetailsRef.current?.showValidation();
        };
        econtextRef.current.setStatus = setStatus;
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__econtext-input__field'
            },
            !!personalDetailsRequired &&
                /*#__PURE__*/ y$1(PersonalDetails, {
                    data: data,
                    requiredFields: ['firstName', 'lastName', 'telephoneNumber', 'shopperEmail'],
                    onChange: onChange,
                    namePrefix: 'econtext',
                    setComponentRef: setPersonalDetailsRef,
                    validationRules: econtextValidationRules
                }),
            showPayButton &&
                payButton({
                    status,
                    label: i18n.get('confirmPurchase')
                })
        );
    }

    const EcontextVoucherResult = props => {
        const { reference, totalAmount, expiresAt, paymentMethodType, maskedTelephoneNumber, instructionsUrl, collectionInstitutionNumber } = props;
        const { i18n } = useCoreContext();
        const getImage = useImage();
        return /*#__PURE__*/ y$1(Voucher, {
            paymentMethodType: paymentMethodType,
            reference: reference,
            introduction: i18n.get('voucher.introduction.econtext'),
            imageUrl: getImage({})(paymentMethodType),
            instructionsUrl: instructionsUrl,
            amount: totalAmount && i18n.amount(totalAmount.value, totalAmount.currency),
            voucherDetails: [
                {
                    label: i18n.get('voucher.collectionInstitutionNumber'),
                    value: collectionInstitutionNumber
                },
                {
                    label: i18n.get('voucher.expirationDate'),
                    value: i18n.date(expiresAt)
                },
                {
                    label: i18n.get('voucher.telephoneNumber'),
                    value: maskedTelephoneNumber
                }
            ],
            copyBtn: true
        });
    };

    class EcontextElement extends UIElement {
        static type = 'econtext';
        static txVariants = ['econtext', 'econtext_atm', 'econtext_online', 'econtext_seven_eleven', 'econtext_stores'];
        static defaultProps = {
            personalDetailsRequired: true
        };
        get isValid() {
            if (!this.props.personalDetailsRequired) {
                return true;
            }
            return !!this.state.isValid;
        }
        /**
         * Formats the component data output
         */ formatData() {
            return {
                ...this.state.data,
                paymentMethod: {
                    type: this.props.type || EcontextElement.type
                }
            };
        }
        get icon() {
            return this.resources.getImage({
                loadingContext: this.props.loadingContext
            })(this.props.type);
        }
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                this.props.reference
                    ? /*#__PURE__*/ y$1(EcontextVoucherResult, {
                          ref: ref => {
                              this.componentRef = ref;
                          },
                          ...this.props
                      })
                    : /*#__PURE__*/ y$1(EcontextInput, {
                          setComponentRef: this.setComponentRef,
                          ...this.props,
                          onChange: this.setState,
                          onSubmit: this.submit,
                          payButton: this.payButton
                      })
            );
        }
    }

    class RedirectShopper extends k$1 {
        postForm;
        static defaultProps = {
            beforeRedirect: resolve => resolve(),
            method: 'GET'
        };
        componentDidMount() {
            const doRedirect = () => {
                if (this.postForm) {
                    this.postForm.submit();
                } else {
                    window.location.assign(this.props.url);
                }
            };
            const dispatchEvent = new Promise((resolve, reject) =>
                this.props.beforeRedirect(resolve, reject, {
                    url: this.props.url,
                    method: this.props.method,
                    ...(this.props.data
                        ? {
                              data: this.props.data
                          }
                        : {})
                })
            );
            dispatchEvent.then(doRedirect).catch(() => {});
        }
        render({ url, method, data = {} }) {
            if (method === 'POST') {
                return /*#__PURE__*/ y$1(
                    'form',
                    {
                        method: 'post',
                        action: url,
                        style: {
                            display: 'none'
                        },
                        ref: ref => {
                            this.postForm = ref;
                        }
                    },
                    Object.keys(data).map(key =>
                        /*#__PURE__*/ y$1('input', {
                            type: 'hidden',
                            name: key,
                            key: key,
                            value: data[key]
                        })
                    )
                );
            }
            return null;
        }
    }

    /**
     * RedirectElement
     */ class RedirectElement extends UIElement {
        static type = 'redirect';
        static defaultProps = {
            type: RedirectElement.type
        };
        formatProps(props) {
            return {
                ...props,
                showButton: !!props.showPayButton
            };
        }
        /**
         * Formats the component data output
         */ formatData() {
            return {
                paymentMethod: {
                    type: this.props.type
                }
            };
        }
        /**
         * Returns whether the component state is valid or not
         */ get isValid() {
            return true;
        }
        get icon() {
            return this.resources.getImage({
                loadingContext: this.props.loadingContext
            })(this.props.type);
        }
        render() {
            if (this.props.url && this.props.method) {
                return /*#__PURE__*/ y$1(RedirectShopper, this.props);
            }
            if (this.props.showButton) {
                return /*#__PURE__*/ y$1(
                    CoreProvider,
                    {
                        i18n: this.props.i18n,
                        loadingContext: this.props.loadingContext,
                        resources: this.resources
                    },
                    /*#__PURE__*/ y$1(RedirectButton, {
                        ...this.props,
                        onSubmit: this.submit,
                        payButton: this.payButton,
                        ref: ref => {
                            this.componentRef = ref;
                        }
                    })
                );
            }
            return null;
        }
    }

    class GiropayElement extends RedirectElement {
        static type = 'giropay';
        formatProps(props) {
            return {
                ...props,
                showPayButton: props.showButton ?? props.showPayButton
            };
        }
        /**
         * Formats the component data output
         */ formatData() {
            return {
                paymentMethod: {
                    type: GiropayElement.type
                }
            };
        }
        get displayName() {
            return this.props.name || this.constructor['type'];
        }
        render() {
            if (this.props.showPayButton) {
                return /*#__PURE__*/ y$1(
                    CoreProvider,
                    {
                        i18n: this.props.i18n,
                        loadingContext: this.props.loadingContext,
                        resources: this.resources
                    },
                    /*#__PURE__*/ y$1(RedirectButton, {
                        ...this.props,
                        name: this.displayName,
                        onSubmit: this.submit,
                        payButton: this.payButton,
                        ref: ref => {
                            this.componentRef = ref;
                        }
                    })
                );
            }
            return null;
        }
    }

    const MultibancoVoucherResult = props => {
        const { i18n } = useCoreContext();
        const getImage = useImage();
        const { entity, reference, expiresAt, merchantReference, totalAmount, paymentMethodType, downloadUrl } = props;
        const voucherDetails = [
            ...(entity
                ? [
                      {
                          label: i18n.get('voucher.entity'),
                          value: entity
                      }
                  ]
                : []),
            ...(expiresAt
                ? [
                      {
                          label: i18n.get('voucher.expirationDate'),
                          value: i18n.date(expiresAt)
                      }
                  ]
                : []),
            ...(merchantReference
                ? [
                      {
                          label: i18n.get('voucher.shopperReference'),
                          value: merchantReference
                      }
                  ]
                : [])
        ];
        return /*#__PURE__*/ y$1(Voucher, {
            amount: totalAmount && i18n.amount(totalAmount.value, totalAmount.currency),
            barcode: null,
            copyBtn: true,
            downloadUrl: downloadUrl,
            imageUrl: getImage({})(paymentMethodType),
            introduction: i18n.get('voucher.introduction'),
            paymentMethodType: 'multibanco',
            reference: reference,
            voucherDetails: voucherDetails
        });
    };

    class MultibancoElement extends UIElement {
        static type = 'multibanco';
        static defaultProps = {
            showPayButton: true
        };
        get isValid() {
            return true;
        }
        formatProps(props) {
            return {
                ...props,
                name: props.name || 'Multibanco'
            };
        }
        /**
         * Formats the component data output
         */ formatData() {
            return {
                paymentMethod: {
                    type: this.props.type || MultibancoElement.type
                }
            };
        }
        handleRef = ref => {
            this.componentRef = ref;
        };
        render() {
            if (this.props.reference) {
                return /*#__PURE__*/ y$1(
                    CoreProvider,
                    {
                        i18n: this.props.i18n,
                        loadingContext: this.props.loadingContext,
                        resources: this.resources
                    },
                    /*#__PURE__*/ y$1(MultibancoVoucherResult, {
                        ref: this.handleRef,
                        ...this.props
                    })
                );
            }
            if (this.props.showPayButton) {
                return /*#__PURE__*/ y$1(
                    CoreProvider,
                    {
                        i18n: this.props.i18n,
                        loadingContext: this.props.loadingContext,
                        resources: this.resources
                    },
                    /*#__PURE__*/ y$1(RedirectButton, {
                        name: this.displayName,
                        amount: this.props.amount,
                        payButton: this.payButton,
                        onSubmit: this.submit,
                        ref: ref => {
                            this.componentRef = ref;
                        }
                    })
                );
            }
            return null;
        }
    }

    /**
     * TwintElement
     */ class TwintElement extends RedirectElement {
        static type = 'twint';
        static defaultProps = {
            type: TwintElement.type,
            showPayButton: true
        };
        /**
         * Get the element displayable name
         */ get displayName() {
            const { i18n, name, storedPaymentMethodId } = this.props;
            return storedPaymentMethodId ? `${name} ${i18n.get('twint.saved')}` : name || this.constructor['type'];
        }
        payButtonLabel() {
            const { i18n, amount, storedPaymentMethodId, name } = this.props;
            if (storedPaymentMethodId) return payAmountLabel(i18n, amount);
            return `${i18n.get('continueTo')} ${name}`;
        }
        /**
         * Overrides RedirectElement default payButton behaviour to use label
         * @param props - props
         */ payButton = props => {
            return /*#__PURE__*/ y$1(PayButton, {
                ...props,
                label: this.payButtonLabel(),
                onClick: this.submit
            });
        };
    }

    class VippsElement extends RedirectElement {
        static type = 'vipps';
        static defaultProps = {
            type: VippsElement.type,
            showPayButton: true,
            name: 'Vipps'
        };
    }

    const KLARNA_WIDGET_URL = 'https://x.klarnacdn.net/kp/lib/v1/api.js';

    function KlarnaWidget({ sdkData, paymentMethodType, payButton, ...props }) {
        const klarnaWidgetRef = _(null);
        const [status, setStatus] = h('ready');
        const handleError = () => {
            setStatus('error');
            props.onComplete({
                data: {
                    paymentData: props.paymentData,
                    details: {}
                }
            });
        };
        const initializeKlarnaWidget = () => {
            window.Klarna.Payments.init({
                client_token: sdkData.client_token
            });
            window.Klarna.Payments.load(
                {
                    container: klarnaWidgetRef.current,
                    payment_method_category: sdkData.payment_method_category
                },
                function (res) {
                    // If show_form: true is received together with an error, something fixable is wrong and the consumer
                    // needs to take action before moving forward
                    // If show_form: false, the payment method in the loaded widget will not be offered for this order
                    // based on Klarna’s pre-assessment.
                    if (!res.show_form || !!res.error) {
                        handleError();
                    }
                }
            );
        };
        const authorizeKlarna = () => {
            setStatus('loading');
            try {
                window.Klarna.Payments.authorize(
                    {
                        payment_method_category: sdkData.payment_method_category
                    },
                    function (res) {
                        if (res.approved === true && res.show_form === true) {
                            // Klarna has approved the authorization of credit for this order.
                            setStatus('success');
                            props.onComplete({
                                data: {
                                    paymentData: props.paymentData,
                                    details: {
                                        token: res.authorization_token
                                    }
                                }
                            });
                        } else if (!res.approved && res.show_form === true) {
                            // Fixable error
                            setStatus('ready');
                            props.onError(res);
                        } else {
                            // The purchase is declined. The widget should be hidden and the user
                            // should select another payment method.
                            handleError();
                        }
                    }
                );
            } catch (e) {
                handleError();
            }
        };
        // Add Klarna Payments Widget SDK
        p(() => {
            window.klarnaAsyncCallback = function () {
                initializeKlarnaWidget();
            };
            const script = new Script(KLARNA_WIDGET_URL);
            script.load();
            return () => {
                script.remove();
            };
        }, []);
        if (status !== 'error' && status !== 'success') {
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__klarna-widget'
                },
                /*#__PURE__*/ y$1('div', {
                    ref: klarnaWidgetRef
                }),
                payButton({
                    status,
                    disabled: status === 'loading',
                    onClick: authorizeKlarna
                })
            );
        }
        return null;
    }

    function KlarnaContainer(props) {
        const [action, setAction] = h({
            sdkData: props.sdkData,
            paymentMethodType: props.paymentMethodType,
            paymentData: props.paymentData
        });
        const [status, setStatus] = h('ready');
        this.setAction = setAction;
        this.setStatus = setStatus;
        if (action.sdkData) {
            return /*#__PURE__*/ y$1(KlarnaWidget, {
                sdkData: action.sdkData,
                paymentMethodType: action.paymentMethodType,
                paymentData: action.paymentData,
                payButton: props.payButton,
                onComplete: props.onComplete,
                onError: props.onError
            });
        }
        if (props.showPayButton) {
            return props.payButton({
                ...props,
                status,
                disabled: status === 'loading',
                classNameModifiers: ['standalone'],
                label: `${this.props.i18n.get('continueTo')} ${props.displayName}`
            });
        }
        return null;
    }

    class KlarnaPayments extends UIElement {
        static type = 'klarna';
        static txVariants = ['klarna', 'klarna_account', 'klarna_paynow'];
        static defaultProps = {
            useKlarnaWidget: false
        };
        constructor(props) {
            super(props);
            this.onComplete = this.onComplete.bind(this);
            this.updateWithAction = this.updateWithAction.bind(this);
            this.submit = this.submit.bind(this);
        }
        get isValid() {
            return true;
        }
        formatData() {
            return {
                paymentMethod: {
                    type: this.type,
                    ...(this.props.useKlarnaWidget
                        ? {
                              subtype: 'sdk'
                          }
                        : {})
                }
            };
        }
        payButton = props => {
            return /*#__PURE__*/ y$1(PayButton, {
                amount: this.props.amount,
                onClick: this.submit,
                ...props
            });
        };
        updateWithAction(action) {
            if (action.paymentMethodType !== this.type) throw new Error('Invalid Action');
            this.componentRef.setAction(action);
        }
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(KlarnaContainer, {
                    ...this.props,
                    ref: ref => {
                        this.componentRef = ref;
                    },
                    displayName: this.displayName,
                    onComplete: state => this.handleAdditionalDetails(state),
                    onError: this.props.onError,
                    payButton: this.payButton
                })
            );
        }
    }

    /**
     * Pads a given string or number with zeros.
     *
     * @param value - Value to zero-pad.
     * @param length - Amount of characters to pad.
     * @returns Left-padded number/string.
     */ const zeroPad = (value, length = 2) => {
        if (length === 0) return value;
        const strValue = String(value);
        return strValue.length >= length ? strValue : ('0'.repeat(length) + strValue).slice(length * -1);
    };
    /**
     * Calculates the remaining time as a percentage
     *
     * @param start - Start date
     * @param now - Current date
     * @param end - End date
     * @returns Percentage of the remaining time
     */ const getProgressPercentage = (start, now, end) => {
        const difference = end.getTime() - start.getTime();
        return 100 - Math.round(((now.getTime() - start.getTime()) * 100) / difference);
    };
    /**
     * Calculates the difference in minutes and seconds from now to endDate
     *
     * @param startTime -
     * @param endTime -
     * @returns  Time difference
     */ const getTimeDifference = (startTime, endTime) => {
        const now = new Date();
        const diff = endTime.getTime() - now.getTime();
        const seconds = diff / 1000;
        const percentage = getProgressPercentage(startTime, now, endTime);
        return {
            total: diff,
            minutes: zeroPad(Math.floor((seconds / 60) % 60)),
            seconds: zeroPad(Math.floor(seconds % 60)),
            completed: diff <= 0,
            percentage
        };
    };

    class CountdownA11yReporter {
        TRANSLATION_KEY = 'sr.wechatpay.timetopay';
        LONG_TIMEOUT = 180000;
        MID_TIMEOUT = 60000;
        SHORT_TIMEOUT = 30000;
        srPanel;
        i18n;
        srInterval;
        timeout;
        timeLeft;
        constructor(props) {
            const { srPanel, i18n } = props;
            this.srPanel = srPanel;
            this.i18n = i18n;
            // Force the srPanel to update ariaRelevant
            this.srPanel.setAriaProps({
                'aria-relevant': 'additions text'
            });
        }
        update(time) {
            const { minutes, seconds } = time;
            if (minutes === '-' || seconds === '-') return;
            const minutesLeft = typeof minutes === 'string' ? parseInt(minutes, 10) : minutes;
            const secondsLeft = typeof seconds === 'string' ? parseInt(seconds, 10) : seconds;
            this.timeLeft = {
                minutes: minutesLeft,
                seconds: secondsLeft
            };
            if (minutesLeft > 5 && this.timeout !== this.LONG_TIMEOUT) {
                this.timeout = this.LONG_TIMEOUT;
                this.setInterval(this.timeout);
            }
            if (minutesLeft >= 1 && minutesLeft <= 5 && this.timeout !== this.MID_TIMEOUT) {
                this.timeout = this.MID_TIMEOUT;
                this.setInterval(this.timeout);
            }
            if (minutesLeft < 1 && secondsLeft > 0 && this.timeout !== this.SHORT_TIMEOUT) {
                this.timeout = this.SHORT_TIMEOUT;
                this.setInterval(this.timeout);
            }
        }
        tearDown() {
            this.clearInterval();
            // Reset the srPanel ariaRelevant
            this.srPanel.setAriaProps({
                'aria-relevant': this.srPanel.constructor['defaultProps'].ariaAttributes['aria-relevant']
            });
            this.srPanel.setMessages(null);
        }
        setInterval(timeout) {
            this.clearInterval();
            const setSrMessages = () => {
                this.srPanel.setMessages(null);
                this.srPanel.setMessages(this.getSrMessages(this.timeLeft));
            };
            // To execute immediately
            setSrMessages();
            this.srInterval = setInterval(setSrMessages, timeout);
        }
        getSrMessages({ minutes, seconds }) {
            const translation = this.i18n.get(this.TRANSLATION_KEY);
            const getTimeTranslation = time => (time !== 0 ? translation => `${time} ${translation}` : () => '');
            const fns = [minutes, seconds].map(getTimeTranslation);
            return [interpolateElement(translation, fns).join('')];
        }
        clearInterval() {
            if (this.srInterval) clearInterval(this.srInterval);
        }
    }

    const useCountdownA11yReporter = time => {
        const { i18n } = useCoreContext();
        const { srPanel } = useSRPanelContext();
        const reporter = _(null);
        p(() => {
            reporter.current = new CountdownA11yReporter({
                i18n,
                srPanel
            });
            return () => {
                reporter.current.tearDown();
            };
        }, []);
        p(() => {
            try {
                if (!reporter.current) return;
                reporter.current.update(time);
            } catch (e) {
                reporter.current.tearDown();
                reporter.current = null;
                throw e;
            }
        }, [time]);
    };

    const calculateStartAndEndTime = minutesFromNow => {
        const secondsFromNow = minutesFromNow * 60000;
        const nowTime = new Date().getTime();
        return {
            startTime: new Date(nowTime),
            endTime: new Date(nowTime + secondsFromNow)
        };
    };
    function Countdown({ minutesFromNow, onTick = () => {}, onCompleted = () => {} }) {
        const startAndEndTime = _(calculateStartAndEndTime(minutesFromNow));
        const { startTime, endTime } = startAndEndTime.current;
        const [time, setTime] = h({
            minutes: '-',
            seconds: '-'
        });
        useCountdownA11yReporter(time);
        p(() => {
            const tick = () => {
                const { minutes, seconds, percentage, completed } = getTimeDifference(startTime, endTime);
                if (completed) {
                    onCompleted();
                } else {
                    const timeLeft = {
                        minutes,
                        seconds,
                        percentage
                    };
                    setTime(timeLeft);
                    onTick(timeLeft);
                }
            };
            const interval = setInterval(tick, 1000);
            return () => {
                clearInterval(interval);
            };
        }, []);
        return /*#__PURE__*/ y$1(
            'span',
            {
                className: 'adyen-checkout__countdown',
                role: 'timer'
            },
            /*#__PURE__*/ y$1(
                'span',
                {
                    className: 'countdown__minutes'
                },
                time.minutes
            ),
            /*#__PURE__*/ y$1(
                'span',
                {
                    className: 'countdown__separator'
                },
                ':'
            ),
            /*#__PURE__*/ y$1(
                'span',
                {
                    className: 'countdown__seconds'
                },
                time.seconds
            )
        );
    }

    /**
     * Calls the payment status endpoint
     * @param paymentData -
     * @param clientKey -
     * @param loadingContext -
     * @returns a promise containing the response of the call
     */ function checkPaymentStatus(paymentData, clientKey, loadingContext) {
        if (!paymentData || !clientKey) {
            throw new Error('Could not check the payment status');
        }
        const options = {
            loadingContext,
            path: `services/PaymentInitiation/v1/status?clientKey=${clientKey}`
        };
        return httpPost(options, {
            paymentData
        });
    }

    /**
     * Processes a complete response from Adyen by resultCode
     * @param response - to be processed
     * @returns a new object describing the response result (ready for onStatusChange)
     */ const processCompleteResponse = response => {
        switch (response.resultCode.toLowerCase()) {
            case 'refused':
            case 'error':
            case 'cancelled':
                return {
                    type: 'error',
                    props: {
                        ...response,
                        message: 'error.subtitle.refused'
                    }
                };
            case 'unknown':
                return {
                    type: 'error',
                    props: {
                        ...response,
                        message: 'error.message.unknown'
                    }
                };
            case 'pending':
            case 'received':
                return {
                    type: response.resultCode.toLowerCase(),
                    props: response
                };
            case 'authorised':
                return {
                    type: 'success',
                    props: response
                };
            default:
                return {
                    type: 'success',
                    props: response
                };
        }
    };
    /**
     * Processes a response from Adyen by type
     * @param response - to be processed
     * @returns a new object describing the response result (ready for onStatusChange)
     */ const processResponse = response => {
        if (!response.type && response.resultCode) {
            return processCompleteResponse(response);
        }
        if (!response.type) {
            return {
                type: 'error',
                props: response
            };
        }
        switch (response.type.toLowerCase()) {
            case 'pending':
                return {
                    type: 'pending',
                    props: response
                };
            case 'complete':
                return processCompleteResponse(response);
            case 'validation':
                return {
                    type: 'error',
                    props: response
                };
            default:
                return {
                    type: 'error',
                    props: response
                };
        }
    };

    const QRCODE_URL = 'barcode.shtml?barcodeType=qrCode&fileType=png&data=';
    class QRLoader extends k$1 {
        interval;
        constructor(props) {
            super(props);
            this.state = {
                buttonStatus: 'default',
                completed: false,
                delay: props.delay,
                expired: false,
                loading: true,
                percentage: 100,
                timePassed: 0
            };
        }
        static defaultProps = {
            delay: 2000,
            countdownTime: 15,
            onError: () => {},
            onComplete: () => {},
            throttleTime: 60000,
            classNameModifiers: [],
            throttledInterval: 10000,
            introduction: 'wechatpay.scanqrcode'
        };
        // Retry until getting a complete response from the server or it times out\
        // Changes interval time to 10 seconds after 1 minute (60 seconds)
        statusInterval = () => {
            this.checkStatus();
            this.setState({
                timePassed: this.state.timePassed + this.props.delay
            });
            if (this.state.timePassed >= this.props.throttleTime) {
                this.setState({
                    delay: this.props.throttledInterval
                });
            }
        };
        componentDidMount() {
            this.interval = setInterval(this.statusInterval, this.state.delay);
        }
        redirectToApp = url => {
            window.location.assign(url);
        };
        componentDidUpdate(prevProps, prevState) {
            if (prevState.delay !== this.state.delay) {
                clearInterval(this.interval);
                this.interval = setInterval(this.statusInterval, this.state.delay);
            }
        }
        componentWillUnmount() {
            clearInterval(this.interval);
        }
        onTick = time => {
            this.setState({
                percentage: time.percentage
            });
        };
        onTimeUp = () => {
            this.setState({
                expired: true
            });
            clearInterval(this.interval);
            this.props.onError(new AdyenCheckoutError('ERROR', 'Payment Expired'));
        };
        onComplete = status => {
            clearInterval(this.interval);
            this.setState({
                completed: true,
                loading: false
            });
            const state = {
                data: {
                    details: {
                        payload: status.props.payload
                    },
                    paymentData: this.props.paymentData
                }
            };
            this.props.onComplete(state, this);
        };
        onError = status => {
            clearInterval(this.interval);
            this.setState({
                expired: true,
                loading: false
            });
            if (status.props.payload) {
                const state = {
                    data: {
                        details: {
                            payload: status.props.payload
                        },
                        paymentData: this.props.paymentData
                    }
                };
                this.props.onComplete(state, this);
            }
            const error = new AdyenCheckoutError('ERROR', 'error result with no payload in response');
            return this.props.onError(error);
        };
        checkStatus = () => {
            const { paymentData, clientKey, loadingContext } = this.props;
            return checkPaymentStatus(paymentData, clientKey, loadingContext)
                .then(processResponse)
                .catch(response => ({
                    type: 'network-error',
                    props: response
                }))
                .then(status => {
                    switch (status.type) {
                        case 'success':
                            this.onComplete(status);
                            break;
                        case 'error':
                            this.onError(status);
                            break;
                        default:
                            this.setState({
                                loading: false
                            });
                    }
                    return status;
                });
        };
        render({ amount, url, brandLogo, brandName, countdownTime, type, onActionHandled }, { expired, completed, loading }) {
            const { i18n, loadingContext } = useCoreContext();
            const getImage = useImage();
            const qrCodeImage = this.props.qrCodeData ? `${loadingContext}${QRCODE_URL}${this.props.qrCodeData}` : this.props.qrCodeImage;
            const finalState = (image, message) =>
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__qr-loader adyen-checkout__qr-loader--result'
                    },
                    /*#__PURE__*/ y$1('img', {
                        className: 'adyen-checkout__qr-loader__icon adyen-checkout__qr-loader__icon--result',
                        src: getImage({
                            loadingContext,
                            imageFolder: 'components/'
                        })(image),
                        alt: i18n.get(message)
                    }),
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            className: 'adyen-checkout__qr-loader__subtitle adyen-checkout__qr-loader__subtitle--result'
                        },
                        i18n.get(message)
                    )
                );
            if (expired) {
                return finalState('error', 'error.subtitle.payment');
            }
            if (completed) {
                return finalState('success', 'creditCard.success');
            }
            if (loading) {
                return /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__qr-loader'
                    },
                    brandLogo &&
                        /*#__PURE__*/ y$1('img', {
                            alt: brandName,
                            src: brandLogo,
                            className: 'adyen-checkout__qr-loader__brand-logo'
                        }),
                    /*#__PURE__*/ y$1(Spinner, null)
                );
            }
            const timeToPayString = i18n.get('wechatpay.timetopay').split('%@');
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: `
                    adyen-checkout__qr-loader
                    adyen-checkout__qr-loader--${type}
                    ${this.props.classNameModifiers.map(m => `adyen-checkout__qr-loader--${m}`)}
                `
                },
                brandLogo &&
                    /*#__PURE__*/ y$1('img', {
                        src: brandLogo,
                        alt: brandName,
                        className: 'adyen-checkout__qr-loader__brand-logo'
                    }),
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__qr-loader__subtitle'
                    },
                    i18n.get(this.props.introduction)
                ),
                /*#__PURE__*/ y$1('img', {
                    src: qrCodeImage,
                    alt: i18n.get('wechatpay.scanqrcode'),
                    onLoad: () => {
                        onActionHandled({
                            componentType: this.props.type,
                            actionDescription: 'qr-code-loaded'
                        });
                    }
                }),
                amount &&
                    amount.value &&
                    amount.currency &&
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            className: 'adyen-checkout__qr-loader__payment_amount'
                        },
                        i18n.amount(amount.value, amount.currency)
                    ),
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__qr-loader__progress'
                    },
                    /*#__PURE__*/ y$1('span', {
                        className: 'adyen-checkout__qr-loader__percentage',
                        style: {
                            width: `${this.state.percentage}%`
                        }
                    })
                ),
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__qr-loader__countdown'
                    },
                    timeToPayString[0],
                    '\xa0',
                    /*#__PURE__*/ y$1(Countdown, {
                        minutesFromNow: countdownTime,
                        onTick: this.onTick,
                        onCompleted: this.onTimeUp
                    }),
                    '\xa0',
                    timeToPayString[1]
                ),
                this.props.instructions &&
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            className: 'adyen-checkout__qr-loader__instructions'
                        },
                        i18n.get(this.props.instructions)
                    ),
                this.props.copyBtn &&
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            className: 'adyen-checkout__qr-loader__actions'
                        },
                        /*#__PURE__*/ y$1(Button, {
                            inline: true,
                            variant: 'action',
                            onClick: (e, { complete }) => {
                                copyToClipboard(this.props.qrCodeData);
                                complete();
                            },
                            icon: getImage({
                                loadingContext,
                                imageFolder: 'components/'
                            })('copy'),
                            label: i18n.get('button.copy')
                        })
                    ),
                url &&
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            className: 'adyen-checkout__qr-loader__app-link'
                        },
                        /*#__PURE__*/ y$1(ContentSeparator, null),
                        /*#__PURE__*/ y$1(Button, {
                            classNameModifiers: ['qr-loader'],
                            onClick: () => this.redirectToApp(url),
                            label: i18n.get('openApp')
                        })
                    )
            );
        }
    }

    class QRLoaderContainer extends UIElement {
        // Using the generic here allow to fully extend the QRLoaderContainer (including it's props)
        static defaultProps = {
            qrCodeImage: '',
            amount: null,
            paymentData: null,
            onError: () => {},
            onComplete: () => {},
            onActionHandled: () => {}
        };
        formatData() {
            return {
                paymentMethod: {
                    type: this.props.type || this.constructor['type'],
                    ...this.state.data
                }
            };
        }
        get isValid() {
            return true;
        }
        // Makes possible to extend the final QR code step
        renderQRCode() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(
                    SRPanelProvider,
                    {
                        srPanel: this.props.modules.srPanel
                    },
                    /*#__PURE__*/ y$1(QRLoader, {
                        ref: ref => {
                            this.componentRef = ref;
                        },
                        ...this.props,
                        type: this.constructor['type'],
                        brandLogo: this.props.brandLogo || this.icon,
                        delay: this.props.delay,
                        onComplete: this.onComplete,
                        countdownTime: this.props.countdownTime,
                        instructions: this.props.instructions,
                        onActionHandled: this.props.onActionHandled,
                        brandName: this.displayName
                    })
                )
            );
        }
        render() {
            if (this.props.paymentData) {
                return this.renderQRCode();
            }
            if (this.props.showPayButton) {
                return /*#__PURE__*/ y$1(
                    CoreProvider,
                    {
                        i18n: this.props.i18n,
                        loadingContext: this.props.loadingContext,
                        resources: this.resources
                    },
                    /*#__PURE__*/ y$1(RedirectButton, {
                        name: this.displayName,
                        onSubmit: this.submit,
                        payButton: this.payButton,
                        ref: ref => {
                            this.componentRef = ref;
                        }
                    })
                );
            }
            return null;
        }
    }

    const COUNTDOWN_MINUTES$2 = 15; // min
    const STATUS_INTERVAL$2 = 2000; // ms

    class BCMCMobileElement extends QRLoaderContainer {
        static type = 'bcmc_mobile';
        static txVariants = ['bcmc_mobile', 'bcmc_mobile_QR'];
        formatProps(props) {
            const isMobile = window.matchMedia('(max-width: 768px)').matches && /Android|iPhone|iPod/.test(navigator.userAgent);
            return {
                delay: STATUS_INTERVAL$2,
                countdownTime: COUNTDOWN_MINUTES$2,
                buttonLabel: isMobile ? 'openApp' : 'generateQRCode',
                ...super.formatProps(props)
            };
        }
    }

    const pixValidationRules = {
        socialSecurityNumber: {
            validate: validateSSN,
            errorMessage: '',
            modes: ['blur']
        },
        default: {
            validate: value => !!value && value.length > 0,
            errorMessage: '',
            modes: ['blur']
        }
    };

    const pixFormatters = {
        socialSecurityNumber: ssn => formatCPFCNPJ(ssn)
    };

    function PixInput({ name, data: dataProps, personalDetailsRequired, showPayButton = false, onChange, payButton }) {
        const { i18n } = useCoreContext();
        const formSchema = ['firstName', 'lastName', 'socialSecurityNumber'];
        const { handleChangeFor, triggerValidation, setSchema, data, valid, errors, isValid } = useForm({
            schema: formSchema,
            defaultData: dataProps,
            rules: pixValidationRules,
            formatters: pixFormatters
        });
        // Handle form schema updates
        p(() => {
            const newSchema = personalDetailsRequired ? [...formSchema] : [];
            setSchema(newSchema);
        }, [personalDetailsRequired]);
        const [status, setStatus] = h('ready');
        this.setStatus = setStatus;
        this.showValidation = () => {
            triggerValidation();
        };
        p(() => {
            onChange({
                data,
                valid,
                errors,
                isValid
            });
        }, [onChange, data, valid, errors]);
        const buttonModifiers = !personalDetailsRequired ? ['standalone'] : [];
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__pix-input__field',
                style:
                    !showPayButton && !personalDetailsRequired
                        ? {
                              display: 'none'
                          }
                        : null
            },
            personalDetailsRequired &&
                /*#__PURE__*/ y$1(BrazilPersonalDetail, {
                    i18n: i18n,
                    data: data,
                    handleChangeFor: handleChangeFor,
                    errors: errors,
                    valid: valid
                }),
            showPayButton &&
                payButton({
                    status,
                    label: `${i18n.get('continueTo')} ${name}`,
                    classNameModifiers: buttonModifiers
                })
        );
    }

    class PixElement extends QRLoaderContainer {
        static type = 'pix';
        static defaultProps = {
            showPayButton: false,
            personalDetailsRequired: false,
            countdownTime: 15,
            delay: 2000,
            ...QRLoaderContainer.defaultProps
        };
        get isValid() {
            return !!this.state.isValid;
        }
        formatProps(props) {
            return {
                copyBtn: true,
                introduction: 'pix.instructions',
                ...super.formatProps(props)
            };
        }
        formatData() {
            const { data = {} } = this.state;
            const { firstName, lastName, socialSecurityNumber = '' } = data;
            return {
                paymentMethod: {
                    type: this.props.type || this.constructor['type']
                },
                ...(firstName &&
                    lastName && {
                        shopperName: {
                            firstName,
                            lastName
                        }
                    }),
                ...(socialSecurityNumber && {
                    socialSecurityNumber: cleanCPFCNPJ(socialSecurityNumber)
                })
            };
        }
        render() {
            if (this.props.paymentData) {
                return this.renderQRCode();
            }
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(PixInput, {
                    ref: ref => {
                        this.componentRef = ref;
                    },
                    ...this.props,
                    showPayButton: this.props.showPayButton,
                    personalDetailsRequired: this.props.personalDetailsRequired,
                    name: this.displayName,
                    onChange: this.setState,
                    payButton: this.payButton
                })
            );
        }
    }

    class SwishElement extends QRLoaderContainer {
        static type = 'swish';
        formatProps(props) {
            return {
                delay: 2000,
                countdownTime: 3,
                instructions: 'swish.pendingMessage',
                ...super.formatProps(props)
            };
        }
    }

    const countdownTime$3 = 15; // min
    const delay$3 = 2000; // ms

    class WeChatPayElement extends QRLoaderContainer {
        static type = 'wechatpayQR';
        static txVariants = ['wechatpayQR', 'wechatpay'];
        formatProps(props) {
            return {
                delay: delay$3,
                countdownTime: countdownTime$3,
                ...super.formatProps(props)
            };
        }
    }

    const countdownTime$2 = 1.5; // min
    const delay$2 = 2000; // ms

    class PromptPayElement extends QRLoaderContainer {
        static type = 'promptpay';
        formatProps(props) {
            return {
                delay: delay$2,
                countdownTime: countdownTime$2,
                ...super.formatProps(props)
            };
        }
    }

    const countdownTime$1 = 3; // min
    const delay$1 = 2000; // ms

    class PayNowElement extends QRLoaderContainer {
        static type = 'paynow';
        formatProps(props) {
            return {
                delay: delay$1,
                countdownTime: countdownTime$1,
                ...super.formatProps(props)
            };
        }
    }

    const countdownTime = 1.5; // min
    const delay = 2000; // ms

    class DuitNowElement extends QRLoaderContainer {
        static type = 'duitnow';
        formatProps(props) {
            return {
                delay,
                countdownTime,
                ...super.formatProps(props)
            };
        }
    }

    function BlikInput(props) {
        const { i18n, loadingContext } = useCoreContext();
        const getImage = useImage();
        const { handleChangeFor, triggerValidation, data, valid, errors, isValid } = useForm({
            schema: ['blikCode'],
            rules: {
                blikCode: {
                    validate: code => code?.length === 6,
                    errorMessage: 'blik.invalid',
                    modes: ['blur']
                }
            },
            formatters: {
                blikCode: digitsOnlyFormatter
            }
        });
        p(() => {
            props.onChange(
                {
                    data,
                    errors,
                    valid,
                    isValid
                },
                this
            );
        }, [data, valid, errors, isValid]);
        const [status, setStatus] = h('ready');
        this.setStatus = setStatus;
        this.showValidation = triggerValidation;
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__blik'
            },
            /*#__PURE__*/ y$1(
                'p',
                {
                    className: 'adyen-checkout__blik__helper'
                },
                i18n.get('blik.help')
            ),
            /*#__PURE__*/ y$1(
                Field,
                {
                    errorMessage: !!errors.blikCode && i18n.get(errors.blikCode.errorMessage),
                    label: i18n.get('blik.code'),
                    classNameModifiers: ['blikCode', '50'],
                    isValid: valid.blikCode,
                    dir: 'ltr'
                },
                renderFormField('text', {
                    value: data.blikCode,
                    name: 'blikCode',
                    spellcheck: false,
                    required: true,
                    autocorrect: 'off',
                    autocomplete: 'off',
                    onInput: handleChangeFor('blikCode', 'input'),
                    onBlur: handleChangeFor('blikCode', 'blur'),
                    placeholder: '123456',
                    inputMode: 'numeric',
                    maxLength: 6
                })
            ),
            props.showPayButton &&
                props.payButton({
                    status,
                    icon: getImage({
                        loadingContext,
                        imageFolder: 'components/'
                    })('lock')
                })
        );
    }
    BlikInput.defaultProps = {
        data: {
            blikCode: ''
        }
    };

    function Await(props) {
        const { i18n, loadingContext } = useCoreContext();
        const getImage = useImage();
        const [completed, setCompleted] = h(false);
        const [expired, setExpired] = h(false);
        const [loading, setLoading] = h(true);
        const [hasCalledActionHandled, setHasCalledActionHandled] = h(false);
        const [delay, setDelay] = h(props.delay);
        const [percentage, setPercentage] = h(100);
        const [timePassed, setTimePassed] = h(0);
        const [hasAdjustedTime, setHasAdjustedTime] = h(false);
        const [storedTimeout, setStoredTimeout] = h(null);
        const onTimeUp = () => {
            setExpired(true);
            clearTimeout(storedTimeout);
            props.onError(new AdyenCheckoutError('ERROR', 'Payment Expired'));
        };
        const onTick = time => {
            setPercentage(time.percentage);
        };
        const onComplete = status => {
            // Only make details call if we have a payload
            if (status.props.payload) {
                setCompleted(true);
                const state = {
                    data: {
                        details: {
                            payload: status.props.payload
                        },
                        paymentData: props.paymentData
                    }
                };
                // Send success response to onAdditionalDetails
                return props.onComplete(state, this);
            }
            // Show error state & call merchant defined error callback if we do not have a payload
            setExpired(true);
            props.onError(new AdyenCheckoutError('ERROR', 'successful result, but no payload in response'));
        };
        const onError = status => {
            setExpired(true);
            // Only make details call if we have a payload
            if (status.props.payload) {
                const state = {
                    data: {
                        details: {
                            payload: status.props.payload
                        },
                        paymentData: props.paymentData
                    }
                };
                // Send error response to onAdditionalDetails
                return props.onComplete(state, this);
            }
            // Call merchant defined error callback if we do not have a payload
            props.onError(new AdyenCheckoutError('ERROR', 'error result with no payload in response'));
        };
        const checkStatus = () => {
            const { paymentData, clientKey } = props;
            if (!hasCalledActionHandled) {
                props.onActionHandled({
                    componentType: props.type,
                    actionDescription: 'polling-started'
                });
                setHasCalledActionHandled(true);
            }
            checkPaymentStatus(paymentData, clientKey, loadingContext)
                .then(processResponse)
                .catch(({ message, ...response }) => ({
                    type: 'network-error',
                    props: {
                        ...(message && {
                            message: i18n.get(message)
                        }),
                        ...response
                    }
                }))
                .then(status => {
                    switch (status.type) {
                        case 'success':
                            onComplete(status);
                            break;
                        case 'error':
                            onError(status);
                            break;
                        default:
                            setLoading(false);
                    }
                });
        };
        const redirectToApp = url => {
            window.location.assign(url);
        };
        p(() => {
            checkStatus();
            return () => {
                clearTimeout(storedTimeout);
            };
        }, []);
        p(() => {
            if (expired) return clearTimeout(storedTimeout);
            if (completed) return clearTimeout(storedTimeout);
            if (!loading) {
                // Retry until getting a complete response from the server OR it times out
                // Changes setTimeout time to new value (throttleInterval) after a certain amount of time (throttleTime) has passed
                const statusInterval = () => {
                    checkStatus();
                    const actualTimePassed = timePassed + delay;
                    // timePassed is the value that is the main "engine" that drives this useEffect/polling
                    setTimePassed(actualTimePassed);
                    if (actualTimePassed >= props.throttleTime && !hasAdjustedTime) {
                        setDelay(props.throttleInterval);
                        setHasAdjustedTime(true);
                    }
                };
                // Create (another) interval to poll for a result
                setStoredTimeout(setTimeout(statusInterval, delay));
            }
        }, [loading, expired, completed, timePassed]);
        const finalState = (image, message) =>
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__await adyen-checkout__await--result'
                },
                /*#__PURE__*/ y$1('img', {
                    className: 'adyen-checkout__await__icon adyen-checkout__await__icon--result',
                    src: getImage({
                        loadingContext,
                        imageFolder: 'components/'
                    })(image),
                    alt: i18n.get(message)
                }),
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__await__subtitle adyen-checkout__await__subtitle--result'
                    },
                    i18n.get(message)
                )
            );
        if (expired) {
            return finalState('error', 'error.subtitle.payment');
        }
        if (completed) {
            return finalState('success', 'creditCard.success');
        }
        if (loading) {
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__await'
                },
                props.brandLogo &&
                    /*#__PURE__*/ y$1('img', {
                        src: props.brandLogo,
                        alt: props.type,
                        className: 'adyen-checkout__await__brand-logo'
                    }),
                /*#__PURE__*/ y$1(Spinner, {
                    inline: false,
                    size: 'large'
                })
            );
        }
        const timeToPayString = i18n.get('wechatpay.timetopay').split('%@');
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: classNames(
                    'adyen-checkout__await',
                    `adyen-checkout__await--${props.type}`,
                    props.classNameModifiers.map(m => `adyen-checkout__await--${m}`)
                )
            },
            props.brandLogo &&
                /*#__PURE__*/ y$1('img', {
                    src: props.brandLogo,
                    alt: props.type,
                    className: 'adyen-checkout__await__brand-logo'
                }),
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__await__subtitle'
                },
                props.messageText
            ),
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__await__indicator-holder'
                },
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__await__indicator-spinner'
                    },
                    /*#__PURE__*/ y$1(Spinner, {
                        inline: false,
                        size: 'medium'
                    })
                ),
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__await__indicator-text'
                    },
                    props.awaitText
                )
            ),
            props.showCountdownTimer &&
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__await__countdown-holder'
                    },
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            className: 'adyen-checkout__await__progress'
                        },
                        /*#__PURE__*/ y$1('span', {
                            className: 'adyen-checkout__await__percentage',
                            style: {
                                width: `${percentage}%`
                            }
                        })
                    ),
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            className: 'adyen-checkout__await__countdown'
                        },
                        timeToPayString[0],
                        '\xa0',
                        /*#__PURE__*/ y$1(Countdown, {
                            minutesFromNow: props.countdownTime,
                            onTick: onTick,
                            onCompleted: onTimeUp
                        }),
                        '\xa0',
                        timeToPayString[1]
                    )
                ),
            props.url &&
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__await__app-link'
                    },
                    /*#__PURE__*/ y$1(ContentSeparator, null),
                    /*#__PURE__*/ y$1(Button, {
                        classNameModifiers: ['await'],
                        onClick: () => redirectToApp(props.url),
                        label: i18n.get('openApp')
                    })
                )
        );
    }
    Await.defaultProps = {
        countdownTime: 15,
        onError: () => {},
        onComplete: () => {},
        onActionHandled: () => {},
        delay: 2000,
        throttleTime: 60000,
        throttleInterval: 10000,
        showCountdownTimer: true,
        classNameModifiers: [],
        url: null
    };

    const COUNTDOWN_MINUTES$1 = 15; // min
    const STATUS_INTERVAL$1 = 2000; // ms
    const THROTTLE_TIME$1 = 60000; // ms
    const THROTTLE_INTERVAL$1 = 10000; // ms
    var config$1 = {
        STATUS_INTERVAL: STATUS_INTERVAL$1,
        COUNTDOWN_MINUTES: COUNTDOWN_MINUTES$1,
        THROTTLE_TIME: THROTTLE_TIME$1,
        THROTTLE_INTERVAL: THROTTLE_INTERVAL$1,
        type: 'blik',
        messageTextId: 'blik.confirmPayment',
        awaitTextId: 'await.waitForConfirmation',
        showCountdownTimer: false
    };

    class BlikElement extends UIElement {
        static type = 'blik';
        formatData() {
            const recurringPayment = !!this.props.storedPaymentMethodId;
            return {
                paymentMethod: {
                    type: BlikElement.type,
                    ...(!recurringPayment && {
                        blikCode: this.state?.data?.blikCode
                    }),
                    ...(recurringPayment && {
                        storedPaymentMethodId: this.props.storedPaymentMethodId
                    })
                }
            };
        }
        get isValid() {
            if (this.props.storedPaymentMethodId) {
                return true;
            }
            return !!this.state.isValid;
        }
        /**
         * NOTE: for future reference:
         *  this.props.onComplete (which is called from this.onComplete) equates to the merchant defined onAdditionalDetails callback
         *  (the initial /payments response defines an "await" action, actionTypes.ts translates this to "onComplete: props.onAdditionalDetails")
         */ render() {
            if (this.props.paymentData) {
                return /*#__PURE__*/ y$1(
                    CoreProvider,
                    {
                        i18n: this.props.i18n,
                        loadingContext: this.props.loadingContext,
                        resources: this.resources
                    },
                    /*#__PURE__*/ y$1(
                        SRPanelProvider,
                        {
                            srPanel: this.props.modules.srPanel
                        },
                        /*#__PURE__*/ y$1(Await, {
                            ref: ref => {
                                this.componentRef = ref;
                            },
                            clientKey: this.props.clientKey,
                            paymentData: this.props.paymentData,
                            onError: this.handleError,
                            onComplete: this.onComplete,
                            brandLogo: this.icon,
                            type: config$1.type,
                            messageText: this.props.i18n.get(config$1.messageTextId),
                            awaitText: this.props.i18n.get(config$1.awaitTextId),
                            showCountdownTimer: config$1.showCountdownTimer,
                            delay: config$1.STATUS_INTERVAL,
                            countdownTime: config$1.COUNTDOWN_MINUTES,
                            throttleTime: config$1.THROTTLE_TIME,
                            throttleInterval: config$1.THROTTLE_INTERVAL,
                            onActionHandled: this.props.onActionHandled
                        })
                    )
                );
            }
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                this.props.storedPaymentMethodId
                    ? /*#__PURE__*/ y$1(RedirectButton, {
                          name: this.displayName,
                          amount: this.props.amount,
                          payButton: this.payButton,
                          onSubmit: this.submit,
                          ref: ref => {
                              this.componentRef = ref;
                          }
                      })
                    : /*#__PURE__*/ y$1(BlikInput, {
                          ref: ref => {
                              this.componentRef = ref;
                          },
                          ...this.props,
                          onChange: this.setState,
                          onSubmit: this.submit,
                          payButton: this.payButton
                      })
            );
        }
    }

    // ((+351|00351|351)?)(2\d{1}|(9(3|6|2|1)))\d{7} full portuguese phone num regex
    const portugueseRegex = /\b(2\d{1}|(9(3|6|2|1)))\d{7}\b/; // match 2 + any digit + 7 digits OR 9 + 3|6|2|1 + 7 digits
    const defaultRegex = /^(\d){4,}$/; // match >= 4 digits
    const phoneValidationRules = {
        phoneNumber: {
            modes: ['blur'],
            validate: (value, context) => {
                // TODO improve this switching mechanism *if* we get any more country based regexs
                const testRegex = context.state.data.phonePrefix === '+351' ? portugueseRegex : defaultRegex;
                return isEmpty(value) ? null : testRegex.test(value);
            },
            errorMessage: 'invalidPhoneNumber'
        },
        phonePrefix: {
            modes: ['blur'],
            validate: phonePrefix => !!phonePrefix,
            errorMessage: 'invalidCountryCode'
        }
    };
    const phoneFormatters = {
        phoneNumber: {
            formatterFn: val => val.replace(getFormattingRegEx('^\\d', 'g'), '')
        }
    };

    function PhoneInput(props) {
        const { i18n } = useCoreContext();
        const schema = props.requiredFields || [...(props?.items?.length ? ['phonePrefix'] : []), 'phoneNumber'];
        const showPrefix = schema.includes('phonePrefix') && !!props?.items?.length;
        const showNumber = schema.includes('phoneNumber');
        const { handleChangeFor, data, valid, errors, isValid, triggerValidation, setSchema } = useForm({
            i18n,
            ...props,
            schema,
            defaultData: props.data,
            rules: phoneValidationRules,
            formatters: phoneFormatters
        });
        p(() => {
            setSchema(schema);
        }, [schema.toString()]);
        // Force re-validation of the phoneNumber when data.phonePrefix changes (since the validation rules will also change)
        p(() => {
            if (data.phoneNumber) {
                handleChangeFor('phoneNumber', 'blur')(data.phoneNumber);
            }
        }, [data.phonePrefix]);
        p(() => {
            props.onChange({
                data,
                valid,
                errors,
                isValid
            });
        }, [data, valid, errors, isValid]);
        this.triggerValidation = triggerValidation;
        /**
         * The <Field> element assigns a uniqueId which it uses for the \<label for=\> attribute.
         * This uniqueId is then passed as a prop to the first child of the field
         *  (which is usually an element created by renderFormField) where it is assigned to the id attribute of that element.
         * However here we have a different use case and the uniqueId is written to the <div class="adyen-checkout__input"> which in this case
         *  is the first child of the <Field>.
         * In order to retrieve this uniqueId and assign it to the phoneNumber input (to thus link <label> and <input> - we need this function.
         */ const getRelatedUniqueId = () => {
            const holder = document.querySelector('.adyen-checkout-phone-input--new [uniqueid]');
            return holder ? holder.getAttribute('uniqueid') : null;
        };
        const getPhoneFieldError = T(
            field => {
                if (errors[field]) {
                    const propsField = field === 'phoneNumber' ? 'phoneNumberErrorKey' : 'phonePrefixErrorKey';
                    const key = props[propsField] ? props[propsField] : errors[field].errorMessage;
                    const errMsg = i18n.get(key);
                    return errMsg ? errMsg : null;
                }
                return null;
            },
            [errors]
        );
        const uniqueIDPhonePrefix = F(() => {
            return getUniqueId$1('adyen-checkout-phonePrefix');
        }, []);
        // Note we don't pass a string to the errorMessage prop because the phoneInput comp can potentially have 2 errors (one for prefix, one for number)
        // - so we want to handle both those errors here in this comp rather than within the Field comp.
        // However we do want to take advantage of the error icon that Field can provide - so we pass a boolean if errors exist
        const hasErrorMessage = (errors.phoneNumber || errors.phonePrefix) && true;
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout-phone-input--new'
            },
            /*#__PURE__*/ y$1(
                'label',
                {
                    htmlFor: getRelatedUniqueId()
                },
                /*#__PURE__*/ y$1(
                    'span',
                    {
                        className: classNames({
                            'adyen-checkout__label__text': true,
                            'adyen-checkout__label__text--error': hasErrorMessage
                        })
                    },
                    props.phoneNumberKey ? i18n.get(props.phoneNumberKey) : i18n.get('telephoneNumber')
                )
            ),
            /*#__PURE__*/ y$1(
                Field,
                {
                    name: 'phoneNumber',
                    className: classNames({
                        'adyen-checkout-field': true,
                        'adyen-checkout-field--phone-input': true
                    }),
                    inputWrapperModifiers: ['phone-input'],
                    isValid: valid.phoneNumber,
                    errorMessage: hasErrorMessage,
                    // Avoids the situation where the phoneNumber is valid but the phonePrefix is not and we see the valid icon showing underneath the error icon
                    showValidIcon: errors.phonePrefix ? false : true
                },
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: classNames({
                            // Styles from FormFields.scss
                            'adyen-checkout__input': true,
                            'adyen-checkout__input--invalid': !!errors.phoneNumber || !!errors.phonePrefix,
                            'adyen-checkout__input--valid': (showPrefix ? valid.phonePrefix : true) && valid.phoneNumber,
                            // Proposed renaming
                            'adyen-checkout-input': true,
                            // Style from local PhoneInput.scss
                            'adyen-checkout-input-holder--phone-input': true
                        })
                    },
                    showPrefix &&
                        renderFormField('select', {
                            className: 'adyen-checkout-dropdown adyen-checkout-dropdown--countrycode-selector',
                            items: props.items,
                            onChange: handleChangeFor('phonePrefix'),
                            // readonly: props.phonePrefixIsReadonly,
                            placeholder: i18n.get('infix'),
                            selected: data.phonePrefix,
                            uniqueId: uniqueIDPhonePrefix
                        }),
                    showNumber &&
                        /*#__PURE__*/ y$1(
                            'div',
                            {
                                className: 'adyen-checkout-phone-number'
                            },
                            /*#__PURE__*/ y$1('input', {
                                id: getRelatedUniqueId(),
                                type: 'tel',
                                value: data.phoneNumber,
                                onInput: handleChangeFor('phoneNumber', 'input'),
                                onBlur: handleChangeFor('phoneNumber', 'blur'),
                                // readOnly={props.phoneNumberIsReadonly}
                                placeholder: props.placeholders.phoneNumber || '123456789',
                                className: 'adyen-checkout__input adyen-checkout-input adyen-checkout-input--phone-number',
                                autoCorrect: 'off',
                                'aria-required': true,
                                'aria-label': props.phoneNumberKey ? i18n.get(props.phoneNumberKey) : i18n.get('telephoneNumber'),
                                'aria-invalid': !valid.phoneNumber,
                                'aria-describedby': `${getRelatedUniqueId()}${ARIA_ERROR_SUFFIX}`
                            })
                        )
                )
            ),
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout-phone-input__error-holder'
                },
                showPrefix &&
                    getPhoneFieldError('phonePrefix') &&
                    /*#__PURE__*/ y$1(
                        'span',
                        {
                            className: 'adyen-checkout__error-text',
                            'aria-live': 'polite',
                            id: `${uniqueIDPhonePrefix}${ARIA_ERROR_SUFFIX}`
                        },
                        getPhoneFieldError('phonePrefix')
                    ),
                showNumber &&
                    getPhoneFieldError('phoneNumber') &&
                    /*#__PURE__*/ y$1(
                        'span',
                        {
                            className: 'adyen-checkout__error-text',
                            'aria-live': 'polite',
                            id: `${getRelatedUniqueId()}${ARIA_ERROR_SUFFIX}`
                        },
                        getPhoneFieldError('phoneNumber')
                    )
            )
        );
    }
    PhoneInput.defaultProps = {
        phoneLabel: 'telephoneNumber'
    };

    function usePhonePrefixes({ allowedCountries, loadingContext, handleError }) {
        const [loadingStatus, setLoadingStatus] = h('loading');
        const [phonePrefixes, setPhonePrefixes] = h([]);
        y(() => {
            getDataset('phonenumbers', loadingContext)
                .then(response => {
                    const countriesFilter = country => allowedCountries.includes(country.id);
                    const filteredCountries = allowedCountries.length ? response.filter(countriesFilter) : response;
                    const mappedCountries = filteredCountries.map(item => {
                        // Get country flags (magic! - shifts the country code characters to the correct position of the emoji in the unicode space)
                        const codePoints = item.id
                            .toUpperCase()
                            .split('')
                            .map(char => 127397 + char.charCodeAt(0));
                        // Get flag emoji + space at end (it doesn't work to add spaces in the template literal, below)
                        const flag = String.fromCodePoint ? String.fromCodePoint(...codePoints) + '\u00A0\u00A0' : '';
                        return {
                            id: item.prefix,
                            name: `${flag} ${item.prefix} (${item.id})`,
                            selectedOptionName: `${flag} ${item.prefix}`
                        };
                    });
                    setPhonePrefixes(mappedCountries || []);
                    setLoadingStatus('ready');
                })
                .catch(error => {
                    setPhonePrefixes([]);
                    setLoadingStatus('ready');
                    handleError?.(new AdyenCheckoutError('ERROR', error));
                });
        }, []);
        return {
            phonePrefixes,
            loadingStatus
        };
    }

    function MBWayInput(props) {
        const { i18n, loadingContext } = useCoreContext();
        const phoneInputRef = _(null);
        const { allowedCountries = [] } = props;
        const [status, setStatus] = h('ready');
        this.setStatus = setStatus;
        this.showValidation = phoneInputRef?.current?.triggerValidation;
        const { loadingStatus: prefixLoadingStatus, phonePrefixes } = usePhonePrefixes({
            allowedCountries,
            loadingContext,
            handleError: props.onError
        });
        const onChange = ({ data, valid, errors, isValid }) => {
            props.onChange({
                data,
                valid,
                errors,
                isValid
            });
        };
        return /*#__PURE__*/ y$1(
            LoadingWrapper,
            {
                status: prefixLoadingStatus
            },
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__mb-way'
                },
                /*#__PURE__*/ y$1(PhoneInput, {
                    ...props,
                    items: phonePrefixes,
                    ref: phoneInputRef,
                    onChange: onChange,
                    data: props.data
                }),
                props.showPayButton &&
                    props.payButton({
                        status,
                        label: i18n.get('confirmPurchase')
                    })
            )
        );
    }
    MBWayInput.defaultProps = {
        onChange: () => {},
        phoneNumberKey: 'mobileNumber',
        phoneNumberErrorKey: 'mobileNumber.invalid'
    };

    const COUNTDOWN_MINUTES = 15; // min
    const STATUS_INTERVAL = 2000; // ms
    const THROTTLE_TIME = 60000; // ms
    const THROTTLE_INTERVAL = 10000; // ms
    var config = {
        STATUS_INTERVAL,
        COUNTDOWN_MINUTES,
        THROTTLE_TIME,
        THROTTLE_INTERVAL,
        type: 'mbway',
        messageTextId: 'mbway.confirmPayment',
        awaitTextId: 'await.waitForConfirmation',
        showCountdownTimer: false
    };

    class MBWayElement extends UIElement {
        static type = 'mbway';
        formatProps(props) {
            const { data = {}, placeholders = {} } = props;
            return {
                ...props,
                data: {
                    phoneNumber: data.telephoneNumber || data.phoneNumber,
                    phonePrefix: data.phonePrefix || '+351' // if not specified default to Portuguese country code
                },
                placeholders: {
                    phoneNumber: placeholders.telephoneNumber || placeholders.phoneNumber || '932123456'
                }
            };
        }
        /**
         * Formats the component data output
         */ formatData() {
            return {
                paymentMethod: {
                    type: MBWayElement.type,
                    ...(this.state.data?.phoneNumber && {
                        telephoneNumber: this.state.data.phonePrefix + this.state.data.phoneNumber
                    })
                }
            };
        }
        get isValid() {
            return !!this.state.isValid;
        }
        get displayName() {
            return this.props.name;
        }
        render() {
            if (this.props.paymentData) {
                return /*#__PURE__*/ y$1(
                    CoreProvider,
                    {
                        i18n: this.props.i18n,
                        loadingContext: this.props.loadingContext,
                        resources: this.resources
                    },
                    /*#__PURE__*/ y$1(
                        SRPanelProvider,
                        {
                            srPanel: this.props.modules.srPanel
                        },
                        /*#__PURE__*/ y$1(Await, {
                            ref: ref => {
                                this.componentRef = ref;
                            },
                            clientKey: this.props.clientKey,
                            paymentData: this.props.paymentData,
                            onError: this.props.onError,
                            onComplete: this.onComplete,
                            brandLogo: this.icon,
                            type: config.type,
                            messageText: this.props.i18n.get(config.messageTextId),
                            awaitText: this.props.i18n.get(config.awaitTextId),
                            showCountdownTimer: config.showCountdownTimer,
                            delay: config.STATUS_INTERVAL,
                            countdownTime: config.COUNTDOWN_MINUTES,
                            throttleTime: config.THROTTLE_TIME,
                            throttleInterval: config.THROTTLE_INTERVAL,
                            onActionHandled: this.props.onActionHandled
                        })
                    )
                );
            }
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(MBWayInput, {
                    ref: ref => {
                        this.componentRef = ref;
                    },
                    ...this.props,
                    onChange: this.setState,
                    onSubmit: this.submit,
                    payButton: this.payButton
                })
            );
        }
    }

    const vpaValidationRules = {
        virtualPaymentAddress: {
            validate: value => !!value && value.length > 0,
            errorMessage: '',
            modes: ['blur']
        },
        default: {
            validate: value => !!value && value.length > 0,
            errorMessage: '',
            modes: ['blur']
        }
    };

    const VpaInput = props => {
        const formSchema = ['virtualPaymentAddress'];
        const { handleChangeFor, triggerValidation, data, valid, errors, isValid } = useForm({
            schema: formSchema,
            defaultData: props.data,
            rules: vpaValidationRules
        });
        const vpaInputHandlersRef = _({
            validateInput: null
        });
        const validateInput = T(() => {
            triggerValidation();
        }, [triggerValidation]);
        p(() => {
            vpaInputHandlersRef.current.validateInput = validateInput;
            props.onSetInputHandlers(vpaInputHandlersRef.current);
        }, [validateInput, props.onSetInputHandlers]);
        p(() => {
            props.onChange({
                data,
                valid,
                errors,
                isValid
            });
        }, [data, valid, errors, isValid]);
        return /*#__PURE__*/ y$1(
            Field,
            {
                label: 'Virtual Payment Address',
                errorMessage: !!errors.virtualPaymentAddress,
                classNameModifiers: ['vpa'],
                name: 'virtualPaymentAddress'
            },
            renderFormField('text', {
                name: 'virtualPaymentAddress',
                autocorrect: 'off',
                spellcheck: false,
                disabled: props.disabled,
                value: data.virtualPaymentAddress,
                onInput: handleChangeFor('virtualPaymentAddress', 'input'),
                onBlur: handleChangeFor('virtualPaymentAddress', 'blur')
            })
        );
    };

    function SegmentedControl({ classNameModifiers, selectedValue, disabled = false, options, onChange }) {
        if (!options || options.length === 0) {
            return null;
        }
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: classNames(
                    'adyen-checkout__segmented-control',
                    {
                        'adyen-checkout__segmented-control--disabled': disabled
                    },
                    ...classNameModifiers.map(modifier => `adyen-checkout__segmented-control--${modifier}`)
                ),
                role: 'group'
            },
            options.map(({ label, value, htmlProps }) =>
                /*#__PURE__*/ y$1(
                    'button',
                    {
                        disabled: disabled,
                        key: value,
                        onClick: event => onChange(value, event),
                        className: classNames('adyen-checkout__segmented-control-segment', {
                            'adyen-checkout__segmented-control-segment--selected': selectedValue === value
                        }),
                        type: 'button',
                        ...htmlProps
                    },
                    label
                )
            )
        );
    }

    var UpiMode;
    (function (UpiMode) {
        UpiMode['Vpa'] = 'vpa';
        UpiMode['QrCode'] = 'qrCode';
    })(UpiMode || (UpiMode = {}));

    const A11Y = {
        ButtonId: {
            VPA: `upi-button-${UpiMode.Vpa}`,
            QR: `upi-button-${UpiMode.QrCode}`
        },
        AreaId: {
            VPA: `upi-area-${UpiMode.Vpa}`,
            QR: `upi-area-${UpiMode.QrCode}`
        }
    };
    function UPIComponent({ defaultMode, onChange, onUpdateMode, payButton, showPayButton }) {
        const { i18n } = useCoreContext();
        const getImage = useImage();
        const [vpaInputHandlers, setVpaInputHandlers] = h(null);
        const [status, setStatus] = h('ready');
        const [mode, setMode] = h(defaultMode);
        this.setStatus = status => {
            setStatus(status);
        };
        this.showValidation = () => {
            vpaInputHandlers.validateInput();
        };
        const onSetVpaInputHandlers = T(handlers => {
            setVpaInputHandlers(handlers);
        }, []);
        const onChangeUpiMode = T(
            newMode => {
                setMode(newMode);
                onUpdateMode(newMode);
            },
            [onUpdateMode]
        );
        return /*#__PURE__*/ y$1(
            _$1,
            null,
            /*#__PURE__*/ y$1(
                'p',
                {
                    className: 'adyen-checkout_upi-mode-selection-text'
                },
                i18n.get('upi.modeSelection')
            ),
            /*#__PURE__*/ y$1(SegmentedControl, {
                onChange: onChangeUpiMode,
                selectedValue: mode,
                disabled: status === 'loading',
                classNameModifiers: ['upi-margin-bottom'],
                options: [
                    {
                        label: isMobile() ? 'VPA' : 'Virtual Payment Address',
                        value: UpiMode.Vpa,
                        htmlProps: {
                            id: A11Y.ButtonId.VPA,
                            'aria-expanded': mode === UpiMode.Vpa,
                            'aria-controls': A11Y.AreaId.VPA
                        }
                    },
                    {
                        label: 'QR Code',
                        value: UpiMode.QrCode,
                        htmlProps: {
                            id: A11Y.ButtonId.QR,
                            'aria-expanded': mode === UpiMode.QrCode,
                            'aria-controls': A11Y.AreaId.QR
                        }
                    }
                ]
            }),
            mode === UpiMode.Vpa
                ? /*#__PURE__*/ y$1(
                      'div',
                      {
                          id: A11Y.AreaId.VPA,
                          'aria-labelledby': A11Y.ButtonId.VPA,
                          role: 'region'
                      },
                      /*#__PURE__*/ y$1(VpaInput, {
                          disabled: status === 'loading',
                          onChange: onChange,
                          onSetInputHandlers: onSetVpaInputHandlers
                      }),
                      showPayButton &&
                          payButton({
                              label: i18n.get('continue'),
                              status
                          })
                  )
                : /*#__PURE__*/ y$1(
                      'div',
                      {
                          id: A11Y.AreaId.QR,
                          'aria-labelledby': A11Y.ButtonId.QR,
                          role: 'region'
                      },
                      showPayButton &&
                          payButton({
                              label: i18n.get('generateQRCode'),
                              icon: getImage({
                                  imageFolder: 'components/'
                              })('qr'),
                              status
                          })
                  )
        );
    }

    var /**
         * 'upi' tx variant is the parent one.
         * 'upi_collect' and 'upi_qr' are the sub variants which are submitted according to the shopper interaction.
         */ TX_VARIANT;
    (function (TX_VARIANT) {
        TX_VARIANT['UpiCollect'] = 'upi_collect';
        TX_VARIANT['UpiQr'] = 'upi_qr';
    })(TX_VARIANT || (TX_VARIANT = {}));
    class UPI extends UIElement {
        static type = 'upi';
        static txVariants = ['upi', 'upi_qr', 'upi_collect'];
        useQrCodeVariant;
        static defaultProps = {
            defaultMode: UpiMode.Vpa
        };
        get isValid() {
            return this.useQrCodeVariant || !!this.state.isValid;
        }
        formatData() {
            const { virtualPaymentAddress } = this.state.data;
            return {
                paymentMethod: {
                    type: this.useQrCodeVariant ? TX_VARIANT.UpiQr : TX_VARIANT.UpiCollect,
                    ...(virtualPaymentAddress &&
                        !this.useQrCodeVariant && {
                            virtualPaymentAddress
                        })
                }
            };
        }
        onUpdateMode = mode => {
            if (mode === UpiMode.QrCode) {
                this.useQrCodeVariant = true;
                /**
                 * When selecting QR code mode, we need to clear the state data and trigger the 'onChange'.
                 */ this.setState({
                    data: {},
                    valid: {},
                    errors: {},
                    isValid: true
                });
            } else {
                this.useQrCodeVariant = false;
            }
        };
        renderContent(type) {
            switch (type) {
                case 'qrCode':
                    return /*#__PURE__*/ y$1(QRLoader, {
                        ref: ref => {
                            this.componentRef = ref;
                        },
                        ...this.props,
                        qrCodeData: this.props.qrCodeData ? encodeURIComponent(this.props.qrCodeData) : null,
                        type: TX_VARIANT.UpiQr,
                        brandLogo: this.props.brandLogo || this.icon,
                        onComplete: this.onComplete,
                        introduction: this.props.i18n.get('upi.qrCodeWaitingMessage'),
                        countdownTime: 5,
                        onActionHandled: this.props.onActionHandled
                    });
                case 'await':
                    return /*#__PURE__*/ y$1(Await, {
                        ref: ref => {
                            this.componentRef = ref;
                        },
                        onError: this.props.onError,
                        clientKey: this.props.clientKey,
                        paymentData: this.props.paymentData,
                        onComplete: this.onComplete,
                        brandLogo: this.icon,
                        type: TX_VARIANT.UpiCollect,
                        messageText: this.props.i18n.get('upi.vpaWaitingMessage'),
                        awaitText: this.props.i18n.get('await.waitForConfirmation'),
                        showCountdownTimer: true,
                        countdownTime: 5,
                        onActionHandled: this.props.onActionHandled
                    });
                default:
                    return /*#__PURE__*/ y$1(UPIComponent, {
                        ref: ref => {
                            this.componentRef = ref;
                        },
                        payButton: this.payButton,
                        onChange: this.setState,
                        onUpdateMode: this.onUpdateMode,
                        defaultMode: this.props.defaultMode,
                        showPayButton: this.props.showPayButton
                    });
            }
        }
        render() {
            const { type } = this.props;
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(
                    SRPanelProvider,
                    {
                        srPanel: this.props.modules.srPanel
                    },
                    this.renderContent(type)
                )
            );
        }
    }

    function Alert({ children, classNames: classNames$1 = [], type = 'error', icon }) {
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: classNames('adyen-checkout__alert-message', `adyen-checkout__alert-message--${type}`, classNames$1)
            },
            icon &&
                /*#__PURE__*/ y$1(Icon, {
                    className: 'adyen-checkout__alert-message__icon',
                    type: icon
                }),
            children
        );
    }

    function GiftcardResult({ brand, amount, balance, transactionLimit, ...props }) {
        const { i18n } = useCoreContext();
        const transactionAmount = amount.value > transactionLimit?.value ? transactionLimit : amount;
        const remainingBalance = balance?.value - transactionAmount?.value;
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__giftcard-result'
            },
            /*#__PURE__*/ y$1(
                'ul',
                {
                    className: 'adyen-checkout__giftcard-result__balance'
                },
                /*#__PURE__*/ y$1(
                    'li',
                    {
                        className: 'adyen-checkout__giftcard-result__balance__item'
                    },
                    /*#__PURE__*/ y$1(
                        'span',
                        {
                            className: 'adyen-checkout__giftcard-result__balance__title'
                        },
                        i18n.get('giftcardBalance')
                    ),
                    /*#__PURE__*/ y$1(
                        'span',
                        {
                            className: 'adyen-checkout__giftcard-result__balance__value adyen-checkout__giftcard-result__balance__value--amount'
                        },
                        i18n.amount(balance.value, balance.currency)
                    )
                ),
                transactionLimit &&
                    transactionLimit.value &&
                    /*#__PURE__*/ y$1(
                        'li',
                        {
                            className: 'adyen-checkout__giftcard-result__balance__item'
                        },
                        /*#__PURE__*/ y$1(
                            'span',
                            {
                                className:
                                    'adyen-checkout__giftcard-result__balance__title adyen-checkout__giftcard-result__balance__title--transactionLimit'
                            },
                            i18n.get('giftcardTransactionLimit', {
                                values: {
                                    amount: i18n.amount(transactionLimit.value, transactionLimit.currency)
                                }
                            })
                        )
                    )
            ),
            this.props.showPayButton &&
                this.props.payButton({
                    amount: transactionAmount,
                    status: props.status,
                    onClick: props.onSubmit
                }),
            /*#__PURE__*/ y$1(
                'p',
                {
                    className: 'adyen-checkout__giftcard-result__remaining-balance'
                },
                i18n.get('partialPayment.remainingBalance', {
                    values: {
                        amount: i18n.amount(remainingBalance, balance.currency)
                    }
                })
            )
        );
    }

    const GiftcardNumberField = ({ i18n, classNameModifiers, sfpState, getCardErrorMessage, focusedElement, setFocusOn }) => {
        return /*#__PURE__*/ y$1(
            Field,
            {
                label: i18n.get('creditCard.numberField.title'),
                classNameModifiers: ['number', ...classNameModifiers],
                errorMessage: getCardErrorMessage(sfpState),
                focused: focusedElement === 'encryptedCardNumber',
                onFocusField: () => setFocusOn('encryptedCardNumber'),
                dir: 'ltr',
                name: 'encryptedCardNumber',
                errorVisibleToScreenReader: false
            },
            /*#__PURE__*/ y$1(DataSfSpan, {
                encryptedFieldType: 'encryptedCardNumber',
                'data-info': '{"length":"15-32", "maskInterval":4}',
                className: classNames({
                    'adyen-checkout__input': true,
                    'adyen-checkout__input--large': true,
                    'adyen-checkout__card__cardNumber__input': true,
                    'adyen-checkout__input--error': getCardErrorMessage(sfpState),
                    'adyen-checkout__input--focus': focusedElement === 'encryptedCardNumber'
                })
            })
        );
    };

    const GiftcardPinField = ({ i18n, classNameModifiers, sfpState, focusedElement, setFocusOn, label = i18n.get('creditCard.pin.title') }) => {
        return /*#__PURE__*/ y$1(
            Field,
            {
                label: label,
                classNameModifiers: ['pin', ...classNameModifiers],
                errorMessage: sfpState.errors.encryptedSecurityCode && i18n.get(sfpState.errors.encryptedSecurityCode),
                focused: focusedElement === 'encryptedSecurityCode',
                onFocusField: () => setFocusOn('encryptedSecurityCode'),
                dir: 'ltr',
                name: 'encryptedSecurityCode',
                errorVisibleToScreenReader: false
            },
            /*#__PURE__*/ y$1(DataSfSpan, {
                encryptedFieldType: 'encryptedSecurityCode',
                'data-info': '{"length":"3-10", "maskInterval": 0}',
                className: classNames({
                    'adyen-checkout__input': true,
                    'adyen-checkout__input--large': true,
                    'adyen-checkout__card__cvc__input': true,
                    'adyen-checkout__input--error': sfpState.errors.encryptedSecurityCode,
                    'adyen-checkout__input--focus': focusedElement === 'encryptedSecurityCode'
                })
            })
        );
    };

    const GiftCardFields = props => {
        const { setRootNode, pinRequired } = props;
        return /*#__PURE__*/ y$1(
            'div',
            {
                ref: setRootNode,
                className: 'adyen-checkout__field-wrapper'
            },
            /*#__PURE__*/ y$1(GiftcardNumberField, {
                ...props,
                classNameModifiers: pinRequired ? ['70'] : ['100']
            }),
            pinRequired &&
                /*#__PURE__*/ y$1(GiftcardPinField, {
                    ...props,
                    classNameModifiers: ['30']
                })
        );
    };

    class Giftcard extends k$1 {
        state = {
            status: 'ready',
            data: {},
            balance: null,
            transactionLimit: null,
            focusedElement: false,
            isValid: false
        };
        static defaultProps = {
            pinRequired: true,
            expiryDateRequired: false,
            onChange: () => {},
            onFocus: () => {},
            onBlur: () => {},
            fieldsLayoutComponent: GiftCardFields
        };
        sfp;
        onChange = sfpState => {
            this.props.onChange({
                data: sfpState.data,
                isValid: sfpState.isSfpValid
            });
        };
        showValidation = () => {
            this.sfp.showValidation();
        };
        setStatus(status) {
            this.setState({
                status
            });
        }
        handleFocus = e => {
            this.setState({
                focusedElement: e.currentFocusObject
            });
            const isFocused = e.focus === true;
            if (isFocused) {
                this.props.onFocus(e);
            } else {
                this.props.onBlur(e);
            }
        };
        setBalance = ({ balance, transactionLimit }) => {
            this.setState({
                balance,
                transactionLimit
            });
        };
        render(props, { focusedElement, balance, transactionLimit }) {
            const { i18n } = useCoreContext();
            const transactionAmount = transactionLimit?.value < balance?.value ? transactionLimit : balance;
            const hasEnoughBalance = transactionAmount?.value >= this.props.amount?.value;
            if (transactionAmount && hasEnoughBalance) {
                return /*#__PURE__*/ y$1(GiftcardResult, {
                    balance: balance,
                    transactionLimit: transactionLimit,
                    onSubmit: props.onSubmit,
                    ...props
                });
            }
            const getCardErrorMessage = sfpState => {
                if (sfpState.errors.encryptedCardNumber) return i18n.get(sfpState.errors.encryptedCardNumber);
                switch (this.state.status) {
                    case 'no-balance':
                        return i18n.get('error.giftcard.no-balance');
                    case 'card-error':
                        return i18n.get('error.giftcard.card-error');
                    case 'currency-error':
                        return i18n.get('error.giftcard.currency-error');
                    default:
                        return null;
                }
            };
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__giftcard'
                },
                this.state.status === 'error' &&
                    /*#__PURE__*/ y$1(
                        Alert,
                        {
                            icon: 'cross'
                        },
                        i18n.get('error.message.unknown')
                    ),
                /*#__PURE__*/ y$1(SecuredFieldsProvider, {
                    ...this.props,
                    ref: ref => {
                        this.sfp = ref;
                    },
                    onChange: this.onChange,
                    onFocus: this.handleFocus,
                    type: GIFT_CARD,
                    render: ({ setRootNode, setFocusOn }, sfpState) =>
                        this.props.fieldsLayoutComponent({
                            i18n: i18n,
                            pinRequired: this.props.pinRequired,
                            focusedElement: focusedElement,
                            getCardErrorMessage: getCardErrorMessage,
                            setRootNode: setRootNode,
                            setFocusOn: setFocusOn,
                            sfpState: sfpState
                        })
                }),
                this.props.showPayButton &&
                    this.props.payButton({
                        status: this.state.status,
                        onClick: this.props.onBalanceCheck,
                        label: i18n.get('applyGiftcard')
                    })
            );
        }
    }

    class GiftcardElement extends UIElement {
        static type = 'giftcard';
        static defaultProps = {
            brandsConfiguration: {}
        };
        formatProps(props) {
            return {
                ...props?.configuration,
                ...props
            };
        }
        formatData() {
            return {
                paymentMethod: {
                    type: this.constructor['type'],
                    brand: this.props.brand,
                    encryptedCardNumber: this.state.data?.encryptedCardNumber,
                    encryptedSecurityCode: this.state.data?.encryptedSecurityCode
                }
            };
        }
        get isValid() {
            return !!this.state.isValid;
        }
        get icon() {
            return (
                this.props.brandsConfiguration[this.props.brand]?.icon ||
                this.props.icon ||
                this.resources.getImage({
                    loadingContext: this.props.loadingContext
                })(this.props.brand)
            );
        }
        get displayName() {
            return this.props.brandsConfiguration[this.props.brand]?.name || this.props.name;
        }
        handleBalanceCheck = data => {
            if (this.props.onBalanceCheck) {
                return new Promise((resolve, reject) => {
                    this.props.onBalanceCheck(resolve, reject, data);
                });
            }
            if (this.props.session) {
                return this.props.session.checkBalance(data);
            }
        };
        onOrderRequest = data => {
            if (this.props.onOrderRequest)
                return new Promise((resolve, reject) => {
                    this.props.onOrderRequest(resolve, reject, data);
                });
            if (this.props.session) {
                return this.props.session.createOrder();
            }
        };
        handleOrder = ({ order }) => {
            this.updateParent({
                order
            });
            if (this.props.session && this.props.onOrderCreated) {
                return this.props.onOrderCreated(order);
            }
        };
        balanceCheck() {
            return this.onBalanceCheck();
        }
        onBalanceCheck = () => {
            // skip balance check if no onBalanceCheck event has been defined
            const hasBalanceCheck = this.props.session || this.props.onBalanceCheck;
            if (!hasBalanceCheck) return this.submit();
            if (!this.isValid) {
                this.showValidation();
                return false;
            }
            this.setStatus('loading');
            this.handleBalanceCheck(this.formatData())
                .then(({ balance, transactionLimit = {} }) => {
                    if (!balance) throw new Error('card-error'); // card doesn't exist
                    if (balance?.currency !== this.props.amount?.currency) throw new Error('currency-error');
                    if (balance?.value <= 0) throw new Error('no-balance');
                    this.componentRef.setBalance({
                        balance,
                        transactionLimit
                    });
                    if (this.props.amount.value > balance.value || this.props.amount.value > transactionLimit.value) {
                        if (this.props.order) {
                            return this.submit();
                        }
                        return this.onOrderRequest(this.data).then(order => {
                            this.setState({
                                order: {
                                    orderData: order.orderData,
                                    pspReference: order.pspReference
                                }
                            });
                            this.submit();
                        });
                    } else {
                        if (this.props.onRequiringConfirmation) {
                            this.props.onRequiringConfirmation();
                        }
                    }
                })
                .catch(error => {
                    this.setStatus(error?.message || 'error');
                    if (this.props.onError) this.handleError(new AdyenCheckoutError('ERROR', error));
                });
        };
        // Giftcards override the regular payButton flow
        payButton = props => {
            return /*#__PURE__*/ y$1(PayButton, props);
        };
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(Giftcard, {
                    ref: ref => {
                        this.componentRef = ref;
                    },
                    ...this.props,
                    onChange: this.setState,
                    onBalanceCheck: this.onBalanceCheck,
                    onSubmit: this.submit,
                    payButton: this.payButton
                })
            );
        }
    }

    const MealVoucherExpiryField = ({ i18n, sfpState, focusedElement, setFocusOn }) => {
        return /*#__PURE__*/ y$1(
            Field,
            {
                label: i18n.get('creditCard.expiryDateField.title'),
                classNameModifiers: ['expireDate', '50'],
                errorMessage: sfpState.errors.encryptedExpiryDate && i18n.get(sfpState.errors.encryptedExpiryDate),
                focused: focusedElement === 'encryptedExpiryDate',
                onFocusField: () => setFocusOn('encryptedExpiryDate'),
                dir: 'ltr',
                name: 'encryptedExpiryDate',
                errorVisibleToScreenReader: false
            },
            /*#__PURE__*/ y$1(DataSfSpan, {
                encryptedFieldType: 'encryptedExpiryDate',
                className: classNames(
                    'adyen-checkout__input',
                    'adyen-checkout__input--small',
                    'adyen-checkout__card__exp-date__input',
                    [styles$4['adyen-checkout__input']],
                    {
                        'adyen-checkout__input--error': sfpState.errors.encryptedExpiryDate,
                        'adyen-checkout__input--focus': focusedElement === 'encryptedExpiryDate',
                        'adyen-checkout__input--valid': !!sfpState.valid.encryptedExpiryMonth && !!sfpState.valid.encryptedExpiryYear
                    }
                )
            })
        );
    };

    const MealVoucherFields = props => {
        const { setRootNode } = props;
        const pinFieldProps = {
            ...props,
            label: props.i18n.get('creditCard.cvcField.title')
        };
        return /*#__PURE__*/ y$1(
            'div',
            {
                ref: setRootNode
            },
            /*#__PURE__*/ y$1(GiftcardNumberField, {
                ...props,
                classNameModifiers: ['100']
            }),
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__field-wrapper'
                },
                /*#__PURE__*/ y$1(MealVoucherExpiryField, props),
                /*#__PURE__*/ y$1(GiftcardPinField, {
                    ...pinFieldProps,
                    classNameModifiers: ['50']
                })
            )
        );
    };

    class MealVoucherFRElement extends GiftcardElement {
        static type = 'mealVoucher_FR';
        static txVariants = ['mealVoucher_FR_natixis', 'mealVoucher_FR_sodexo', 'mealVoucher_FR_groupeup'];
        constructor(checkoutRef, props) {
            super({
                ...props,
                pinRequired: true,
                expiryDateRequired: true,
                fieldsLayoutComponent: MealVoucherFields
            });
        }
        formatProps(props) {
            return {
                brand: props.type,
                ...props
            };
        }
        /**
         * Formats the component data output
         */ formatData() {
            return {
                paymentMethod: {
                    type: this.constructor['type'],
                    brand: this.props.brand,
                    encryptedCardNumber: this.state.data?.encryptedCardNumber,
                    encryptedSecurityCode: this.state.data?.encryptedSecurityCode,
                    encryptedExpiryMonth: this.state.data?.encryptedExpiryMonth,
                    encryptedExpiryYear: this.state.data?.encryptedExpiryYear
                }
            };
        }
    }

    class AddressElement extends UIElement {
        static type = 'address';
        get data() {
            return this.state.data;
        }
        get isValid() {
            return !!this.state.isValid;
        }
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(Address, {
                    setComponentRef: this.setComponentRef,
                    ...this.props,
                    onChange: this.setState,
                    ...{
                        payButton: this.payButton
                    }
                })
            );
        }
    }

    function BankTransferResult(props) {
        const { reference, totalAmount, paymentMethodType } = props;
        const { i18n } = useCoreContext();
        const getImage = useImage();
        return /*#__PURE__*/ y$1(Voucher, {
            paymentMethodType: paymentMethodType,
            introduction: i18n.get('bankTransfer.instructions'),
            imageUrl: getImage({})(paymentMethodType),
            amount: totalAmount && i18n.amount(totalAmount.value, totalAmount.currency),
            voucherDetails: [
                {
                    label: i18n.get('bankTransfer.beneficiary'),
                    value: props.beneficiary
                },
                {
                    label: i18n.get('bankTransfer.iban'),
                    value: props.iban
                },
                {
                    label: i18n.get('bankTransfer.bic'),
                    value: props.bic
                },
                {
                    label: i18n.get('bankTransfer.reference'),
                    value: reference
                }
            ]
        });
    }

    function BankTransferInput(props) {
        const { i18n } = useCoreContext();
        const [showingEmail, setShowingEmail] = h(false);
        const { handleChangeFor, triggerValidation, data, valid, errors, isValid, setSchema } = useForm({
            schema: [],
            defaultData: props.data,
            rules: {
                shopperEmail: personalDetailsValidationRules.shopperEmail
            }
        });
        const toggleEmailField = () => setShowingEmail(!showingEmail);
        p(() => {
            const newSchema = showingEmail ? ['shopperEmail'] : [];
            setSchema(newSchema);
        }, [showingEmail]);
        this.showValidation = triggerValidation;
        p(() => {
            props.onChange({
                data,
                errors,
                valid,
                isValid
            });
        }, [data, valid, errors, showingEmail, isValid]);
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__bankTransfer'
            },
            /*#__PURE__*/ y$1(
                'p',
                {
                    className: 'adyen-checkout__bankTransfer__introduction'
                },
                i18n.get('bankTransfer.introduction')
            ),
            /*#__PURE__*/ y$1(SendCopyToEmail, {
                classNames: 'adyen-checkout__bankTransfer__emailField',
                value: data.shopperEmail,
                errors: errors.shopperEmail,
                onToggle: toggleEmailField,
                onInput: handleChangeFor('shopperEmail', 'input'),
                onBlur: handleChangeFor('shopperEmail', 'blur')
            })
        );
    }

    class BankTransferElement extends UIElement {
        static type = 'bankTransfer_IBAN';
        static defaultProps = {
            showPayButton: true,
            showEmailAddress: true
        };
        // @ts-ignore Double check why state extends all props
        state = {
            isValid: !this.props.showEmailAddress,
            data: {}
        };
        get isValid() {
            return !!this.state.isValid;
        }
        /**
         * Formats the component data output
         */ formatData() {
            const { shopperEmail } = this.state.data;
            return {
                paymentMethod: {
                    type: BankTransferElement.type
                },
                ...(shopperEmail && {
                    shopperEmail
                })
            };
        }
        handleRef = ref => {
            this.componentRef = ref;
        };
        render() {
            if (this.props.reference) {
                return /*#__PURE__*/ y$1(
                    CoreProvider,
                    {
                        i18n: this.props.i18n,
                        loadingContext: this.props.loadingContext,
                        resources: this.resources
                    },
                    /*#__PURE__*/ y$1(BankTransferResult, {
                        ref: this.handleRef,
                        ...this.props
                    })
                );
            }
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                this.props.showEmailAddress &&
                    /*#__PURE__*/ y$1(BankTransferInput, {
                        ref: this.handleRef,
                        ...this.props,
                        onChange: this.setState
                    }),
                this.props.showPayButton &&
                    /*#__PURE__*/ y$1(RedirectButton, {
                        ...this.props,
                        name: this.displayName,
                        onSubmit: this.submit,
                        payButton: this.payButton
                    })
            );
        }
    }

    function CampaignContent({ description = '', name = '', logoUrl = '', url = '', backgroundUrl = '' }) {
        const backgroundImage = `linear-gradient(0, #000, #0003), url(${backgroundUrl})`;
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__campaign-container'
            },
            /*#__PURE__*/ y$1(Img, {
                className: 'adyen-checkout__campaign-background-image',
                style: {
                    backgroundImage
                },
                backgroundUrl: backgroundUrl
            }),
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__campaign-content'
                },
                logoUrl &&
                    /*#__PURE__*/ y$1('img', {
                        src: logoUrl,
                        className: 'adyen-checkout__campaign-logo',
                        alt: name
                    }),
                name &&
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            className: 'adyen-checkout__campaign-title'
                        },
                        name
                    ),
                description &&
                    /*#__PURE__*/ y$1(
                        'div',
                        {
                            className: 'adyen-checkout__campaign-description'
                        },
                        description,
                        url && ' ›'
                    )
            )
        );
    }

    function CampaignContainer(props) {
        const { url } = props;
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__campaign'
            },
            !url && /*#__PURE__*/ y$1(CampaignContent, props),
            url &&
                /*#__PURE__*/ y$1(
                    'a',
                    {
                        href: url,
                        className: 'adyen-checkout__campaign-link',
                        target: '_blank',
                        rel: 'noopener noreferrer'
                    },
                    /*#__PURE__*/ y$1(CampaignContent, props)
                )
        );
    }

    const ButtonGroup = ({ options = [], name, onChange }) =>
        /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__button-group'
            },
            options.map(({ label, selected, value, disabled }, index) =>
                /*#__PURE__*/ y$1(
                    'label',
                    {
                        key: `${name}${index}`,
                        className: classNames({
                            'adyen-checkout__button': true,
                            'adyen-checkout__button--selected': selected,
                            'adyen-checkout__button--disabled': disabled
                        })
                    },
                    /*#__PURE__*/ y$1('input', {
                        type: 'radio',
                        className: 'adyen-checkout__button-group__input',
                        value: value,
                        checked: selected,
                        onChange: onChange,
                        disabled: disabled
                    }),
                    /*#__PURE__*/ y$1(
                        'span',
                        {
                            className: 'adyen-checkout__button-text'
                        },
                        label
                    )
                )
            )
        );

    function DonationComponent(props) {
        const { amounts, onCancel, onDonate, showCancelButton = true, disclaimerMessage } = props;
        const { i18n, loadingContext } = useCoreContext();
        const getImage = useImage();
        const { currency } = amounts;
        const [status, setStatus] = h('ready');
        const [isValid, setIsValid] = h(false);
        const [amount, setAmount] = h({
            currency,
            value: null
        });
        this.setStatus = status => {
            setStatus(status);
        };
        const getAmount = T((value, currency) => i18n.amount(value, currency), [i18n]);
        const handleAmountSelected = ({ target }) => {
            const value = parseInt(target.value, 10);
            setIsValid(true);
            setAmount(amount => ({
                ...amount,
                value
            }));
        };
        const handleDonate = () => {
            setStatus('loading');
            onDonate({
                data: {
                    amount
                }
            });
        };
        const handleDecline = () => {
            setStatus('loading');
            onCancel({
                data: {
                    amount
                },
                isValid
            });
        };
        p(() => {
            props.onChange({
                data: {
                    amount
                },
                isValid
            });
        }, [amount, isValid]);
        if (status === 'error') {
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__adyen-giving'
                },
                /*#__PURE__*/ y$1(Img, {
                    className: 'adyen-checkout__status__icon adyen-checkout__status__icon--error',
                    src: getImage({
                        loadingContext,
                        imageFolder: 'components/'
                    })('error'),
                    alt: i18n.get('error.message.unknown')
                }),
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__status__text'
                    },
                    i18n.get('error.message.unknown')
                )
            );
        }
        if (status === 'success') {
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__adyen-giving'
                },
                /*#__PURE__*/ y$1(Img, {
                    className: 'adyen-checkout__status__icon adyen-checkout__status__icon--success',
                    src: getImage({
                        loadingContext,
                        imageFolder: 'components/'
                    })('heart'),
                    alt: i18n.get('thanksForYourSupport')
                }),
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__status__text'
                    },
                    i18n.get('thanksForYourSupport')
                )
            );
        }
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__adyen-giving'
            },
            /*#__PURE__*/ y$1(CampaignContainer, props),
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__adyen-giving-actions'
                },
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__amounts'
                    },
                    /*#__PURE__*/ y$1(ButtonGroup, {
                        options: amounts.values.map(value => ({
                            value,
                            label: getAmount(value, currency),
                            disabled: status === 'loading',
                            selected: value === amount.value
                        })),
                        name: 'amount',
                        onChange: handleAmountSelected
                    })
                ),
                disclaimerMessage &&
                    /*#__PURE__*/ y$1(DisclaimerMessage, {
                        message: disclaimerMessage.message.replace('%{linkText}', `%#${disclaimerMessage.linkText}%#`),
                        urls: [disclaimerMessage.link]
                    }),
                /*#__PURE__*/ y$1(Button, {
                    classNameModifiers: ['donate'],
                    onClick: handleDonate,
                    label: i18n.get('donateButton'),
                    disabled: !amount.value,
                    status: status
                }),
                showCancelButton &&
                    /*#__PURE__*/ y$1(Button, {
                        classNameModifiers: ['decline'],
                        variant: 'ghost',
                        onClick: handleDecline,
                        disabled: status === 'loading',
                        label: `${i18n.get('notNowButton')} ›`
                    })
            )
        );
    }
    DonationComponent.defaultProps = {
        onCancel: () => {},
        onChange: () => {},
        onDonate: () => {},
        amounts: {},
        showCancelButton: true
    };

    /**
     * DonationElement
     */ class DonationElement extends UIElement {
        static type = 'donation';
        constructor(props) {
            super(props);
            this.donate = this.donate.bind(this);
        }
        static defaultProps = {
            onCancel: () => {},
            onDonate: () => {}
        };
        /**
         * Returns the component payment data ready to submit to the Checkout API
         */ get data() {
            return this.state.data;
        }
        /**
         * Returns whether the component state is valid or not
         */ get isValid() {
            return this.state.isValid;
        }
        setState(newState) {
            this.state = {
                ...this.state,
                ...newState
            };
        }
        donate() {
            const { data, isValid } = this;
            this.props.onDonate(
                {
                    data,
                    isValid
                },
                this
            );
        }
        handleRef = ref => {
            this.componentRef = ref;
        };
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(DonationComponent, {
                    ...this.props,
                    ref: this.handleRef,
                    onChange: this.setState,
                    onDonate: this.donate
                })
            );
        }
    }

    var defaultProps = {
        instantPaymentTypes: [],
        isDropin: true,
        onReady: () => {},
        onComplete: () => {},
        onError: () => {},
        onSelect: () => {},
        onDisableStoredPaymentMethod: null,
        onChange: () => {},
        amount: {},
        installmentOptions: {},
        paymentMethodsConfiguration: {},
        openFirstPaymentMethod: true,
        openFirstStoredPaymentMethod: true,
        showStoredPaymentMethods: true,
        showPaymentMethods: true,
        showRemoveStoredPaymentMethodButton: false,
        showPayButton: true // show the default pay button
    };

    const PaymentMethodDetails = ({ paymentMethodComponent, isLoaded }) => {
        if (paymentMethodComponent && isLoaded) {
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__payment-method__details__content'
                },
                paymentMethodComponent
            );
        }
        return null;
    };

    var styles = {
        'adyen-checkout__payment-methods-list': 'DropinComponent-module_adyen-checkout__payment-methods-list__mAjAm',
        'adyen-checkout__payment-method': 'DropinComponent-module_adyen-checkout__payment-method__nWdwg',
        'adyen-checkout__payment-method__details': 'DropinComponent-module_adyen-checkout__payment-method__details__-rsW7',
        'adyen-checkout__payment-method__image': 'DropinComponent-module_adyen-checkout__payment-method__image__nB80V',
        'adyen-checkout__payment-method__image__wrapper': 'DropinComponent-module_adyen-checkout__payment-method__image__wrapper__6NWzA',
        'adyen-checkout__payment-method--selected': 'DropinComponent-module_adyen-checkout__payment-method--selected__6egZF'
    };

    const paymentMethodsWithoutBorder = ['googlepay', 'paywithgoogle'];
    const PaymentMethodIcon = ({ src, altDescription, type, disabled = false }) => {
        return /*#__PURE__*/ y$1(
            'span',
            {
                className: classNames('adyen-checkout__payment-method__image__wrapper', styles['adyen-checkout__payment-method__image__wrapper'], {
                    'adyen-checkout__payment-method__image__wrapper--outline': !paymentMethodsWithoutBorder.includes(type),
                    'adyen-checkout__payment-method__image__wrapper--disabled': !!disabled
                })
            },
            /*#__PURE__*/ y$1(Img, {
                className: `adyen-checkout__payment-method__image ${styles['adyen-checkout__payment-method__image']}`,
                src: src,
                alt: altDescription
            })
        );
    };

    const DisableOneClickConfirmation = ({ id, open, onDisable, onCancel }) => {
        const { i18n } = useCoreContext();
        return /*#__PURE__*/ y$1(
            'div',
            {
                id: id,
                'aria-hidden': !open,
                className: classNames({
                    'adyen-checkout__payment-method__disable-confirmation': true,
                    'adyen-checkout__payment-method__disable-confirmation--open': open
                })
            },
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout__payment-method__disable-confirmation__content'
                },
                i18n.get('storedPaymentMethod.disable.confirmation'),
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__payment-method__disable-confirmation__buttons'
                    },
                    /*#__PURE__*/ y$1(
                        'button',
                        {
                            type: 'button',
                            className: classNames(
                                'adyen-checkout__button',
                                'adyen-checkout__payment-method__disable-confirmation__button',
                                'adyen-checkout__payment-method__disable-confirmation__button--remove'
                            ),
                            disabled: !open,
                            onClick: onDisable
                        },
                        i18n.get('storedPaymentMethod.disable.confirmButton')
                    ),
                    /*#__PURE__*/ y$1(
                        'button',
                        {
                            type: 'button',
                            className: classNames(
                                'adyen-checkout__button',
                                'adyen-checkout__payment-method__disable-confirmation__button',
                                'adyen-checkout__payment-method__disable-confirmation__button--cancel'
                            ),
                            disabled: !open,
                            onClick: onCancel
                        },
                        i18n.get('storedPaymentMethod.disable.cancelButton')
                    )
                )
            )
        );
    };

    const prepareVisibleBrands = allowedBrands => {
        const visibleBrands = allowedBrands.length <= 4 ? allowedBrands : allowedBrands.slice(0, 3);
        return {
            visibleBrands,
            leftBrandsAmount: allowedBrands.length - visibleBrands.length
        };
    };
    const CompactView = ({ allowedBrands, isPaymentMethodSelected }) => {
        if (isPaymentMethodSelected) {
            return null;
        }
        const { visibleBrands, leftBrandsAmount } = prepareVisibleBrands(allowedBrands);
        return /*#__PURE__*/ y$1(
            'span',
            {
                className: 'adyen-checkout__payment-method__brands'
            },
            visibleBrands.map(brand =>
                /*#__PURE__*/ y$1(PaymentMethodIcon, {
                    key: brand.name,
                    altDescription: brand.name,
                    type: brand.name,
                    src: brand.icon
                })
            ),
            leftBrandsAmount !== 0 &&
                /*#__PURE__*/ y$1(
                    'span',
                    {
                        className: 'adyen-checkout__payment-method__brand-number'
                    },
                    '+',
                    leftBrandsAmount
                )
        );
    };

    const PaymentMethodBrands = ({ activeBrand, brands, excludedUIBrands, isPaymentMethodSelected, isCompactView = true }) => {
        // A set of brands filtered to exclude those that can never appear in the UI
        const allowedBrands = brands.filter(brand => !excludedUIBrands?.includes(brand.name));
        if (isCompactView) {
            return /*#__PURE__*/ y$1(CompactView, {
                allowedBrands: allowedBrands,
                isPaymentMethodSelected: isPaymentMethodSelected
            });
        }
        return /*#__PURE__*/ y$1(
            'span',
            {
                className: 'adyen-checkout__payment-method__brands'
            },
            allowedBrands.map(brand =>
                /*#__PURE__*/ y$1(PaymentMethodIcon, {
                    key: brand.name,
                    altDescription: brand.name,
                    type: brand.name,
                    src: brand.icon,
                    disabled: activeBrand && activeBrand !== brand.name
                })
            )
        );
    };

    const PaymentMethodName = ({ displayName, additionalInfo, isSelected }) =>
        /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__payment-method__name_wrapper'
            },
            /*#__PURE__*/ y$1(
                'span',
                {
                    className: classNames({
                        'adyen-checkout__payment-method__name': true,
                        'adyen-checkout__payment-method__name--selected': isSelected
                    })
                },
                displayName
            ),
            /*#__PURE__*/ y$1(
                'div',
                {
                    className: classNames({
                        'adyen-checkout__payment-method__additional-info': true,
                        'adyen-checkout__payment-method__additional-info--selected': isSelected
                    })
                },
                additionalInfo
            )
        );

    class PaymentMethodItem extends k$1 {
        static defaultProps = {
            paymentMethod: null,
            isSelected: false,
            isLoaded: false,
            isLoading: false,
            showDisableStoredPaymentMethodConfirmation: false
        };
        state = {
            showDisableStoredPaymentMethodConfirmation: false,
            activeBrand: null
        };
        componentDidMount() {
            this.props.paymentMethod.eventEmitter.on('brand', e => {
                this.setState({
                    activeBrand: e.brand
                });
            });
        }
        componentWillUnmount() {
            this.props.paymentMethod.eventEmitter.off('brand', e => {
                this.setState({
                    activeBrand: e.brand
                });
            });
        }
        toggleDisableConfirmation = () => {
            this.setState({
                showDisableStoredPaymentMethodConfirmation: !this.state.showDisableStoredPaymentMethodConfirmation
            });
        };
        onDisableStoredPaymentMethod = () => {
            this.props.onDisableStoredPaymentMethod(this.props.paymentMethod);
            this.toggleDisableConfirmation();
        };
        handleOnListItemClick = () => {
            const { onSelect, paymentMethod } = this.props;
            onSelect(paymentMethod);
        };
        render({ paymentMethod, isSelected, isDisablingPaymentMethod, isLoaded, isLoading, standalone }, { activeBrand }) {
            const { i18n } = useCoreContext();
            if (!paymentMethod) {
                return null;
            }
            const paymentMethodClassnames = classNames({
                'adyen-checkout__payment-method': true,
                [styles['adyen-checkout__payment-method']]: true,
                [`adyen-checkout__payment-method--${paymentMethod.props.type}`]: true,
                [`adyen-checkout__payment-method--${paymentMethod.props.fundingSource ?? 'credit'}`]: true,
                'adyen-checkout__payment-method--selected': isSelected,
                [styles['adyen-checkout__payment-method--selected']]: isSelected,
                'adyen-checkout__payment-method--loading': isLoading,
                'adyen-checkout__payment-method--disabling': isDisablingPaymentMethod,
                'adyen-checkout__payment-method--confirming': this.state.showDisableStoredPaymentMethodConfirmation,
                'adyen-checkout__payment-method--standalone': standalone,
                [styles['adyen-checkout__payment-method--loading']]: isLoading,
                [paymentMethod._id]: true,
                [this.props.className]: true
            });
            const showRemovePaymentMethodButton = this.props.showRemovePaymentMethodButton && paymentMethod.props.oneClick && isSelected;
            const disableConfirmationId = `remove-${paymentMethod._id}`;
            const containerId = `container-${paymentMethod._id}`;
            const buttonId = `button-${paymentMethod._id}`;
            const showBrands = !paymentMethod.props.oneClick && paymentMethod.brands && paymentMethod.brands.length > 0;
            return /*#__PURE__*/ y$1(
                'li',
                {
                    key: paymentMethod._id,
                    className: paymentMethodClassnames,
                    onClick: this.handleOnListItemClick
                },
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__payment-method__header'
                    },
                    /*#__PURE__*/ y$1(
                        'button',
                        {
                            className: 'adyen-checkout__payment-method__header__title',
                            id: buttonId,
                            role: 'radio',
                            'aria-checked': isSelected,
                            type: 'button'
                        },
                        /*#__PURE__*/ y$1('span', {
                            className: classNames({
                                'adyen-checkout__payment-method__radio': true,
                                'adyen-checkout__payment-method__radio--selected': isSelected
                            }),
                            'aria-hidden': 'true'
                        }),
                        /*#__PURE__*/ y$1(PaymentMethodIcon, {
                            ...(paymentMethod.props.oneClick && {
                                altDescription: paymentMethod.props.name
                            }),
                            type: paymentMethod.type,
                            src: paymentMethod.icon
                        }),
                        /*#__PURE__*/ y$1(PaymentMethodName, {
                            displayName: paymentMethod.displayName,
                            isSelected: isSelected,
                            additionalInfo: paymentMethod.additionalInfo
                        })
                    ),
                    showRemovePaymentMethodButton &&
                        /*#__PURE__*/ y$1(
                            'button',
                            {
                                type: 'button',
                                className: 'adyen-checkout__button adyen-checkout__button--inline adyen-checkout__button--link',
                                onClick: this.toggleDisableConfirmation,
                                'aria-expanded': this.state.showDisableStoredPaymentMethodConfirmation,
                                'aria-controls': disableConfirmationId
                            },
                            i18n.get('storedPaymentMethod.disable.button')
                        ),
                    showBrands &&
                        /*#__PURE__*/ y$1(PaymentMethodBrands, {
                            activeBrand: activeBrand,
                            brands: paymentMethod.brands,
                            excludedUIBrands: BRAND_ICON_UI_EXCLUSION_LIST,
                            isPaymentMethodSelected: isSelected,
                            isCompactView: paymentMethod.props.showBrandsUnderCardNumber
                        })
                ),
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: `adyen-checkout__payment-method__details ${styles['adyen-checkout__payment-method__details']}`,
                        id: containerId,
                        role: 'region',
                        'aria-labelledby': buttonId
                    },
                    showRemovePaymentMethodButton &&
                        /*#__PURE__*/ y$1(DisableOneClickConfirmation, {
                            id: disableConfirmationId,
                            open: this.state.showDisableStoredPaymentMethodConfirmation,
                            onDisable: this.onDisableStoredPaymentMethod,
                            onCancel: this.toggleDisableConfirmation
                        }),
                    /*#__PURE__*/ y$1(PaymentMethodDetails, {
                        paymentMethodComponent: paymentMethod.render(),
                        isLoaded: isLoaded
                    })
                )
            );
        }
    }

    const OrderPaymentMethods = ({ order, orderStatus, onOrderCancel, brandLogoConfiguration }) => {
        const { i18n } = useCoreContext();
        const getImage = useImage();
        return /*#__PURE__*/ y$1(
            'div',
            null,
            /*#__PURE__*/ y$1(
                'ul',
                {
                    className: 'adyen-checkout__order-payment-methods-list'
                },
                orderStatus?.paymentMethods?.map((orderPaymentMethod, index) =>
                    /*#__PURE__*/ y$1(
                        'li',
                        {
                            key: `${orderPaymentMethod.type}-${index}`,
                            className: 'adyen-checkout__order-payment-method'
                        },
                        /*#__PURE__*/ y$1(
                            'div',
                            {
                                className: 'adyen-checkout__order-payment-method__header'
                            },
                            /*#__PURE__*/ y$1(
                                'div',
                                {
                                    className: 'adyen-checkout__payment-method__header__title'
                                },
                                /*#__PURE__*/ y$1(PaymentMethodIcon, {
                                    altDescription: orderPaymentMethod.name,
                                    type: orderPaymentMethod.type,
                                    src: brandLogoConfiguration[orderPaymentMethod.type] || getImage({})(orderPaymentMethod.type)
                                }),
                                '•••• ',
                                orderPaymentMethod.lastFour
                            ),
                            onOrderCancel &&
                                /*#__PURE__*/ y$1(
                                    'button',
                                    {
                                        type: 'button',
                                        className: 'adyen-checkout__button adyen-checkout__button--inline adyen-checkout__button--link',
                                        onClick: () => {
                                            onOrderCancel({
                                                order
                                            });
                                        }
                                    },
                                    i18n.get('storedPaymentMethod.disable.button')
                                )
                        ),
                        /*#__PURE__*/ y$1(
                            'div',
                            {
                                className: 'adyen-checkout__order-payment-method__details'
                            },
                            /*#__PURE__*/ y$1(
                                'div',
                                {
                                    className: 'adyen-checkout__order-payment-method__deducted-amount'
                                },
                                /*#__PURE__*/ y$1(
                                    'div',
                                    {
                                        className: 'adyen-checkout__order-payment-method__deducted-amount__label'
                                    },
                                    i18n.get('deductedBalance')
                                ),
                                /*#__PURE__*/ y$1(
                                    'div',
                                    {
                                        className: 'adyen-checkout__order-payment-method__deducted-amount__value'
                                    },
                                    i18n.amount(orderPaymentMethod.amount.value, orderPaymentMethod.amount.currency)
                                )
                            )
                        )
                    )
                )
            ),
            orderStatus.remainingAmount &&
                /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout__order-remaining-amount'
                    },
                    i18n.get('partialPayment.warning'),
                    ' ',
                    /*#__PURE__*/ y$1('strong', null, i18n.amount(orderStatus.remainingAmount.value, orderStatus.remainingAmount.currency))
                )
        );
    };

    function InstantPaymentMethods({ paymentMethods }) {
        const { i18n } = useCoreContext();
        return /*#__PURE__*/ y$1(
            _$1,
            null,
            /*#__PURE__*/ y$1(
                'ul',
                {
                    className: 'adyen-checkout__instant-payment-methods-list'
                },
                paymentMethods.map(pm =>
                    /*#__PURE__*/ y$1(
                        'li',
                        {
                            key: pm.type
                        },
                        pm.render()
                    )
                )
            ),
            /*#__PURE__*/ y$1(ContentSeparator, {
                label: i18n.get('orPayWith')
            })
        );
    }

    function useBrandLogoConfiguration(paymentMethods) {
        const [brandLogoConfiguration, setBrandLogoConfiguration] = h({});
        p(() => {
            setBrandLogoConfiguration(
                paymentMethods.reduce(
                    (accumulator, paymentMethod) => ({
                        ...accumulator,
                        ...(paymentMethod.props.brand &&
                            paymentMethod.icon && {
                                [paymentMethod.props.brand]: paymentMethod.icon
                            })
                    }),
                    {}
                )
            );
        }, [paymentMethods]);
        return brandLogoConfiguration;
    }

    class PaymentMethodList extends k$1 {
        static defaultProps = {
            instantPaymentMethods: [],
            paymentMethods: [],
            activePaymentMethod: null,
            cachedPaymentMethods: {},
            orderStatus: null,
            onSelect: () => {},
            onDisableStoredPaymentMethod: () => {},
            isDisablingPaymentMethod: false,
            isLoading: false
        };
        componentDidMount() {
            // Open first PaymentMethodItem
            if (this.props.paymentMethods[0]) {
                const firstPaymentMethod = this.props.paymentMethods[0];
                const shouldOpenFirstStored = this.props.openFirstStoredPaymentMethod && getProp(firstPaymentMethod, 'props.oneClick') === true;
                const shouldOpenFirstPaymentMethod = shouldOpenFirstStored || this.props.openFirstPaymentMethod;
                if (shouldOpenFirstPaymentMethod) {
                    this.props.onSelect(firstPaymentMethod);
                }
            }
        }
        render({ paymentMethods, instantPaymentMethods, activePaymentMethod, cachedPaymentMethods, isLoading, isDisablingPaymentMethod }) {
            const { i18n } = useCoreContext();
            const paymentMethodListClassnames = classNames({
                [styles['adyen-checkout__payment-methods-list']]: true,
                'adyen-checkout__payment-methods-list': true,
                'adyen-checkout__payment-methods-list--loading': isLoading
            });
            const brandLogoConfiguration = useBrandLogoConfiguration(paymentMethods);
            return /*#__PURE__*/ y$1(
                _$1,
                null,
                this.props.orderStatus &&
                    /*#__PURE__*/ y$1(OrderPaymentMethods, {
                        order: this.props.order,
                        orderStatus: this.props.orderStatus,
                        onOrderCancel: this.props.onOrderCancel,
                        brandLogoConfiguration: brandLogoConfiguration
                    }),
                !!instantPaymentMethods.length &&
                    /*#__PURE__*/ y$1(InstantPaymentMethods, {
                        paymentMethods: instantPaymentMethods
                    }),
                /*#__PURE__*/ y$1(
                    'ul',
                    {
                        className: paymentMethodListClassnames,
                        role: 'radiogroup',
                        'aria-label': i18n.get('paymentMethodsList.aria.label'),
                        required: true
                    },
                    paymentMethods.map((paymentMethod, index, paymentMethodsCollection) => {
                        const isSelected = activePaymentMethod && activePaymentMethod._id === paymentMethod._id;
                        const isLoaded = paymentMethod._id in cachedPaymentMethods;
                        const isNextOneSelected =
                            activePaymentMethod &&
                            paymentMethodsCollection[index + 1] &&
                            activePaymentMethod._id === paymentMethodsCollection[index + 1]._id;
                        return /*#__PURE__*/ y$1(PaymentMethodItem, {
                            className: classNames({
                                'adyen-checkout__payment-method--next-selected': isNextOneSelected
                            }),
                            standalone: paymentMethods.length === 1,
                            paymentMethod: paymentMethod,
                            isSelected: isSelected,
                            isDisablingPaymentMethod: isSelected && isDisablingPaymentMethod,
                            isLoaded: isLoaded,
                            isLoading: isLoading,
                            onSelect: this.props.onSelect,
                            key: paymentMethod._id,
                            showRemovePaymentMethodButton: this.props.showRemovePaymentMethodButton,
                            onDisableStoredPaymentMethod: this.props.onDisableStoredPaymentMethod
                        });
                    })
                )
            );
        }
    }

    const Success = ({ message }) => {
        const { i18n } = useCoreContext();
        const getImage = useImage();
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__status adyen-checkout__status--success'
            },
            /*#__PURE__*/ y$1(Img, {
                height: '88',
                className: 'adyen-checkout__status__icon',
                src: getImage({
                    extension: 'gif',
                    imageFolder: 'components/'
                })('success'),
                alt: i18n.get(message || 'creditCard.success')
            }),
            /*#__PURE__*/ y$1(
                'span',
                {
                    className: 'adyen-checkout__status__text'
                },
                i18n.get(message || 'creditCard.success')
            )
        );
    };

    const Error$1 = ({ message }) => {
        const { loadingContext, i18n } = useCoreContext();
        const getImage = useImage();
        return /*#__PURE__*/ y$1(
            'div',
            {
                className: 'adyen-checkout__status adyen-checkout__status--error'
            },
            /*#__PURE__*/ y$1(Img, {
                className: 'adyen-checkout__status__icon',
                src: getImage({
                    loadingContext,
                    extension: 'gif',
                    imageFolder: 'components/'
                })('error'),
                alt: i18n.get(message || 'error.message.unknown'),
                height: '88'
            }),
            /*#__PURE__*/ y$1(
                'span',
                {
                    className: 'adyen-checkout__status__text'
                },
                i18n.get(message || 'error.message.unknown')
            )
        );
    };

    var Status = {
        Success,
        Error: Error$1
    };

    /**
     */ function orderStatus(config, order) {
        const options = {
            path: `v1/order/status?clientKey=${config.clientKey}`,
            loadingContext: config.loadingContext
        };
        return httpPost(options, {
            orderData: order.orderData
        });
    }

    class DropinComponent extends k$1 {
        state = {
            elements: [],
            instantPaymentElements: [],
            orderStatus: null,
            isDisabling: false,
            status: {
                type: 'loading',
                props: undefined
            },
            activePaymentMethod: null,
            cachedPaymentMethods: {}
        };
        componentDidMount() {
            this.prepareDropinData();
        }
        prepareDropinData = () => {
            const { order, clientKey, loadingContext } = this.props;
            const [storedElementsPromises, elementsPromises, instantPaymentsPromises] = this.props.onCreateElements();
            const orderStatusPromise = order
                ? orderStatus(
                      {
                          clientKey,
                          loadingContext
                      },
                      order
                  )
                : null;
            Promise.all([storedElementsPromises, elementsPromises, instantPaymentsPromises, orderStatusPromise]).then(
                ([storedElements, elements, instantPaymentElements, orderStatus]) => {
                    this.setState({
                        instantPaymentElements,
                        elements: [...storedElements, ...elements],
                        orderStatus
                    });
                    this.setStatus('ready');
                    if (this.props.modules.analytics) {
                        this.props.modules.analytics.send({
                            containerWidth: this.base && this.base.offsetWidth,
                            paymentMethods: elements.map(e => e.props.type),
                            component: 'dropin',
                            flavor: 'dropin'
                        });
                    }
                }
            );
            this.onOrderCancel = this.getOnOrderCancel();
        };
        setStatus = (status, props = {}) => {
            this.setState({
                status: {
                    type: status,
                    props
                }
            });
        };
        setActivePaymentMethod = paymentMethod => {
            this.setState(prevState => ({
                activePaymentMethod: paymentMethod,
                cachedPaymentMethods: {
                    ...prevState.cachedPaymentMethods,
                    [paymentMethod._id]: true
                }
            }));
        };
        componentDidUpdate(prevProps, prevState) {
            if (prevState.status.type !== this.state.status.type && this.state.activePaymentMethod) {
                this.state.activePaymentMethod.setStatus(this.state.status.type);
            }
            if (this.state.status.type === 'ready' && prevState.status.type !== 'ready' && this.props.onReady) {
                this.props.onReady();
            }
        }
        handleOnSelectPaymentMethod = paymentMethod => {
            const { activePaymentMethod } = this.state;
            this.setActivePaymentMethod(paymentMethod);
            // onSelect event
            if ((activePaymentMethod && activePaymentMethod._id !== paymentMethod._id) || !activePaymentMethod) {
                this.props.onSelect(paymentMethod);
            }
        };
        handleDisableStoredPaymentMethod = storedPaymentMethod => {
            this.setState({
                isDisabling: true
            });
            new Promise((resolve, reject) =>
                this.props.onDisableStoredPaymentMethod(storedPaymentMethod.props.storedPaymentMethodId, resolve, reject)
            )
                .then(() => {
                    this.setState(prevState => ({
                        elements: prevState.elements.filter(pm => pm._id !== storedPaymentMethod._id)
                    }));
                    this.setState({
                        isDisabling: false
                    });
                })
                .catch(() => {
                    this.setState({
                        isDisabling: false
                    });
                });
        };
        closeActivePaymentMethod() {
            this.setState({
                activePaymentMethod: null
            });
        }
        /**
         * getOnOrderCancel decides which onOrderCancel logic should be used, manual or sessions
         */ getOnOrderCancel = () => {
            if (this.props.onOrderCancel) {
                return data => {
                    this.props.onOrderCancel(data);
                };
            }
            if (this.props.session) {
                return data =>
                    this.props.session
                        .cancelOrder(data)
                        .then(() =>
                            this.props.core.update({
                                order: null
                            })
                        )
                        .catch(error => this.setStatus(error?.message || 'error'));
            }
            return null;
        };
        onOrderCancel;
        render(props, { elements, instantPaymentElements, status, activePaymentMethod, cachedPaymentMethods }) {
            const isLoading = status.type === 'loading';
            const isRedirecting = status.type === 'redirect';
            switch (status.type) {
                case 'success':
                    return /*#__PURE__*/ y$1(Status.Success, {
                        message: status.props?.message
                    });
                case 'error':
                    return /*#__PURE__*/ y$1(Status.Error, {
                        message: status.props?.message
                    });
                case 'custom':
                    return status.props?.component?.render();
                default:
                    return /*#__PURE__*/ y$1(
                        'div',
                        {
                            className: `adyen-checkout__dropin adyen-checkout__dropin--${status.type}`
                        },
                        isRedirecting && status.props.component && status.props.component.render(),
                        isLoading && status.props && status.props.component && status.props.component.render(),
                        elements &&
                            !!elements.length &&
                            /*#__PURE__*/ y$1(PaymentMethodList, {
                                isLoading: isLoading || isRedirecting,
                                isDisablingPaymentMethod: this.state.isDisabling,
                                paymentMethods: elements,
                                instantPaymentMethods: instantPaymentElements,
                                activePaymentMethod: activePaymentMethod,
                                cachedPaymentMethods: cachedPaymentMethods,
                                order: this.props.order,
                                orderStatus: this.state.orderStatus,
                                onOrderCancel: this.onOrderCancel,
                                onSelect: this.handleOnSelectPaymentMethod,
                                openFirstPaymentMethod: this.props.openFirstPaymentMethod,
                                openFirstStoredPaymentMethod: this.props.openFirstStoredPaymentMethod,
                                onDisableStoredPaymentMethod: this.handleDisableStoredPaymentMethod,
                                showRemovePaymentMethodButton: this.props.showRemovePaymentMethodButton
                            })
                    );
            }
        }
    }

    function getCommonProps(props) {
        return {
            beforeSubmit: props.beforeSubmit,
            onSubmit: props.onSubmit,
            elementRef: props.elementRef,
            showPayButton: props.showPayButton,
            isDropin: true
        };
    }

    const UNSUPPORTED_PAYMENT_METHODS = ['androidpay', 'samsungpay', 'clicktopay'];
    // filter payment methods that we don't support in the Drop-in
    const filterUnsupported = paymentMethod => !UNSUPPORTED_PAYMENT_METHODS.includes(paymentMethod.constructor['type']);
    // filter payment methods that we support (that are in the paymentMethods/index dictionary)
    const filterPresent = paymentMethod => !!paymentMethod;
    // filter payment methods that are available to the user
    const filterAvailable = paymentMethod => {
        if (paymentMethod.isAvailable) {
            const timeout = new Promise((resolve, reject) => setTimeout(reject, 5000));
            return Promise.race([paymentMethod.isAvailable(), timeout]);
        }
        return Promise.resolve(!!paymentMethod);
    };

    /**
     * Filter properties in a global configuration object from an allow list (GENERIC_OPTIONS)
     * @param globalOptions -
     * @returns any
     */ function processGlobalOptions(globalOptions) {
        return Object.keys(globalOptions).reduce((r, e) => {
            if (GENERIC_OPTIONS.includes(e)) r[e] = globalOptions[e];
            return r;
        }, {});
    }
    const getComponentConfiguration = (type, paymentMethodsConfiguration = {}, isStoredCard = false) => {
        let pmType = type;
        if (type === 'scheme') {
            pmType = isStoredCard ? 'storedCard' : 'card';
        }
        return paymentMethodsConfiguration[pmType] || {};
    };

    //
    // /**
    //  * Returns a filtered (available) list of component Elements
    //  * @param components - Array of PaymentMethod objects from the /paymentMethods response
    //  * @param props - High level props to be passed through to every component (as defined in utils/getCommonProps)
    //  * @param create - Reference to the main instance `Core#create` method
    //  */
    const createElements = (paymentMethods, paymentMethodsConfiguration, commonProps, core) => {
        const elements = paymentMethods
            .map(paymentMethod => {
                const paymentMethodConfigurationProps = getComponentConfiguration(
                    paymentMethod.type,
                    paymentMethodsConfiguration,
                    paymentMethod.storedPaymentMethodId
                );
                const PaymentMethodElement = core.getComponent(paymentMethod.type);
                if (!PaymentMethodElement) {
                    console.warn(
                        `The component of '${paymentMethod.type}' is unavailable. Make sure to register its Class before creating the Drop-in.`
                    );
                    return null;
                }
                const elementProps = {
                    core,
                    ...paymentMethod,
                    ...commonProps,
                    ...paymentMethodConfigurationProps
                };
                // core.updatePaymentMethodsConfiguration({ [paymentMethod.type]: paymentMethodConfigurationProps });
                return new PaymentMethodElement(elementProps);
            })
            .filter(filterPresent)
            .filter(filterUnsupported);
        // filter available elements
        const elementPromises = elements.map(filterAvailable).map(p => p.catch(e => e));
        return Promise.all(elementPromises).then(values => elements.filter((el, i) => values[i] === true));
    };

    // /**
    //  *  Returns a filtered (available) list of oneClick paymentMethod Elements
    //  * @param paymentMethods -
    //  * @param props - Props to be passed through to every paymentMethod
    //  * @param create - Reference to the main instance `create` method
    //  */
    const createStoredElements = (paymentMethods = [], paymentMethodsConfiguration, props, core) =>
        createElements(
            paymentMethods,
            paymentMethodsConfiguration,
            {
                ...props,
                oneClick: true
            },
            core
        );

    // /**
    //  *  Returns a filtered (available) list of InstantPaymentMethods Elements
    //  * @param paymentMethods - Instant payment methods
    //  * @param props - Props to be passed through to every paymentMethod
    //  * @param create - Reference to the main instance `Core#create` method
    //  */
    const createInstantPaymentElements = (instantPaymentMethods = [], paymentMethodsConfiguration, props, core) => {
        if (instantPaymentMethods.length) {
            return createElements(
                instantPaymentMethods,
                paymentMethodsConfiguration,
                {
                    ...props,
                    isInstantPayment: true,
                    showPayButton: true
                },
                core
            );
        }
        return [];
    };

    const SUPPORTED_INSTANT_PAYMENTS = ['paywithgoogle', 'googlepay', 'applepay'];
    function splitPaymentMethods(paymentMethodsResponse, instantPaymentTypes) {
        const { storedPaymentMethods, paymentMethods } = paymentMethodsResponse;
        return {
            instantPaymentMethods: paymentMethods.filter(({ type }) => instantPaymentTypes.includes(type)),
            paymentMethods: paymentMethods.filter(({ type }) => !instantPaymentTypes.includes(type)),
            storedPaymentMethods
        };
    }
    class DropinElement extends UIElement {
        static type = 'dropin';
        static defaultProps = defaultProps;
        dropinRef = null;
        /**
         * Reference to the component created from `handleAction` (Ex.: ThreeDS2Challenge)
         */ componentFromAction;
        constructor(props) {
            super(props);
            this.submit = this.submit.bind(this);
            this.handleAction = this.handleAction.bind(this);
        }
        storeElementRefOnCore() {
            this.core.storeElementReference(this);
        }
        updatePaymentMethodsConfiguration(props) {
            this.core.updatePaymentMethodsConfiguration(props.paymentMethodsConfiguration);
        }
        formatProps(props) {
            return {
                ...super.formatProps(props),
                instantPaymentTypes: Array.from(new Set(props.instantPaymentTypes)).filter(value => SUPPORTED_INSTANT_PAYMENTS.includes(value))
            };
        }
        get isValid() {
            return !!this.dropinRef && !!this.dropinRef.state.activePaymentMethod && !!this.dropinRef.state.activePaymentMethod.isValid;
        }
        showValidation() {
            if (this.dropinRef.state.activePaymentMethod) {
                this.dropinRef.state.activePaymentMethod.showValidation();
            }
            return this;
        }
        setStatus(status, props = {}) {
            this.dropinRef?.setStatus(status, props);
            return this;
        }
        get activePaymentMethod() {
            if (!this.dropinRef?.state && !this.dropinRef?.state.activePaymentMethod) {
                return null;
            }
            return this.dropinRef.state.activePaymentMethod;
        }
        get data() {
            if (!this.activePaymentMethod) {
                return null;
            }
            return this.dropinRef.state.activePaymentMethod.data;
        }
        /**
         * Calls the onSubmit event with the state of the activePaymentMethod
         */ submit() {
            if (!this.activePaymentMethod) {
                throw new Error('No active payment method.');
            }
            this.activePaymentMethod.submit();
        }
        /**
         * Creates the Drop-in elements
         */ handleCreate = () => {
            const { paymentMethodsConfiguration, showStoredPaymentMethods, showPaymentMethods, instantPaymentTypes } = this.props;
            const { paymentMethods, storedPaymentMethods, instantPaymentMethods } = splitPaymentMethods(
                this.core.paymentMethodsResponse,
                instantPaymentTypes
            );
            const commonProps = getCommonProps({
                ...this.props,
                elementRef: this.elementRef
            });
            const storedElements = showStoredPaymentMethods
                ? createStoredElements(storedPaymentMethods, paymentMethodsConfiguration, commonProps, this.core)
                : [];
            const elements = showPaymentMethods ? createElements(paymentMethods, paymentMethodsConfiguration, commonProps, this.core) : [];
            const instantPaymentElements = createInstantPaymentElements(instantPaymentMethods, paymentMethodsConfiguration, commonProps, this.core);
            return [storedElements, elements, instantPaymentElements];
        };
        handleAction(action, props = {}) {
            if (!action || !action.type) {
                if (hasOwnProperty(action, 'action') && hasOwnProperty(action, 'resultCode')) {
                    throw new Error(
                        'handleAction::Invalid Action - the passed action object itself has an "action" property and ' +
                            'a "resultCode": have you passed in the whole response object by mistake?'
                    );
                }
                throw new Error('handleAction::Invalid Action - the passed action object does not have a "type" property');
            }
            if (action.type !== 'redirect' && this.activePaymentMethod?.updateWithAction) {
                return this.activePaymentMethod.updateWithAction(action);
            }
            if (this.elementRef instanceof DropinElement) {
                props = {
                    ...this.elementRef.activePaymentMethod?.props,
                    ...props
                };
            }
            const paymentAction = this.core.createFromAction(action, {
                ...props,
                elementRef: this.elementRef,
                onAdditionalDetails: this.handleAdditionalDetails,
                isDropin: true
            });
            if (paymentAction) {
                this.setStatus(paymentAction.props.statusType, {
                    component: paymentAction
                });
                this.componentFromAction = paymentAction;
                return this;
            }
            return null;
        }
        /**
         * handleOrder is implemented so we don't trigger a callback like in the components
         * @param response - PaymentResponse
         */ handleOrder = ({ order }) => {
            this.updateParent({
                order
            });
        };
        closeActivePaymentMethod() {
            this.dropinRef.closeActivePaymentMethod();
        }
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(DropinComponent, {
                    ...this.props,
                    onChange: this.setState,
                    elementRef: this.elementRef,
                    onCreateElements: this.handleCreate,
                    ref: dropinRef => {
                        this.dropinRef = dropinRef;
                    }
                })
            );
        }
    }

    class PersonalDetailsElement extends UIElement {
        static type = 'personal_details';
        get data() {
            return this.state.data;
        }
        get isValid() {
            return !!this.state.isValid;
        }
        render() {
            return /*#__PURE__*/ y$1(
                CoreProvider,
                {
                    i18n: this.props.i18n,
                    loadingContext: this.props.loadingContext,
                    resources: this.resources
                },
                /*#__PURE__*/ y$1(PersonalDetails, {
                    setComponentRef: this.setComponentRef,
                    ...this.props,
                    onChange: this.setState,
                    ...{
                        payButton: this.payButton
                    }
                })
            );
        }
    }

    var elements = /*#__PURE__*/ Object.freeze({
        __proto__: null,
        Ach: AchElement,
        Address: AddressElement,
        Affirm: Affirm,
        AfterPay: AfterPay,
        AfterPayB2B: AfterPayB2B,
        AmazonPay: AmazonPayElement,
        ApplePay: ApplePayElement,
        Atome: Atome,
        BacsDirectDebit: BacsElement,
        Bancontact: BancontactElement,
        BankTransfer: BankTransferElement,
        BcmcMobile: BCMCMobileElement,
        BillDeskOnline: BillDeskOnlineElement,
        BillDeskWallet: BillDeskWalletElement,
        Blik: BlikElement,
        Boleto: BoletoElement,
        Card: CardElement,
        CashAppPay: CashAppPay,
        ClickToPay: ClickToPayElement,
        Doku: DokuElement,
        Donation: DonationElement,
        Dotpay: DotpayElement,
        Dragonpay: DragonpayElement,
        Dropin: DropinElement,
        DuitNow: DuitNowElement,
        EPS: EPSElement,
        Econtext: EcontextElement,
        Entercash: EntercashElement,
        FacilPay10x: FacilyPay10x,
        FacilPay12x: FacilyPay12x,
        FacilPay3x: FacilyPay3x,
        FacilPay4x: FacilyPay4x,
        FacilPay6x: FacilyPay6x,
        Giftcard: GiftcardElement,
        Giropay: GiropayElement,
        GooglePay: GooglePay,
        Ideal: IdealElement,
        Klarna: KlarnaPayments,
        MBWay: MBWayElement,
        MealVoucherFR: MealVoucherFRElement,
        MolPayEBankingMY: MolPayEBankingMYElement,
        MolPayEBankingTH: MolPayEBankingTHElement,
        MolPayEBankingVN: MolPayEbankingVNElement,
        Multibanco: MultibancoElement,
        OnlineBankingCZ: OnlineBankingCZElement,
        OnlineBankingIN: OnlineBankingINElement,
        OnlineBankingPL: OnlineBankingPL,
        OnlineBankingSK: OnlineBankingSKElement,
        Oxxo: OxxoElement,
        PayByBank: PayByBank,
        PayNow: PayNowElement,
        PayPal: PaypalElement,
        PayuCashcard: PayuNetCashcardElement,
        PayuNetBanking: PayuNetBankingElement,
        PersonalDetails: PersonalDetailsElement,
        Pix: PixElement,
        PromptPay: PromptPayElement,
        QiwiWallet: QiwiWalletElement,
        RatePay: RatePay,
        RatePayDirectDebit: RatePayDirectDebit,
        Redirect: RedirectElement,
        SecuredFields: SecuredFieldsElement,
        SepaDirectDebit: SepaElement,
        Swish: SwishElement,
        ThreeDS2Challenge: ThreeDS2Challenge,
        ThreeDS2DeviceFingerprint: ThreeDS2DeviceFingerprint,
        Twint: TwintElement,
        UPI: UPI,
        Vipps: VippsElement,
        WalletIN: WalletINElement,
        WeChat: WeChatPayElement
    });

    const RISK_DATA_VERSION = '1.0.0';
    const DF_VERSION = '1.0.0';
    const DEVICE_FINGERPRINT = 'deviceFingerprint';
    const DF_TIMEOUT = 20000;
    const FAILED_DFP_RESOLVE_OBJECT_TIMEOUT = {
        result: {
            type: DEVICE_FINGERPRINT,
            value: 'df-timedOut'
        },
        errorCode: 'timeout'
    };
    const ERRORS = {
        TIME_OUT: 'timeout',
        WRONG_ORIGIN: 'wrongOrigin',
        WRONG_DATA_TYPE: 'wrongDataType',
        MISSING_PROPERTY: 'missingProperty',
        UNKNOWN: 'unknownError'
    };
    const ERROR_MESSAGES = {
        timeout: 'iframe loading timed out',
        wrongOrigin: 'Result did not come from the expected origin',
        wrongDataType: 'Result data was not of the expected type',
        missingProperty: 'Result data did not contain the expected properties',
        unknownError: 'An unknown error occurred'
    };

    const iframeName = 'dfIframe';
    const allowProperties = 'geolocation; microphone; camera;';
    class GetDeviceFingerprint extends k$1 {
        postMessageDomain;
        processMessageHandler;
        deviceFingerPrintPromise;
        constructor(props) {
            super(props);
            this.postMessageDomain = getOrigin(this.props.loadingContext) || this.props.loadingContext;
        }
        getDfpPromise() {
            return new Promise((resolve, reject) => {
                /**
                 * Listen for postMessage responses from the notification url
                 */ this.processMessageHandler = getProcessMessageHandler(this.postMessageDomain, resolve, reject, DEVICE_FINGERPRINT);
                /* eslint-disable-next-line */ window.addEventListener('message', this.processMessageHandler);
            });
        }
        componentDidMount() {
            // Get device fingerprint
            this.deviceFingerPrintPromise = promiseTimeout(DF_TIMEOUT, this.getDfpPromise(), FAILED_DFP_RESOLVE_OBJECT_TIMEOUT);
            this.deviceFingerPrintPromise.promise
                .then(resolveObject => {
                    this.props.onCompleteFingerprint(resolveObject);
                    window.removeEventListener('message', this.processMessageHandler);
                })
                .catch(rejectObject => {
                    this.props.onErrorFingerprint(rejectObject);
                    window.removeEventListener('message', this.processMessageHandler);
                });
        }
        render({ dfpURL }) {
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: 'adyen-checkout-risk__device-fingerprint'
                },
                /*#__PURE__*/ y$1(Iframe, {
                    name: iframeName,
                    src: dfpURL,
                    allow: allowProperties,
                    title: 'devicefingerprinting iframe'
                })
            );
        }
    }

    const handleErrorCode = errorCode => ({
        errorCode,
        message: ERROR_MESSAGES[errorCode] || ERROR_MESSAGES[ERRORS.UNKNOWN],
        type: DEVICE_FINGERPRINT
    });

    class DeviceFingerprint extends k$1 {
        constructor(props) {
            super(props);
            if (props.clientKey) {
                this.state = {
                    status: 'retrievingFingerPrint',
                    dfpURL: `${this.props.loadingContext}assets/html/${props.clientKey}/dfp.${DF_VERSION}.html`
                };
            }
        }
        static defaultProps = {
            onComplete: () => {},
            onError: () => {}
        };
        setStatusComplete(fingerprintResult) {
            this.setState(
                {
                    status: 'complete'
                },
                () => {
                    this.props.onComplete(fingerprintResult);
                }
            );
        }
        render({ loadingContext }, { dfpURL }) {
            if (this.state.status === 'retrievingFingerPrint') {
                return /*#__PURE__*/ y$1(
                    'div',
                    {
                        className: 'adyen-checkout-risk__device-fingerprint--wrapper',
                        style: {
                            position: 'absolute',
                            width: 0,
                            height: 0
                        }
                    },
                    /*#__PURE__*/ y$1(GetDeviceFingerprint, {
                        loadingContext: loadingContext,
                        dfpURL: dfpURL,
                        onCompleteFingerprint: fingerprintResult => {
                            this.setStatusComplete(fingerprintResult);
                        },
                        onErrorFingerprint: fingerprintError => {
                            this.props.onError(handleErrorCode(fingerprintError.errorCode));
                            this.setStatusComplete(fingerprintError.result);
                        }
                    })
                );
            }
            return null;
        }
    }

    class RiskElement extends BaseElement {
        static type = 'risk';
        static defaultProps = {
            risk: {
                enabled: true,
                onComplete: () => {},
                onError: () => {},
                node: 'body'
            }
        };
        nodeRiskContainer = null;
        constructor(props) {
            super(props);
            // Populate state with null values
            const riskElements = {
                [DEVICE_FINGERPRINT]: null
            };
            this.setState({
                data: riskElements
            });
            if (this.props.risk.enabled === true) {
                if (document.querySelector(this.props.risk.node)) {
                    this.nodeRiskContainer = document.createElement('div');
                    document.querySelector(this.props.risk.node).appendChild(this.nodeRiskContainer);
                    this.mount(this.nodeRiskContainer);
                } else {
                    this.onError({
                        message: 'RiskModule node was not found'
                    });
                }
            }
        }
        formatProps(props) {
            return {
                ...props,
                risk: {
                    ...RiskElement.defaultProps.risk,
                    ...props.risk
                }
            };
        }
        onComplete = result => {
            const data = {
                ...this.state.data,
                [result.type]: result.value,
                persistentCookie: result.persistentCookie,
                components: result.components
            };
            this.setState({
                data,
                isValid: true
            });
            this.props.risk.onComplete(this.data);
            this.cleanUp();
        };
        onError = error => {
            this.props.risk.onError(error);
            this.cleanUp();
        };
        get isValid() {
            return this.state.isValid;
        }
        get data() {
            if (this.isValid) {
                const dataObj = {
                    version: RISK_DATA_VERSION,
                    ...this.state.data
                };
                return base64.encode(JSON.stringify(dataObj));
            }
            return false;
        }
        cleanUp = () => {
            if (this.nodeRiskContainer && this.nodeRiskContainer.parentNode) this.nodeRiskContainer.parentNode.removeChild(this.nodeRiskContainer);
        };
        componentWillUnmount() {
            this.cleanUp();
        }
        render() {
            return /*#__PURE__*/ y$1(DeviceFingerprint, {
                ...this.props,
                loadingContext: this.props.loadingContext,
                onComplete: this.onComplete,
                onError: this.onError
            });
        }
    }

    function filterAllowedPaymentMethods(pm) {
        return !this.length || this.indexOf(pm.type) > -1;
    }
    function filterRemovedPaymentMethods(pm) {
        return !this.length || this.indexOf(pm.type) < 0;
    }
    function filterEcomStoredPaymentMethods(pm) {
        return !!pm && !!pm.supportedShopperInteractions && pm.supportedShopperInteractions.includes('Ecommerce');
    }
    const supportedStoredPaymentMethods = ['scheme', 'blik', 'twint', 'ach', 'cashapp'];
    function filterSupportedStoredPaymentMethods(pm) {
        return !!pm && !!pm.type && supportedStoredPaymentMethods.includes(pm.type);
    }

    const processStoredPaymentMethod = pm => ({
        ...pm,
        storedPaymentMethodId: pm.id
    });
    const processPaymentMethods = (paymentMethods, { allowPaymentMethods = [], removePaymentMethods = [] }) => {
        if (!paymentMethods) return [];
        return paymentMethods.filter(filterAllowedPaymentMethods, allowPaymentMethods).filter(filterRemovedPaymentMethods, removePaymentMethods);
    };
    const processStoredPaymentMethods = (storedPaymentMethods, { allowPaymentMethods = [], removePaymentMethods = [] }) => {
        if (!storedPaymentMethods) return [];
        return storedPaymentMethods
            .filter(filterSupportedStoredPaymentMethods) // only display supported stored payment methods
            .filter(filterAllowedPaymentMethods, allowPaymentMethods)
            .filter(filterRemovedPaymentMethods, removePaymentMethods)
            .filter(filterEcomStoredPaymentMethods) // Only accept Ecommerce shopper interactions
            .map(processStoredPaymentMethod);
    };
    const checkPaymentMethodsResponse = paymentMethodsResponse => {
        if (typeof paymentMethodsResponse === 'string') {
            throw new Error(
                'paymentMethodsResponse was provided but of an incorrect type (should be an object but a string was provided).' +
                    'Try JSON.parse("{...}") your paymentMethodsResponse.'
            );
        }
        if (paymentMethodsResponse instanceof Array) {
            throw new Error(
                'paymentMethodsResponse was provided but of an incorrect type (should be an object but an array was provided).' +
                    'Please check you are passing the whole response.'
            );
        }
        if (paymentMethodsResponse && !paymentMethodsResponse?.paymentMethods?.length && !paymentMethodsResponse?.storedPaymentMethods?.length) {
            console.warn('paymentMethodsResponse was provided but no payment methods were found.');
        }
    };

    class PaymentMethodsResponse {
        paymentMethods = [];
        storedPaymentMethods = [];
        constructor(response, options = {}) {
            checkPaymentMethodsResponse(response);
            this.paymentMethods = response ? processPaymentMethods(response.paymentMethods, options) : [];
            this.storedPaymentMethods = response ? processStoredPaymentMethods(response.storedPaymentMethods, options) : [];
        }
        mapCreatedComponentType(pmType) {
            // Components created as 'card' need to be matched with paymentMethod response objects with type 'scheme'
            return pmType === 'card' ? 'scheme' : pmType;
        }
        has(paymentMethod) {
            return Boolean(this.paymentMethods.find(pm => pm.type === this.mapCreatedComponentType(paymentMethod)));
        }
        find(paymentMethod) {
            return this.paymentMethods.find(pm => pm.type === this.mapCreatedComponentType(paymentMethod));
        }
    }

    const createComponent = (core, registry, componentType, props) => {
        const Element = registry.getComponent(componentType);
        if (!Element) {
            console.warn(`Action Element of type '${componentType}' not found in the registry`);
            return;
        }
        return new Element({
            core,
            ...props,
            id: `${componentType}-${uuidv4()}`
        });
    };
    const getActionHandler = statusType => {
        return (core, registry, action, props) => {
            const config = {
                ...props,
                ...action,
                onComplete: props.onAdditionalDetails,
                onError: props.onError,
                statusType
            };
            return createComponent(core, registry, action.paymentMethodType, config);
        };
    };
    const actionTypes = {
        redirect: (core, registry, action, props) => {
            const config = {
                ...props,
                ...action,
                statusType: 'redirect'
            };
            return createComponent(core, registry, 'redirect', config);
        },
        threeDS2Fingerprint: (core, registry, action, props) => {
            const config = {
                createFromAction: props.createFromAction,
                token: action.token,
                paymentData: action.paymentData,
                onError: props.onError,
                showSpinner: !props.isDropin,
                isDropin: !!props.isDropin,
                ...props,
                type: 'IdentifyShopper',
                onComplete: props.onAdditionalDetails,
                statusType: 'loading',
                useOriginalFlow: true
            };
            return createComponent(core, registry, 'threeDS2DeviceFingerprint', config);
        },
        threeDS2Challenge: (core, registry, action, props) => {
            const config = {
                ...props,
                token: action.token,
                paymentData: action.paymentData,
                onComplete: props.onAdditionalDetails,
                onError: props.onError,
                size: props.size ?? '02',
                isDropin: !!props.isDropin,
                type: 'ChallengeShopper',
                statusType: 'custom',
                useOriginalFlow: true
            };
            return createComponent(core, registry, 'threeDS2Challenge', config);
        },
        threeDS2: (core, registry, action, props) => {
            const componentType = action.subtype === 'fingerprint' ? 'threeDS2DeviceFingerprint' : 'threeDS2Challenge';
            const paymentData = action.subtype === 'fingerprint' ? action.paymentData : action.authorisationToken;
            const config = {
                // Props common to both flows
                token: action.token,
                paymentData,
                onActionHandled: props.onActionHandled,
                onComplete: props.onAdditionalDetails,
                onError: props.onError,
                isDropin: !!props.isDropin,
                loadingContext: props.loadingContext,
                clientKey: props.clientKey,
                core: props.core,
                paymentMethodType: props.paymentMethodType,
                challengeWindowSize: props.challengeWindowSize,
                // Props unique to a particular flow
                ...get3DS2FlowProps(action.subtype, props)
            };
            return createComponent(core, registry, componentType, config);
        },
        voucher: getActionHandler('custom'),
        qrCode: getActionHandler('custom'),
        await: getActionHandler('custom'),
        bankTransfer: getActionHandler('custom'),
        sdk: getActionHandler('custom')
    };

    function getComponentForAction(core, registry, action, props = {}) {
        const nextAction = actionTypes[action.type];
        if (nextAction && typeof nextAction === 'function') {
            return nextAction(core, registry, action, props);
        }
        throw new Error('Invalid Action');
    }

    /**
     * Log event to Adyen
     * @param config - ready to be serialized and included in the request
     * @returns A log event function
     */ const logEvent = config => event => {
        const params = {
            version: '5.46.0',
            payload_version: 1,
            platform: 'web',
            locale: config.locale,
            ...event
        };
        const queryString = Object.keys(params)
            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)
            .join('&');
        new Image().src = `${config.loadingContext}images/analytics.png?${queryString}`;
    };

    /**
     * Log event to Adyen
     * @param config -
     */ const logTelemetry = config => event => {
        if (!config.clientKey) {
            return Promise.reject();
        }
        const options = {
            errorLevel: 'silent',
            loadingContext: config.loadingContext,
            path: `v2/analytics/log?clientKey=${config.clientKey}`
        };
        const telemetryEvent = {
            amount: {
                value: config.amount?.value || 0,
                currency: config.amount?.currency
            },
            version: '5.46.0',
            channel: 'Web',
            locale: config.locale,
            flavor: 'components',
            userAgent: navigator.userAgent,
            referrer: window.location.href,
            screenWidth: window.screen.width,
            ...event
        };
        return httpPost(options, telemetryEvent);
    };

    class NonPersistentStorage {
        storage;
        constructor() {
            this.storage = {};
        }
        get length() {
            return Object.keys(this.storage).length;
        }
        key(keyName) {
            return Object.keys(this.storage).indexOf(keyName);
        }
        getItem(keyName) {
            return this.storage[keyName] || null;
        }
        setItem(keyName, keyValue) {
            return (this.storage[keyName] = keyValue);
        }
        removeItem(keyName) {
            delete this.storage[keyName];
        }
        clear() {
            this.storage = {};
        }
    }
    class Storage {
        prefix = 'adyen-checkout__';
        key;
        storage;
        constructor(key, storageType) {
            try {
                this.storage = storageType ? window[storageType] : window.localStorage;
            } catch (e) {
                this.storage = new NonPersistentStorage();
            }
            this.key = this.prefix + key;
        }
        get() {
            try {
                return JSON.parse(this.storage.getItem(this.key));
            } catch (err) {
                return null;
            }
        }
        set(value) {
            this.storage.setItem(this.key, JSON.stringify(value));
        }
        remove() {
            this.storage.removeItem(this.key);
        }
    }

    /**
     * If the checkout attempt ID was stored more than fifteen minutes ago, then we should request a new ID.
     * More here: COWEB-1099
     */ function confirmSessionDurationIsMaxFifteenMinutes(checkoutAttemptIdSession) {
        if (!checkoutAttemptIdSession?.id) return false;
        const fifteenMinInMs = 1000 * 60 * 15;
        const fifteenMinAgoTimestamp = Date.now() - fifteenMinInMs;
        return checkoutAttemptIdSession.timestamp > fifteenMinAgoTimestamp;
    }
    /**
     * Log event to Adyen
     * @param config - ready to be serialized and included in the body of request
     * @returns a function returning a promise containing the response of the call
     */ const collectId = ({ loadingContext, clientKey, experiments }) => {
        let promise;
        const options = {
            errorLevel: 'silent',
            loadingContext: loadingContext,
            path: `v2/analytics/id?clientKey=${clientKey}`
        };
        return () => {
            if (promise) return promise;
            if (!clientKey) return Promise.reject();
            const storage = new Storage('checkout-attempt-id', 'sessionStorage');
            const checkoutAttemptIdSession = storage.get();
            if (confirmSessionDurationIsMaxFifteenMinutes(checkoutAttemptIdSession)) {
                return Promise.resolve(checkoutAttemptIdSession.id);
            }
            promise = httpPost(options, {
                experiments
            })
                .then(conversion => {
                    if (conversion.id) {
                        storage.set({
                            id: conversion.id,
                            timestamp: Date.now()
                        });
                        return conversion.id;
                    }
                    return undefined;
                })
                .catch(() => {});
            return promise;
        };
    };

    class EventsQueue {
        events = [];
        add(event) {
            this.events.push(event);
        }
        run(checkoutAttemptId) {
            const promises = this.events.map(e => e(checkoutAttemptId));
            this.events = [];
            return Promise.all(promises);
        }
    }

    class Analytics {
        static defaultProps = {
            enabled: true,
            telemetry: true,
            checkoutAttemptId: null,
            experiments: []
        };
        checkoutAttemptId = null;
        props;
        logEvent;
        logTelemetry;
        queue = new EventsQueue();
        collectId;
        constructor({ loadingContext, locale, clientKey, analytics, amount }) {
            this.props = {
                ...Analytics.defaultProps,
                ...analytics
            };
            this.logEvent = logEvent({
                loadingContext,
                locale
            });
            this.logTelemetry = logTelemetry({
                loadingContext,
                locale,
                clientKey,
                amount
            });
            this.collectId = collectId({
                loadingContext,
                clientKey,
                experiments: this.props.experiments
            });
            const { telemetry, enabled } = this.props;
            if (telemetry === true && enabled === true) {
                if (this.props.checkoutAttemptId) {
                    // handle prefilled checkoutAttemptId
                    this.checkoutAttemptId = this.props.checkoutAttemptId;
                    this.queue.run(this.checkoutAttemptId);
                }
            }
        }
        send(event) {
            const { enabled, payload, telemetry } = this.props;
            if (enabled === true) {
                if (telemetry === true && !this.checkoutAttemptId) {
                    // fetch a new checkoutAttemptId if none is already available
                    this.collectId()
                        .then(checkoutAttemptId => {
                            this.checkoutAttemptId = checkoutAttemptId;
                            this.queue.run(this.checkoutAttemptId);
                        })
                        .catch(e => {
                            console.warn(`Fetching checkoutAttemptId failed.${e ? ` Error=${e}` : ''}`);
                        });
                }
                if (telemetry === true) {
                    const telemetryTask = checkoutAttemptId =>
                        this.logTelemetry({
                            ...event,
                            ...(payload && {
                                ...payload
                            }),
                            checkoutAttemptId
                        }).catch(() => {});
                    this.queue.add(telemetryTask);
                    if (this.checkoutAttemptId) {
                        this.queue.run(this.checkoutAttemptId);
                    }
                }
                // Log pixel
                this.logEvent(event);
            }
        }
    }

    const API_VERSION = 'v1';

    /**
     */ function makePayment(paymentRequest, session) {
        const path = `${API_VERSION}/sessions/${session.id}/payments?clientKey=${session.clientKey}`;
        const data = {
            sessionData: session.data,
            ...paymentRequest
        };
        return httpPost(
            {
                loadingContext: session.loadingContext,
                path,
                errorLevel: 'fatal'
            },
            data
        );
    }

    /**
     */ function submitDetails(details, session) {
        const path = `${API_VERSION}/sessions/${session.id}/paymentDetails?clientKey=${session.clientKey}`;
        const data = {
            sessionData: session.data,
            ...details
        };
        return httpPost(
            {
                loadingContext: session.loadingContext,
                path,
                errorLevel: 'fatal'
            },
            data
        );
    }

    /**
     */ function setupSession(session, options) {
        const path = `${API_VERSION}/sessions/${session.id}/setup?clientKey=${session.clientKey}`;
        const data = {
            sessionData: session.data,
            ...(options.order
                ? {
                      order: {
                          orderData: options.order.orderData,
                          pspReference: options.order.pspReference
                      }
                  }
                : {})
        };
        return httpPost(
            {
                loadingContext: session.loadingContext,
                path,
                errorLevel: 'fatal',
                errorMessage: 'ERROR: Invalid ClientKey'
            },
            data
        );
    }

    /**
     */ function checkBalance(paymentRequest, session) {
        const path = `${API_VERSION}/sessions/${session.id}/paymentMethodBalance?clientKey=${session.clientKey}`;
        const data = {
            sessionData: session.data,
            ...paymentRequest
        };
        return httpPost(
            {
                loadingContext: session.loadingContext,
                path,
                errorLevel: 'fatal'
            },
            data
        );
    }

    /**
     */ function createOrder(session) {
        const path = `${API_VERSION}/sessions/${session.id}/orders?clientKey=${session.clientKey}`;
        const data = {
            sessionData: session.data
        };
        return httpPost(
            {
                loadingContext: session.loadingContext,
                path,
                errorLevel: 'fatal'
            },
            data
        );
    }

    function sanitizeSession(session) {
        if (!session || !session.id) throw new Error('Invalid session');
        return {
            id: session.id,
            ...(session.sessionData
                ? {
                      sessionData: session.sessionData
                  }
                : {})
        };
    }

    /**
     */ function cancelOrder(order, session) {
        const path = `${API_VERSION}/sessions/${session.id}/orders/cancel?clientKey=${session.clientKey}`;
        const data = {
            sessionData: session.data,
            order: order
        };
        return httpPost(
            {
                loadingContext: session.loadingContext,
                path,
                errorLevel: 'fatal'
            },
            data
        );
    }

    class Session {
        session;
        storage;
        clientKey;
        loadingContext;
        configuration;
        constructor(rawSession, clientKey, loadingContext) {
            const session = sanitizeSession(rawSession);
            if (!clientKey) throw new Error('No clientKey available');
            if (!loadingContext) throw new Error('No loadingContext available');
            this.storage = new Storage('session', 'localStorage');
            this.clientKey = clientKey;
            this.loadingContext = loadingContext;
            this.session = session;
            if (!this.session.sessionData) {
                this.session = this.getStoredSession();
            } else {
                this.storeSession();
            }
        }
        get id() {
            return this.session.id;
        }
        get data() {
            return this.session.sessionData;
        }
        /**
         * Updates the session.data with the latest data blob
         */ updateSessionData(latestData) {
            this.session.sessionData = latestData;
            this.storeSession();
        }
        /**
         * Fetches data from a session
         */ setupSession(options) {
            return setupSession(this, options).then(response => {
                if (response.configuration) {
                    this.configuration = {
                        ...response.configuration
                    };
                }
                return response;
            });
        }
        /**
         * Submits a session payment
         */ submitPayment(data) {
            return makePayment(data, this).then(response => {
                if (response.sessionData) {
                    this.updateSessionData(response.sessionData);
                }
                return response;
            });
        }
        /**
         * Submits session payment additional details
         */ submitDetails(data) {
            return submitDetails(data, this).then(response => {
                if (response.sessionData) {
                    this.updateSessionData(response.sessionData);
                }
                return response;
            });
        }
        /**
         * Checks the balance for a payment method
         */ checkBalance(data) {
            return checkBalance(data, this).then(response => {
                if (response.sessionData) {
                    this.updateSessionData(response.sessionData);
                }
                return response;
            });
        }
        /**
         * Creates an order for the current session
         */ createOrder() {
            return createOrder(this).then(response => {
                if (response.sessionData) {
                    this.updateSessionData(response.sessionData);
                }
                return response;
            });
        }
        /**
         * Cancels an order for the current session
         */ cancelOrder(data) {
            return cancelOrder(data.order, this).then(response => {
                if (response.sessionData) {
                    this.updateSessionData(response.sessionData);
                }
                return response;
            });
        }
        /**
         * Gets the stored session but only if the current id and the stored id match
         */ getStoredSession() {
            const storedSession = this.storage.get();
            return this.id === storedSession?.id ? storedSession : this.session;
        }
        /**
         * Stores the session
         */ storeSession() {
            this.storage.set({
                id: this.session.id,
                sessionData: this.session.sessionData
            });
        }
        /**
         * Clears the stored session
         */ removeStoredSession() {
            this.storage.remove();
        }
    }

    function SRMessages({ setComponentRef }) {
        const messagesRef = _({});
        // Just call once to create the object by which we expose the members expected by the parent comp
        if (!Object.keys(messagesRef.current).length) {
            setComponentRef?.(messagesRef.current);
        }
        const [messages, setMessages] = h(null);
        // Expose method expected by parent
        messagesRef.current.setMessages = msgs => {
            setMessages(msgs);
        };
        return messages
            ? /*#__PURE__*/ y$1(
                  _$1,
                  null,
                  messages.map(msg => {
                      return /*#__PURE__*/ y$1(
                          'div',
                          {
                              key: msg,
                              className: 'adyen-checkout-sr-panel__msg',
                              ...{
                                  'data-testid': msg
                              }
                          },
                          msg
                      );
                  })
              )
            : null;
    }

    /**
     * A panel meant to hold messages that will be read out by ScreenReaders on an aria-live="polite" basis
     * Expects a string or string array of message to add to the panel to be read out
     * For testing purposes can be made visible
     */ class SRPanel extends BaseElement {
        static type = 'srPanel';
        static defaultProps = {
            enabled: true,
            node: 'body',
            showPanel: false,
            id: 'ariaLiveSRPanel',
            ariaAttributes: {
                'aria-relevant': 'all',
                'aria-live': 'polite',
                'aria-atomic': 'true'
            }
        };
        srPanelContainer = null;
        id;
        showPanel;
        _enabled;
        _moveFocus;
        componentRef;
        constructor(props) {
            super(props);
            this.id = this.props.id;
            this.showPanel = this.props.showPanel;
            this._enabled = false;
            this._moveFocus = this.props.moveFocus ?? true;
            if (this.props.enabled) {
                this._enabled = true;
                if (document.querySelector(this.props.node)) {
                    this.srPanelContainer = document.createElement('div');
                    this.srPanelContainer.className = 'sr-panel-holder';
                    this.srPanelContainer.id = this.id;
                    document.querySelector(this.props.node).appendChild(this.srPanelContainer);
                    this.mount(this.srPanelContainer);
                } else {
                    throw new Error('Component could not mount. Root node was not found.');
                }
            }
        }
        setComponentRef = ref => {
            this.componentRef = ref;
        };
        get enabled() {
            return this._enabled;
        }
        get moveFocus() {
            return this._moveFocus;
        }
        setAriaProps(ariaAttributes) {
            const firstPanel = document.querySelector('[class^="adyen-checkout-sr-panel"]');
            for (const [key, value] of Object.entries(ariaAttributes)) {
                firstPanel.setAttribute(key, value);
            }
            this.props = {
                ...this.props,
                ariaAttributes: {
                    ...this.props.ariaAttributes,
                    ...ariaAttributes
                }
            };
        }
        // A method we can expose to allow comps to set messages in this panel
        setMessages = messages => {
            if (!this.props.enabled) return;
            let panelMessages = null;
            if (messages) {
                // Ensure panelMessages is an array
                panelMessages = Array.isArray(messages) ? messages : [messages];
            }
            this.componentRef.setMessages(panelMessages);
        };
        render() {
            if (!this.props.enabled) return null;
            return /*#__PURE__*/ y$1(
                'div',
                {
                    className: this.showPanel ? 'adyen-checkout-sr-panel' : 'adyen-checkout-sr-panel--sr-only',
                    role: 'log',
                    ...this.props.ariaAttributes,
                    ...{
                        'data-testid': this.id
                    }
                },
                /*#__PURE__*/ y$1(SRMessages, {
                    setComponentRef: this.setComponentRef
                })
            );
        }
    }

    function assertIsTypeofUIElement(item) {
        return typeof UIElement === typeof item;
    }
    const actionElements = {
        redirect: RedirectElement
    };
    function createComponentsMap(components) {
        const componentsMap = components.reduce((memo, component) => {
            const isValid = assertIsTypeofUIElement(component);
            if (!isValid) {
                return memo;
            }
            const supportedTxVariants = [component.type, ...component.txVariants].filter(txVariant => txVariant);
            supportedTxVariants.forEach(txVariant => {
                memo = {
                    ...memo,
                    [txVariant]: component
                };
            });
            component.dependencies.forEach(dependency => {
                memo = {
                    ...memo,
                    [dependency.type]: dependency
                };
            });
            return memo;
        }, {});
        return {
            ...componentsMap,
            ...actionElements
        };
    }
    class Registry {
        componentsMap = {};
        add(...items) {
            this.componentsMap = createComponentsMap(items);
            console.log('### core.registry:::: componentsMap', this.componentsMap);
        }
        getComponent(type) {
            return this.componentsMap[type];
        }
    }
    // singleton instance
    var registry = /* #__PURE__ */ new Registry();

    class Core {
        session;
        paymentMethodsResponse;
        modules;
        options;
        loadingContext;
        cdnContext;
        components = [];
        paymentMethodsConfiguration = {};
        static version = {
            version: '5.46.0',
            revision: 'b9c28fbf',
            branch: 'poc/component-tree-shaking-new-operator-v2',
            buildId: '@adyen/adyen-web-0d871b17-e326-4142-b9d5-594c2ff5d1c0'
        };
        static registry = registry;
        static register(...items) {
            registry.add(...items);
        }
        getComponent(txVariant) {
            return registry.getComponent(txVariant);
        }
        constructor(props) {
            this.createFromAction = this.createFromAction.bind(this);
            this.setOptions(props);
            this.createPaymentMethodsList();
            this.loadingContext = resolveEnvironment$1(this.options.environment);
            this.cdnContext = resolveCDNEnvironment(this.options.resourceEnvironment || this.options.environment);
            const clientKeyType = this.options.clientKey?.substr(0, 4);
            if ((clientKeyType === 'test' || clientKeyType === 'live') && !this.loadingContext.includes(clientKeyType)) {
                throw new Error(`Error: you are using a ${clientKeyType} clientKey against the ${this.options.environment} environment`);
            }
            // Expose version number for npm builds
            window['adyenWebVersion'] = Core.version.version;
        }
        initialize() {
            if (this.options.session) {
                this.session = new Session(this.options.session, this.options.clientKey, this.loadingContext);
                return this.session
                    .setupSession(this.options)
                    .then(sessionResponse => {
                        const { amount, shopperLocale, paymentMethods, ...rest } = sessionResponse;
                        this.setOptions({
                            ...rest,
                            amount: this.options.order ? this.options.order.remainingAmount : amount,
                            locale: this.options.locale || shopperLocale
                        });
                        this.createPaymentMethodsList(paymentMethods);
                        this.createCoreModules();
                        return this;
                    })
                    .catch(error => {
                        if (this.options.onError) this.options.onError(error);
                        return this;
                    });
            }
            this.createCoreModules();
            return Promise.resolve(this);
        }
        /**
         * Submits details using onAdditionalDetails or the session flow if available
         * @param details -
         */ submitDetails(details) {
            if (this.options.onAdditionalDetails) {
                return this.options.onAdditionalDetails(details);
            }
            if (this.session) {
                this.session
                    .submitDetails(details)
                    .then(response => {
                        this.options.onPaymentCompleted?.(response);
                    })
                    .catch(error => {
                        this.options.onError?.(error);
                    });
            }
        }
        /**
         * Instantiates a new element component ready to be mounted from an action object
         *
         * @param action - action defining the component with the component data
         * @param options - options that will be merged to the global Checkout props
         * @returns new UIElement
         */ createFromAction(action, options = {}) {
            if (!action || !action.type) {
                if (hasOwnProperty(action, 'action') && hasOwnProperty(action, 'resultCode')) {
                    throw new Error(
                        'createFromAction::Invalid Action - the passed action object itself has an "action" property and ' +
                            'a "resultCode": have you passed in the whole response object by mistake?'
                    );
                }
                throw new Error('createFromAction::Invalid Action - the passed action object does not have a "type" property');
            }
            if (action.type) {
                // If it is threeDS, then it would need to fetch from Card
                const actionTypeConfiguration = getComponentConfiguration(action.type, this.paymentMethodsConfiguration);
                const props = {
                    ...this.getCorePropsForComponent(),
                    ...actionTypeConfiguration,
                    ...options
                };
                return getComponentForAction(this, registry, action, props);
            }
            return this.handleCreateError();
        }
        /**
         * Updates global configurations, resets the internal state and remounts each element.
         *
         * @param options - props to update
         * @returns this - the element instance
         */ update = (options = {}) => {
            this.setOptions(options);
            return this.initialize().then(() => {
                // Update each component under this instance
                this.components.forEach(c => c.update(this.getCorePropsForComponent()));
                return this;
            });
        };
        /**
         * Remove the reference of a component
         * @param component - reference to the component to be removed
         * @returns this - the element instance
         * // TODO: Do we need this?
         */ remove = component => {
            this.components = this.components.filter(c => c._id !== component._id);
            component.unmount();
            return this;
        };
        /**
         * @internal
         * Create or update the config object passed when AdyenCheckout is initialised (environment, clientKey, etc...)
         */ setOptions = options => {
            if (hasOwnProperty(options?.paymentMethodsConfiguration, 'scheme')) {
                console.warn(
                    'WARNING: You cannot define a property "scheme" on the paymentMethodsConfiguration object - it should be defined as "card" otherwise it will be ignored'
                );
            }
            if (hasOwnProperty(options, 'installmentOptions')) {
                console.warn(
                    "WARNING: you are setting installmentOptions directly in the top level configuration object. They should be set via the 'paymentMethodsConfiguration' object or directly on the 'card' component."
                );
            }
            this.options = {
                ...this.options,
                ...options
            };
        };
        /**
         * @internal
         * @returns props for a new UIElement
         */ getCorePropsForComponent() {
            const globalOptions = processGlobalOptions(this.options);
            return {
                ...globalOptions,
                i18n: this.modules.i18n,
                modules: this.modules,
                session: this.session,
                loadingContext: this.loadingContext,
                cdnContext: this.cdnContext,
                createFromAction: this.createFromAction
            };
        }
        updatePaymentMethodsConfiguration(paymentMethodConfiguration = {}) {
            this.paymentMethodsConfiguration = {
                ...this.paymentMethodsConfiguration,
                ...paymentMethodConfiguration
            };
        }
        storeElementReference(element) {
            if (element) {
                this.components.push(element);
            }
        }
        /**
         * @internal
         */ handleCreateError(paymentMethod) {
            const paymentMethodName = paymentMethod && paymentMethod.name ? paymentMethod.name : 'The passed payment method';
            const errorMessage = paymentMethod
                ? `${paymentMethodName} is not a valid Checkout Component. What was passed as a txVariant was: ${JSON.stringify(
                      paymentMethod
                  )}. Check if this payment method is configured in the Backoffice or if the txVariant is a valid one`
                : 'No Payment Method component was passed';
            throw new Error(errorMessage);
        }
        createPaymentMethodsList(paymentMethodsResponse) {
            this.paymentMethodsResponse = new PaymentMethodsResponse(this.options.paymentMethodsResponse || paymentMethodsResponse, this.options);
        }
        createCoreModules() {
            if (this.modules) {
                console.warn('Core: Core modules are already created.');
                return;
            }
            this.modules = Object.freeze({
                risk: new RiskElement({
                    ...this.options,
                    loadingContext: this.loadingContext,
                    core: this
                }),
                analytics: new Analytics({
                    loadingContext: this.loadingContext,
                    clientKey: this.options.clientKey,
                    locale: this.options.locale,
                    analytics: this.options.analytics,
                    amount: this.options.amount
                }),
                resources: new Resources(this.cdnContext),
                i18n: new Language(this.options.locale, this.options.translations),
                srPanel: new SRPanel({
                    core: this,
                    ...this.options.srConfig
                })
            });
        }
    }

    async function AdyenCheckout(props) {
        const checkout = new Core(props);
        return await checkout.initialize();
    }
    AdyenCheckout.register = (...items) => {
        Core.register(...items);
    };

    const components = Object.keys(elements).map(key => elements[key]);

    AdyenCheckout.register(...components);
    const checkout = {
        AdyenCheckout,
        ...components
    };
    if (typeof window !== 'undefined') {
        debugger;
        // @ts-ignore Assign instance to window
        window.adyen.checkout = checkout;
    }

    return checkout;
});
//# sourceMappingURL=index.umd.js.map
